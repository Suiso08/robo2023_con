
controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  0800b548  0800b548  0001b548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc9c  0800bc9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc9c  0800bc9c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc9c  0800bc9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001e8  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2ce  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f34  00000000  00000000  0002d4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c385  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5c5  00000000  00000000  0004ca05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a438d  00000000  00000000  00059fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fe357  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ef8  00000000  00000000  000fe3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b530 	.word	0x0800b530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b530 	.word	0x0800b530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000cfc:	b0a0      	sub	sp, #128	; 0x80
 8000cfe:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f000 fd46 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f92a 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f000 fab0 	bl	800126c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d0c:	f000 fa7e 	bl	800120c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d10:	f000 f97e 	bl	8001010 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d14:	f000 f9ec 	bl	80010f0 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000d18:	f000 fa48 	bl	80011ac <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  a=1600.0;
 8000d1c:	4b88      	ldr	r3, [pc, #544]	; (8000f40 <main+0x248>)
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
	  memset(adcout,'\0',N);
 8000d20:	463b      	mov	r3, r7
 8000d22:	2240      	movs	r2, #64	; 0x40
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f005 ff56 	bl	8006bd8 <memset>

	  HAL_ADC_Start(&hadc1);
 8000d2c:	4885      	ldr	r0, [pc, #532]	; (8000f44 <main+0x24c>)
 8000d2e:	f000 ff27 	bl	8001b80 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8000d32:	4885      	ldr	r0, [pc, #532]	; (8000f48 <main+0x250>)
 8000d34:	f000 ff24 	bl	8001b80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000d38:	210a      	movs	r1, #10
 8000d3a:	4882      	ldr	r0, [pc, #520]	; (8000f44 <main+0x24c>)
 8000d3c:	f001 f80c 	bl	8001d58 <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000d40:	210a      	movs	r1, #10
 8000d42:	4881      	ldr	r0, [pc, #516]	; (8000f48 <main+0x250>)
 8000d44:	f001 f808 	bl	8001d58 <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc1);
 8000d48:	487e      	ldr	r0, [pc, #504]	; (8000f44 <main+0x24c>)
 8000d4a:	f000 ffcf 	bl	8001cec <HAL_ADC_Stop>
	  HAL_ADC_Stop(&hadc2);
 8000d4e:	487e      	ldr	r0, [pc, #504]	; (8000f48 <main+0x250>)
 8000d50:	f000 ffcc 	bl	8001cec <HAL_ADC_Stop>

	  x = HAL_ADC_GetValue(&hadc1)-a;
 8000d54:	487b      	ldr	r0, [pc, #492]	; (8000f44 <main+0x24c>)
 8000d56:	f001 f8cd 	bl	8001ef4 <HAL_ADC_GetValue>
 8000d5a:	ee07 0a90 	vmov	s15, r0
 8000d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d62:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d6a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  y = HAL_ADC_GetValue(&hadc2)-a;
 8000d6e:	4876      	ldr	r0, [pc, #472]	; (8000f48 <main+0x250>)
 8000d70:	f001 f8c0 	bl	8001ef4 <HAL_ADC_GetValue>
 8000d74:	ee07 0a90 	vmov	s15, r0
 8000d78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d7c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d84:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	  arg = atan2(y,x);
 8000d88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d8a:	f7ff fbdd 	bl	8000548 <__aeabi_f2d>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d94:	f7ff fbd8 	bl	8000548 <__aeabi_f2d>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	ec43 2b11 	vmov	d1, r2, r3
 8000da0:	ec45 4b10 	vmov	d0, r4, r5
 8000da4:	f004 fc88 	bl	80056b8 <atan2>
 8000da8:	ec53 2b10 	vmov	r2, r3, d0
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f7ff ff1a 	bl	8000be8 <__aeabi_d2f>
 8000db4:	4603      	mov	r3, r0
 8000db6:	647b      	str	r3, [r7, #68]	; 0x44
	  r = (x/cos(arg) + y/sin(arg)) / 2;
 8000db8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000dba:	f7ff fbc5 	bl	8000548 <__aeabi_f2d>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000dc4:	f7ff fbc0 	bl	8000548 <__aeabi_f2d>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	ec43 2b10 	vmov	d0, r2, r3
 8000dd0:	f004 fbc6 	bl	8005560 <cos>
 8000dd4:	ec53 2b10 	vmov	r2, r3, d0
 8000dd8:	4620      	mov	r0, r4
 8000dda:	4629      	mov	r1, r5
 8000ddc:	f7ff fd36 	bl	800084c <__aeabi_ddiv>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4690      	mov	r8, r2
 8000de6:	4699      	mov	r9, r3
 8000de8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000dea:	f7ff fbad 	bl	8000548 <__aeabi_f2d>
 8000dee:	4604      	mov	r4, r0
 8000df0:	460d      	mov	r5, r1
 8000df2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000df4:	f7ff fba8 	bl	8000548 <__aeabi_f2d>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	ec43 2b10 	vmov	d0, r2, r3
 8000e00:	f004 fc02 	bl	8005608 <sin>
 8000e04:	ec53 2b10 	vmov	r2, r3, d0
 8000e08:	4620      	mov	r0, r4
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	f7ff fd1e 	bl	800084c <__aeabi_ddiv>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4640      	mov	r0, r8
 8000e16:	4649      	mov	r1, r9
 8000e18:	f7ff fa38 	bl	800028c <__adddf3>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	f7ff fd0e 	bl	800084c <__aeabi_ddiv>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fed6 	bl	8000be8 <__aeabi_d2f>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	643b      	str	r3, [r7, #64]	; 0x40

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_RESET)
 8000e40:	2102      	movs	r1, #2
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f002 f863 	bl	8002f10 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <main+0x15e>
	  {
		  dash=1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e54:	e001      	b.n	8000e5a <main+0x162>
	  }
	  else
	  {
		  dash=0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	65fb      	str	r3, [r7, #92]	; 0x5c
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)==GPIO_PIN_RESET)
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f002 f856 	bl	8002f10 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <main+0x178>
	  {
		  above=1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e6e:	e001      	b.n	8000e74 <main+0x17c>
	  }
	  else
	  {
		  above=0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65bb      	str	r3, [r7, #88]	; 0x58
	  }

	  if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==GPIO_PIN_RESET))
 8000e74:	2108      	movs	r1, #8
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7a:	f002 f849 	bl	8002f10 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <main+0x1a2>
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f002 f841 	bl	8002f10 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <main+0x1a2>
	  {
		  gather=0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	657b      	str	r3, [r7, #84]	; 0x54
 8000e98:	e018      	b.n	8000ecc <main+0x1d4>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)==GPIO_PIN_RESET)
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f002 f836 	bl	8002f10 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <main+0x1b8>
	  {
		  gather=1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	657b      	str	r3, [r7, #84]	; 0x54
 8000eae:	e00d      	b.n	8000ecc <main+0x1d4>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==GPIO_PIN_RESET)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f002 f82b 	bl	8002f10 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d103      	bne.n	8000ec8 <main+0x1d0>
	  {
		  gather=-1;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8000ec6:	e001      	b.n	8000ecc <main+0x1d4>
	  }
	  else
	  {
		  gather=0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	657b      	str	r3, [r7, #84]	; 0x54
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snprintf((char*)adcout,N,"R:%6.1f,Arg:%6.1f,Dash:%d,Above:%d,Gather:%2d\n\r",r,arg*180.0/M_PI,dash,above,gather);
 8000ecc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000ece:	f7ff fb3b 	bl	8000548 <__aeabi_f2d>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	460d      	mov	r5, r1
 8000ed6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000ed8:	f7ff fb36 	bl	8000548 <__aeabi_f2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <main+0x254>)
 8000ee2:	f7ff fb89 	bl	80005f8 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	a312      	add	r3, pc, #72	; (adr r3, 8000f38 <main+0x240>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fcaa 	bl	800084c <__aeabi_ddiv>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4638      	mov	r0, r7
 8000efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000f00:	9106      	str	r1, [sp, #24]
 8000f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f04:	9105      	str	r1, [sp, #20]
 8000f06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000f08:	9104      	str	r1, [sp, #16]
 8000f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f0e:	e9cd 4500 	strd	r4, r5, [sp]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <main+0x258>)
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	f006 fce7 	bl	80078e8 <sniprintf>
	  //snprintf((char*)adcout,N,"X:%5.0f,Y:%5.0f\n\r",x,y);

	  HAL_UART_Transmit(&huart2, adcout, N, HAL_MAX_DELAY);
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	2240      	movs	r2, #64	; 0x40
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <main+0x25c>)
 8000f24:	f003 fbf4 	bl	8004710 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, adcout, N, HAL_MAX_DELAY);
 8000f28:	4639      	mov	r1, r7
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <main+0x260>)
 8000f32:	f003 fbed 	bl	8004710 <HAL_UART_Transmit>
	  a=1600.0;
 8000f36:	e6f1      	b.n	8000d1c <main+0x24>
 8000f38:	54442d18 	.word	0x54442d18
 8000f3c:	400921fb 	.word	0x400921fb
 8000f40:	44c80000 	.word	0x44c80000
 8000f44:	200001fc 	.word	0x200001fc
 8000f48:	2000024c 	.word	0x2000024c
 8000f4c:	40668000 	.word	0x40668000
 8000f50:	0800b548 	.word	0x0800b548
 8000f54:	20000324 	.word	0x20000324
 8000f58:	2000029c 	.word	0x2000029c

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	; 0x58
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fe34 	bl	8006bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 ffc7 	bl	8002f40 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000fb8:	f000 f98e 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fff0 	bl	8003fbc <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fe2:	f000 f979 	bl	80012d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000fe6:	2381      	movs	r3, #129	; 0x81
 8000fe8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fa16 	bl	8004428 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001002:	f000 f969 	bl	80012d8 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3758      	adds	r7, #88	; 0x58
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001034:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <MX_ADC1_Init+0xdc>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_ADC1_Init+0xdc>)
 800104e:	2200      	movs	r2, #0
 8001050:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <MX_ADC1_Init+0xdc>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001062:	2201      	movs	r2, #1
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_ADC1_Init+0xdc>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_ADC1_Init+0xdc>)
 800107c:	2204      	movs	r2, #4
 800107e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001082:	2200      	movs	r2, #0
 8001084:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_ADC1_Init+0xdc>)
 8001088:	2200      	movs	r2, #0
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	4817      	ldr	r0, [pc, #92]	; (80010ec <MX_ADC1_Init+0xdc>)
 800108e:	f000 fbe5 	bl	800185c <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f91e 	bl	80012d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_ADC1_Init+0xdc>)
 80010a8:	f001 f9f2 	bl	8002490 <HAL_ADCEx_MultiModeConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010b2:	f000 f911 	bl	80012d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_ADC1_Init+0xdc>)
 80010d4:	f000 ff1c 	bl	8001f10 <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010de:	f000 f8fb 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001fc 	.word	0x200001fc

080010f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001108:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <MX_ADC2_Init+0xb8>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001120:	2200      	movs	r2, #0
 8001122:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001134:	2201      	movs	r2, #1
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001140:	2201      	movs	r2, #1
 8001142:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800114e:	2204      	movs	r2, #4
 8001150:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001154:	2200      	movs	r2, #0
 8001156:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800115a:	2200      	movs	r2, #0
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_ADC2_Init+0xb4>)
 8001160:	f000 fb7c 	bl	800185c <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800116a:	f000 f8b5 	bl	80012d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116e:	2301      	movs	r3, #1
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_ADC2_Init+0xb4>)
 800118c:	f000 fec0 	bl	8001f10 <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001196:	f000 f89f 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000024c 	.word	0x2000024c
 80011a8:	50000100 	.word	0x50000100

080011ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_USART1_UART_Init+0x5c>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011f0:	f003 fa40 	bl	8004674 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011fa:	f000 f86d 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000029c 	.word	0x2000029c
 8001208:	40013800 	.word	0x40013800

0800120c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <MX_USART2_UART_Init+0x5c>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001218:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_USART2_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001250:	f003 fa10 	bl	8004674 <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800125a:	f000 f83d 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000324 	.word	0x20000324
 8001268:	40004400 	.word	0x40004400

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_GPIO_Init+0x68>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <MX_GPIO_Init+0x68>)
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128c:	6153      	str	r3, [r2, #20]
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_GPIO_Init+0x68>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_GPIO_Init+0x68>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <MX_GPIO_Init+0x68>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_GPIO_Init+0x68>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA3 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80012b2:	23ca      	movs	r3, #202	; 0xca
 80012b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f001 fcb0 	bl	8002c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <Error_Handler+0x8>
	...

080012e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_MspInit+0x44>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_MspInit+0x44>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6193      	str	r3, [r2, #24]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <HAL_MspInit+0x44>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_MspInit+0x44>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_MspInit+0x44>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MspInit+0x44>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134c:	d12e      	bne.n	80013ac <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_ADC_MspInit+0xf0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a31      	ldr	r2, [pc, #196]	; (800141c <HAL_ADC_MspInit+0xf0>)
 8001356:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_ADC_MspInit+0xf0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10b      	bne.n	8001378 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4a2e      	ldr	r2, [pc, #184]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136a:	6153      	str	r3, [r2, #20]
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 800137e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001382:	6153      	str	r3, [r2, #20]
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f001 fc41 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013aa:	e032      	b.n	8001412 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_ADC_MspInit+0xf8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12d      	bne.n	8001412 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_ADC_MspInit+0xf0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_ADC_MspInit+0xf0>)
 80013be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_ADC_MspInit+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10b      	bne.n	80013e0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6153      	str	r3, [r2, #20]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ea:	6153      	str	r3, [r2, #20]
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_ADC_MspInit+0xf4>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f8:	2310      	movs	r3, #16
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 fc0d 	bl	8002c2c <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200003ac 	.word	0x200003ac
 8001420:	40021000 	.word	0x40021000
 8001424:	50000100 	.word	0x50000100

08001428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a34      	ldr	r2, [pc, #208]	; (8001518 <HAL_UART_MspInit+0xf0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12a      	bne.n	80014a0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_UART_MspInit+0xf4>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a33      	ldr	r2, [pc, #204]	; (800151c <HAL_UART_MspInit+0xf4>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_UART_MspInit+0xf4>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_UART_MspInit+0xf4>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a2d      	ldr	r2, [pc, #180]	; (800151c <HAL_UART_MspInit+0xf4>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_UART_MspInit+0xf4>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800147a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f001 fbc7 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149e:	e036      	b.n	800150e <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_UART_MspInit+0xf8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d131      	bne.n	800150e <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_UART_MspInit+0xf4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_UART_MspInit+0xf4>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_UART_MspInit+0xf4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_UART_MspInit+0xf4>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_UART_MspInit+0xf4>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_UART_MspInit+0xf4>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80014da:	f248 0304 	movw	r3, #32772	; 0x8004
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f001 fb97 	bl	8002c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2026      	movs	r0, #38	; 0x26
 8001504:	f001 fae5 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001508:	2026      	movs	r0, #38	; 0x26
 800150a:	f001 fafe 	bl	8002b0a <HAL_NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40013800 	.word	0x40013800
 800151c:	40021000 	.word	0x40021000
 8001520:	40004400 	.word	0x40004400

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f954 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART2_IRQHandler+0x10>)
 800157e:	f003 f951 	bl	8004824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000324 	.word	0x20000324

0800158c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_kill>:

int _kill(int pid, int sig)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015a6:	f005 faed 	bl	8006b84 <__errno>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2216      	movs	r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
  return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_exit>:

void _exit (int status)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ce:	e7fe      	b.n	80015ce <_exit+0x12>

080015d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e2:	f3af 8000 	nop.w
 80015e6:	4601      	mov	r1, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	b2ca      	uxtb	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_read+0x12>
  }

  return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e009      	b.n	8001630 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf1      	blt.n	800161c <_write+0x12>
  }
  return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_close>:

int _close(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	605a      	str	r2, [r3, #4]
  return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f005 fa52 	bl	8006b84 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20003000 	.word	0x20003000
 800170c:	00000400 	.word	0x00000400
 8001710:	200003b0 	.word	0x200003b0
 8001714:	200003c8 	.word	0x200003c8

08001718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff ffea 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f005 fa11 	bl	8006b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176e:	f7ff fac3 	bl	8000cf8 <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001774:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001780:	0800bca4 	.word	0x0800bca4
  ldr r2, =_sbss
 8001784:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001788:	200003c8 	.word	0x200003c8

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x28>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f001 f98b 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fd9a 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 f9a3 	bl	8002b26 <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f001 f96b 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	20000008 	.word	0x20000008
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	200003b4 	.word	0x200003b4

08001844 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;  
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200003b4 	.word	0x200003b4

0800185c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b09a      	sub	sp, #104	; 0x68
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e172      	b.n	8001b62 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	d176      	bne.n	800197c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d152      	bne.n	800193c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fd3b 	bl	800132c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d13b      	bne.n	800193c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 ff0d 	bl	80026e4 <ADC_Disable>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d12f      	bne.n	800193c <HAL_ADC_Init+0xe0>
 80018dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12b      	bne.n	800193c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ec:	f023 0302 	bic.w	r3, r3, #2
 80018f0:	f043 0202 	orr.w	r2, r3, #2
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001906:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001916:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001918:	4b94      	ldr	r3, [pc, #592]	; (8001b6c <HAL_ADC_Init+0x310>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a94      	ldr	r2, [pc, #592]	; (8001b70 <HAL_ADC_Init+0x314>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9a      	lsrs	r2, r3, #18
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800192e:	e002      	b.n	8001936 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3b01      	subs	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f9      	bne.n	8001930 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001958:	d110      	bne.n	800197c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f023 0312 	bic.w	r3, r3, #18
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 80df 	bne.w	8001b48 <HAL_ADC_Init+0x2ec>
 800198a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 80da 	bne.w	8001b48 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 80d2 	bne.w	8001b48 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_ADC_Init+0x318>)
 80019b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c0:	d102      	bne.n	80019c8 <HAL_ADC_Init+0x16c>
 80019c2:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_ADC_Init+0x31c>)
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e002      	b.n	80019ce <HAL_ADC_Init+0x172>
 80019c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_ADC_Init+0x192>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x192>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_Init+0x194>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d11c      	bne.n	8001a2e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_ADC_Init+0x1ba>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Init+0x1ba>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_Init+0x1bc>
 8001a16:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d108      	bne.n	8001a2e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7e5b      	ldrb	r3, [r3, #25]
 8001a32:	035b      	lsls	r3, r3, #13
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a38:	2a01      	cmp	r2, #1
 8001a3a:	d002      	beq.n	8001a42 <HAL_ADC_Init+0x1e6>
 8001a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a40:	e000      	b.n	8001a44 <HAL_ADC_Init+0x1e8>
 8001a42:	2200      	movs	r2, #0
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a54:	4313      	orrs	r3, r2
 8001a56:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11b      	bne.n	8001a9a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e5b      	ldrb	r3, [r3, #25]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	045a      	lsls	r2, r3, #17
 8001a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a74:	4313      	orrs	r3, r2
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a7c:	e00d      	b.n	8001a9a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a86:	f043 0220 	orr.w	r2, r3, #32
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d114      	bne.n	8001aea <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ace:	f023 0302 	bic.w	r3, r3, #2
 8001ad2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7e1b      	ldrb	r3, [r3, #24]
 8001ad8:	039a      	lsls	r2, r3, #14
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_ADC_Init+0x320>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001afa:	430b      	orrs	r3, r1
 8001afc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10c      	bne.n	8001b20 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f023 010f 	bic.w	r1, r3, #15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 020f 	bic.w	r2, r2, #15
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
 8001b46:	e00a      	b.n	8001b5e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f023 0312 	bic.w	r3, r3, #18
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3768      	adds	r7, #104	; 0x68
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	50000300 	.word	0x50000300
 8001b78:	50000100 	.word	0x50000100
 8001b7c:	fff0c007 	.word	0xfff0c007

08001b80 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 809c 	bne.w	8001cd4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Start+0x2a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e097      	b.n	8001cda <HAL_ADC_Start+0x15a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fd32 	bl	800261c <ADC_Enable>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8083 	bne.w	8001cca <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bd8:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <HAL_ADC_Start+0x164>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <HAL_ADC_Start+0x6e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bec:	d115      	bne.n	8001c1a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d027      	beq.n	8001c58 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c18:	e01e      	b.n	8001c58 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2e:	d004      	beq.n	8001c3a <HAL_ADC_Start+0xba>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2c      	ldr	r2, [pc, #176]	; (8001ce8 <HAL_ADC_Start+0x168>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_ADC_Start+0xd8>
 8001c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c64:	d106      	bne.n	8001c74 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f023 0206 	bic.w	r2, r3, #6
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
 8001c72:	e002      	b.n	8001c7a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	221c      	movs	r2, #28
 8001c88:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_Start+0x164>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_ADC_Start+0x138>
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_ADC_Start+0x164>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_ADC_Start+0x138>
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_Start+0x164>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	d004      	beq.n	8001cb8 <HAL_ADC_Start+0x138>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0204 	orr.w	r2, r2, #4
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001cd2:	e001      	b.n	8001cd8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	50000300 	.word	0x50000300
 8001ce8:	50000100 	.word	0x50000100

08001cec <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Stop+0x1a>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e023      	b.n	8001d4e <HAL_ADC_Stop+0x62>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d0e:	216c      	movs	r1, #108	; 0x6c
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fd4d 	bl	80027b0 <ADC_ConversionStop>
 8001d16:	4603      	mov	r3, r0
 8001d18:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d111      	bne.n	8001d44 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fcdf 	bl	80026e4 <ADC_Disable>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d102      	bne.n	8001d74 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e02e      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d74:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <HAL_ADC_PollForConversion+0x198>)
 8001d76:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d112      	bne.n	8001daa <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d11d      	bne.n	8001dce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f043 0220 	orr.w	r2, r3, #32
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e09d      	b.n	8001ee6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f043 0220 	orr.w	r2, r3, #32
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e08b      	b.n	8001ee6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001dce:	230c      	movs	r3, #12
 8001dd0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_ADC_PollForConversion+0x198>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_PollForConversion+0x90>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de6:	d104      	bne.n	8001df2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e003      	b.n	8001dfa <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001df2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001dfa:	f7ff fd23 	bl	8001844 <HAL_GetTick>
 8001dfe:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e00:	e021      	b.n	8001e46 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d01d      	beq.n	8001e46 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_ADC_PollForConversion+0xc8>
 8001e10:	f7ff fd18 	bl	8001844 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d212      	bcs.n	8001e46 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10b      	bne.n	8001e46 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f043 0204 	orr.w	r2, r3, #4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e04f      	b.n	8001ee6 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0d6      	beq.n	8001e02 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d131      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d12c      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d125      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d112      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb8:	e00b      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	50000300 	.word	0x50000300

08001ef4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b09b      	sub	sp, #108	; 0x6c
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x22>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e2a4      	b.n	800247c <HAL_ADC_ConfigChannel+0x56c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 8288 	bne.w	800245a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d81c      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	461a      	mov	r2, r3
 8001f66:	231f      	movs	r3, #31
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4019      	ands	r1, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8a:	e063      	b.n	8002054 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d81e      	bhi.n	8001fd2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	3b1e      	subs	r3, #30
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4019      	ands	r1, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	3b1e      	subs	r3, #30
 8001fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd0:	e040      	b.n	8002054 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b0e      	cmp	r3, #14
 8001fd8:	d81e      	bhi.n	8002018 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	3b3c      	subs	r3, #60	; 0x3c
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	3b3c      	subs	r3, #60	; 0x3c
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
 8002016:	e01d      	b.n	8002054 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	3b5a      	subs	r3, #90	; 0x5a
 800202c:	221f      	movs	r2, #31
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	4019      	ands	r1, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	3b5a      	subs	r3, #90	; 0x5a
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80e5 	bne.w	800222e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b09      	cmp	r3, #9
 800206a:	d91c      	bls.n	80020a6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6999      	ldr	r1, [r3, #24]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	3b1e      	subs	r3, #30
 800207e:	2207      	movs	r2, #7
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	4019      	ands	r1, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6898      	ldr	r0, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	3b1e      	subs	r3, #30
 8002098:	fa00 f203 	lsl.w	r2, r0, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]
 80020a4:	e019      	b.n	80020da <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6959      	ldr	r1, [r3, #20]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	2207      	movs	r2, #7
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	4019      	ands	r1, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6898      	ldr	r0, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d84f      	bhi.n	800219c <HAL_ADC_ConfigChannel+0x28c>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <HAL_ADC_ConfigChannel+0x1f4>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002115 	.word	0x08002115
 8002108:	08002137 	.word	0x08002137
 800210c:	08002159 	.word	0x08002159
 8002110:	0800217b 	.word	0x0800217b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211a:	4b94      	ldr	r3, [pc, #592]	; (800236c <HAL_ADC_ConfigChannel+0x45c>)
 800211c:	4013      	ands	r3, r2
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	0691      	lsls	r1, r2, #26
 8002124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002126:	430a      	orrs	r2, r1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002132:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002134:	e07e      	b.n	8002234 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800213c:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_ADC_ConfigChannel+0x45c>)
 800213e:	4013      	ands	r3, r2
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	0691      	lsls	r1, r2, #26
 8002146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002148:	430a      	orrs	r2, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002154:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002156:	e06d      	b.n	8002234 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800215e:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_ADC_ConfigChannel+0x45c>)
 8002160:	4013      	ands	r3, r2
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	0691      	lsls	r1, r2, #26
 8002168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800216a:	430a      	orrs	r2, r1
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002176:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002178:	e05c      	b.n	8002234 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002180:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_ADC_ConfigChannel+0x45c>)
 8002182:	4013      	ands	r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	0691      	lsls	r1, r2, #26
 800218a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800218c:	430a      	orrs	r2, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002198:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800219a:	e04b      	b.n	8002234 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	069b      	lsls	r3, r3, #26
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021be:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	069b      	lsls	r3, r3, #26
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002206:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	429a      	cmp	r2, r3
 800221a:	d10a      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800222c:	e001      	b.n	8002232 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002232:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x344>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x344>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_ADC_ConfigChannel+0x346>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 810a 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d00f      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002282:	e049      	b.n	8002318 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	409a      	lsls	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	d91c      	bls.n	80022e0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6999      	ldr	r1, [r3, #24]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	3b1b      	subs	r3, #27
 80022b8:	2207      	movs	r2, #7
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	4019      	ands	r1, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6898      	ldr	r0, [r3, #8]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	3b1b      	subs	r3, #27
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	e01b      	b.n	8002318 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6959      	ldr	r1, [r3, #20]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	2207      	movs	r2, #7
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6898      	ldr	r0, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	fa00 f203 	lsl.w	r2, r0, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_ADC_ConfigChannel+0x460>)
 800231a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b10      	cmp	r3, #16
 8002322:	d105      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002334:	2b11      	cmp	r3, #17
 8002336:	d105      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002348:	2b12      	cmp	r3, #18
 800234a:	f040 8091 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800234e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 808a 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002364:	d108      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x468>
 8002366:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_ADC_ConfigChannel+0x464>)
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e008      	b.n	800237e <HAL_ADC_ConfigChannel+0x46e>
 800236c:	83fff000 	.word	0x83fff000
 8002370:	50000300 	.word	0x50000300
 8002374:	50000100 	.word	0x50000100
 8002378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800237c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d108      	bne.n	800239e <HAL_ADC_ConfigChannel+0x48e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x48e>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x490>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d150      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x4b6>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x4b6>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x4b8>
 80023c6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d13c      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d11d      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x500>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023dc:	d118      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ea:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_ADC_ConfigChannel+0x578>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a27      	ldr	r2, [pc, #156]	; (800248c <HAL_ADC_ConfigChannel+0x57c>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	0c9a      	lsrs	r2, r3, #18
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002400:	e002      	b.n	8002408 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3b01      	subs	r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800240e:	e02e      	b.n	800246e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b11      	cmp	r3, #17
 8002416:	d10b      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x520>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002420:	d106      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800242a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800242e:	e01e      	b.n	800246e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b12      	cmp	r3, #18
 8002436:	d11a      	bne.n	800246e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002442:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002444:	e013      	b.n	800246e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002458:	e00a      	b.n	8002470 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0220 	orr.w	r2, r3, #32
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800246c:	e000      	b.n	8002470 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800246e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800247c:	4618      	mov	r0, r3
 800247e:	376c      	adds	r7, #108	; 0x6c
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000000 	.word	0x20000000
 800248c:	431bde83 	.word	0x431bde83

08002490 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002490:	b480      	push	{r7}
 8002492:	b099      	sub	sp, #100	; 0x64
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a8:	d102      	bne.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	e002      	b.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80024b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024b4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0a2      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e09b      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d17f      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d179      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f0:	4b49      	ldr	r3, [pc, #292]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80024f2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d040      	beq.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800250e:	035b      	lsls	r3, r3, #13
 8002510:	430b      	orrs	r3, r1
 8002512:	431a      	orrs	r2, r3
 8002514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002516:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d15c      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800255a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	d14b      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002568:	f023 030f 	bic.w	r3, r3, #15
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	6811      	ldr	r1, [r2, #0]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	430a      	orrs	r2, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800257c:	e03c      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800257e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002588:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d108      	bne.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d123      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80025cc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d112      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80025d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025da:	f023 030f 	bic.w	r3, r3, #15
 80025de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025e0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e2:	e009      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80025f6:	e000      	b.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025f8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002606:	4618      	mov	r0, r3
 8002608:	3764      	adds	r7, #100	; 0x64
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	50000100 	.word	0x50000100
 8002618:	50000300 	.word	0x50000300

0800261c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d108      	bne.n	8002648 <ADC_Enable+0x2c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <ADC_Enable+0x2c>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <ADC_Enable+0x2e>
 8002648:	2300      	movs	r3, #0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d143      	bne.n	80026d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <ADC_Enable+0xc4>)
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00d      	beq.n	8002678 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0210 	orr.w	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e02f      	b.n	80026d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002688:	f7ff f8dc 	bl	8001844 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800268e:	e01b      	b.n	80026c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002690:	f7ff f8d8 	bl	8001844 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d914      	bls.n	80026c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d00d      	beq.n	80026c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1dc      	bne.n	8002690 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	8000003f 	.word	0x8000003f

080026e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <ADC_Disable+0x2c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <ADC_Disable+0x2c>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <ADC_Disable+0x2e>
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d047      	beq.n	80027a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030d 	and.w	r3, r3, #13
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10f      	bne.n	8002744 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0202 	orr.w	r2, r2, #2
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2203      	movs	r2, #3
 800273a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800273c:	f7ff f882 	bl	8001844 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002742:	e029      	b.n	8002798 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0210 	orr.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e023      	b.n	80027a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002760:	f7ff f870 	bl	8001844 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d914      	bls.n	8002798 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10d      	bne.n	8002798 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0210 	orr.w	r2, r3, #16
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d0dc      	beq.n	8002760 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 809b 	beq.w	800290c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027e4:	d12a      	bne.n	800283c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d126      	bne.n	800283c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d122      	bne.n	800283c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80027f6:	230c      	movs	r3, #12
 80027f8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80027fa:	e014      	b.n	8002826 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4a46      	ldr	r2, [pc, #280]	; (8002918 <ADC_ConversionStop+0x168>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d90d      	bls.n	8002820 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f043 0210 	orr.w	r2, r3, #16
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e076      	b.n	800290e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	3301      	adds	r3, #1
 8002824:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d1e3      	bne.n	80027fc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b60      	cmp	r3, #96	; 0x60
 8002840:	d015      	beq.n	800286e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d10e      	bne.n	800286e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0210 	orr.w	r2, r2, #16
 800286c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d015      	beq.n	80028a0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d10e      	bne.n	80028a0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b60      	cmp	r3, #96	; 0x60
 80028a4:	d005      	beq.n	80028b2 <ADC_ConversionStop+0x102>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b6c      	cmp	r3, #108	; 0x6c
 80028aa:	d105      	bne.n	80028b8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028ac:	230c      	movs	r3, #12
 80028ae:	617b      	str	r3, [r7, #20]
        break;
 80028b0:	e005      	b.n	80028be <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028b2:	2308      	movs	r3, #8
 80028b4:	617b      	str	r3, [r7, #20]
        break;
 80028b6:	e002      	b.n	80028be <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028b8:	2304      	movs	r3, #4
 80028ba:	617b      	str	r3, [r7, #20]
        break;
 80028bc:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028be:	f7fe ffc1 	bl	8001844 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80028c4:	e01b      	b.n	80028fe <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028c6:	f7fe ffbd 	bl	8001844 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b0b      	cmp	r3, #11
 80028d2:	d914      	bls.n	80028fe <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1dc      	bne.n	80028c6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	000993ff 	.word	0x000993ff

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff3e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff31 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2204      	movs	r2, #4
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e020      	b.n	8002ba4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 020e 	bic.w	r2, r2, #14
 8002b70:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d005      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e027      	b.n	8002c22 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    } 
  }
  return status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	e14e      	b.n	8002eda <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8140 	beq.w	8002ed4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d005      	beq.n	8002c6c <HAL_GPIO_Init+0x40>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d130      	bne.n	8002cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 0201 	and.w	r2, r3, #1
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d017      	beq.n	8002d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d123      	bne.n	8002d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	6939      	ldr	r1, [r7, #16]
 8002d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0203 	and.w	r2, r3, #3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 809a 	beq.w	8002ed4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da0:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <HAL_GPIO_Init+0x2cc>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x2cc>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b52      	ldr	r3, [pc, #328]	; (8002ef8 <HAL_GPIO_Init+0x2cc>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_GPIO_Init+0x2d0>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de2:	d013      	beq.n	8002e0c <HAL_GPIO_Init+0x1e0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <HAL_GPIO_Init+0x2d4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00d      	beq.n	8002e08 <HAL_GPIO_Init+0x1dc>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <HAL_GPIO_Init+0x2d8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x1d8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a44      	ldr	r2, [pc, #272]	; (8002f08 <HAL_GPIO_Init+0x2dc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_GPIO_Init+0x1d4>
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x1e2>
 8002e00:	2305      	movs	r3, #5
 8002e02:	e004      	b.n	8002e0e <HAL_GPIO_Init+0x1e2>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x1e2>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_GPIO_Init+0x1e2>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e1e:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_GPIO_Init+0x2d0>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e50:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ece:	4a0f      	ldr	r2, [pc, #60]	; (8002f0c <HAL_GPIO_Init+0x2e0>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f aea9 	bne.w	8002c3c <HAL_GPIO_Init+0x10>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e001      	b.n	8002f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f001 b823 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 817d 	beq.w	8003276 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f7c:	4bbc      	ldr	r3, [pc, #752]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f88:	4bb9      	ldr	r3, [pc, #740]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d15c      	bne.n	800304e <HAL_RCC_OscConfig+0x10e>
 8002f94:	4bb6      	ldr	r3, [pc, #728]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d155      	bne.n	800304e <HAL_RCC_OscConfig+0x10e>
 8002fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x94>
 8002fce:	4ba8      	ldr	r3, [pc, #672]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e015      	b.n	8003000 <HAL_RCC_OscConfig+0xc0>
 8002fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ff0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ffc:	4b9c      	ldr	r3, [pc, #624]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003004:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003008:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003014:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f002 021f 	and.w	r2, r2, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f202 	lsl.w	r2, r1, r2
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 811f 	beq.w	8003274 <HAL_RCC_OscConfig+0x334>
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 8116 	bne.w	8003274 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f000 bfaf 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x12e>
 8003060:	4b83      	ldr	r3, [pc, #524]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a82      	ldr	r2, [pc, #520]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	e036      	b.n	80030dc <HAL_RCC_OscConfig+0x19c>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x158>
 800307e:	4b7c      	ldr	r3, [pc, #496]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7b      	ldr	r2, [pc, #492]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b79      	ldr	r3, [pc, #484]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a78      	ldr	r2, [pc, #480]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e021      	b.n	80030dc <HAL_RCC_OscConfig+0x19c>
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x184>
 80030aa:	4b71      	ldr	r3, [pc, #452]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a70      	ldr	r2, [pc, #448]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6d      	ldr	r2, [pc, #436]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0x19c>
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a69      	ldr	r2, [pc, #420]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a66      	ldr	r2, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030dc:	4b64      	ldr	r3, [pc, #400]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	f023 020f 	bic.w	r2, r3, #15
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	495f      	ldr	r1, [pc, #380]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d059      	beq.n	80031ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7fe fb9d 	bl	8001844 <HAL_GetTick>
 800310a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fb98 	bl	8001844 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b64      	cmp	r3, #100	; 0x64
 800311e:	d902      	bls.n	8003126 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	f000 bf43 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
 8003126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800313a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_RCC_OscConfig+0x218>
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e015      	b.n	8003184 <HAL_RCC_OscConfig+0x244>
 8003158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800316c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003170:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003174:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003180:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003188:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800318c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003190:	fa92 f2a2 	rbit	r2, r2
 8003194:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003198:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f042 0220 	orr.w	r2, r2, #32
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f002 021f 	and.w	r2, r2, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ab      	beq.n	8003110 <HAL_RCC_OscConfig+0x1d0>
 80031b8:	e05d      	b.n	8003276 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fb43 	bl	8001844 <HAL_GetTick>
 80031be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fb3e 	bl	8001844 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d902      	bls.n	80031da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f000 bee9 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
 80031da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d102      	bne.n	800320c <HAL_RCC_OscConfig+0x2cc>
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	e015      	b.n	8003238 <HAL_RCC_OscConfig+0x2f8>
 800320c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003210:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003224:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003228:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_RCC_OscConfig+0x330>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800323c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003240:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003244:	fa92 f2a2 	rbit	r2, r2
 8003248:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800324c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003250:	fab2 f282 	clz	r2, r2
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	f042 0220 	orr.w	r2, r2, #32
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f002 021f 	and.w	r2, r2, #31
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f202 	lsl.w	r2, r1, r2
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ab      	bne.n	80031c4 <HAL_RCC_OscConfig+0x284>
 800326c:	e003      	b.n	8003276 <HAL_RCC_OscConfig+0x336>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 817d 	beq.w	8003586 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800328c:	4ba6      	ldr	r3, [pc, #664]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003298:	4ba3      	ldr	r3, [pc, #652]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d172      	bne.n	800338a <HAL_RCC_OscConfig+0x44a>
 80032a4:	4ba0      	ldr	r3, [pc, #640]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d16c      	bne.n	800338a <HAL_RCC_OscConfig+0x44a>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80032c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_OscConfig+0x3a0>
 80032da:	4b93      	ldr	r3, [pc, #588]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e013      	b.n	8003308 <HAL_RCC_OscConfig+0x3c8>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032f2:	2302      	movs	r3, #2
 80032f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003304:	4b88      	ldr	r3, [pc, #544]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2202      	movs	r2, #2
 800330a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800330e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003312:	fa92 f2a2 	rbit	r2, r2
 8003316:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800331a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCC_OscConfig+0x410>
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d002      	beq.n	8003350 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f000 be2e 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b75      	ldr	r3, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	21f8      	movs	r1, #248	; 0xf8
 8003366:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800336e:	fa91 f1a1 	rbit	r1, r1
 8003372:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003376:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800337a:	fab1 f181 	clz	r1, r1
 800337e:	b2c9      	uxtb	r1, r1
 8003380:	408b      	lsls	r3, r1
 8003382:	4969      	ldr	r1, [pc, #420]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003388:	e0fd      	b.n	8003586 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8088 	beq.w	80034ac <HAL_RCC_OscConfig+0x56c>
 800339c:	2301      	movs	r3, #1
 800339e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	461a      	mov	r2, r3
 80033c4:	2301      	movs	r3, #1
 80033c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe fa3c 	bl	8001844 <HAL_GetTick>
 80033cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fe fa37 	bl	8001844 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	f000 bde2 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0x4d8>
 8003412:	4b45      	ldr	r3, [pc, #276]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x500>
 8003418:	2302      	movs	r3, #2
 800341a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800342a:	2302      	movs	r3, #2
 800342c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003430:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2202      	movs	r2, #2
 8003442:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003446:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800344a:	fa92 f2a2 	rbit	r2, r2
 800344e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003452:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0af      	beq.n	80033d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	21f8      	movs	r1, #248	; 0xf8
 8003488:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003490:	fa91 f1a1 	rbit	r1, r1
 8003494:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003498:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800349c:	fab1 f181 	clz	r1, r1
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	408b      	lsls	r3, r1
 80034a4:	4920      	ldr	r1, [pc, #128]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
 80034aa:	e06c      	b.n	8003586 <HAL_RCC_OscConfig+0x646>
 80034ac:	2301      	movs	r3, #1
 80034ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	461a      	mov	r2, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe f9b4 	bl	8001844 <HAL_GetTick>
 80034dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe f9af 	bl	8001844 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	f000 bd5a 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800350a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d104      	bne.n	800352c <HAL_RCC_OscConfig+0x5ec>
 8003522:	4b01      	ldr	r3, [pc, #4]	; (8003528 <HAL_RCC_OscConfig+0x5e8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e015      	b.n	8003554 <HAL_RCC_OscConfig+0x614>
 8003528:	40021000 	.word	0x40021000
 800352c:	2302      	movs	r3, #2
 800352e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800353e:	2302      	movs	r3, #2
 8003540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003550:	4bc8      	ldr	r3, [pc, #800]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2202      	movs	r2, #2
 8003556:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800355a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800355e:	fa92 f2a2 	rbit	r2, r2
 8003562:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003566:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800356a:	fab2 f282 	clz	r2, r2
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f042 0220 	orr.w	r2, r2, #32
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	f002 021f 	and.w	r2, r2, #31
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f202 	lsl.w	r2, r1, r2
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ad      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8110 	beq.w	80037bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d079      	beq.n	80036a0 <HAL_RCC_OscConfig+0x760>
 80035ac:	2301      	movs	r3, #1
 80035ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4bab      	ldr	r3, [pc, #684]	; (8003878 <HAL_RCC_OscConfig+0x938>)
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	461a      	mov	r2, r3
 80035d2:	2301      	movs	r3, #1
 80035d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe f935 	bl	8001844 <HAL_GetTick>
 80035da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe f930 	bl	8001844 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f000 bcdb 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
 80035f6:	2302      	movs	r3, #2
 80035f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003610:	2202      	movs	r2, #2
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003618:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f2a3 	rbit	r2, r3
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800364e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003650:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 8003652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800365c:	2102      	movs	r1, #2
 800365e:	6019      	str	r1, [r3, #0]
 8003660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003664:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fa93 f1a3 	rbit	r1, r3
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003676:	6019      	str	r1, [r3, #0]
  return result;
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0a0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x6a0>
 800369e:	e08d      	b.n	80037bc <HAL_RCC_OscConfig+0x87c>
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036c2:	601a      	str	r2, [r3, #0]
  return result;
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b68      	ldr	r3, [pc, #416]	; (8003878 <HAL_RCC_OscConfig+0x938>)
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2300      	movs	r3, #0
 80036e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe f8af 	bl	8001844 <HAL_GetTick>
 80036e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe f8aa 	bl	8001844 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	f000 bc55 	b.w	8003fac <HAL_RCC_OscConfig+0x106c>
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800370a:	2202      	movs	r2, #2
 800370c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800372e:	2202      	movs	r2, #2
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003736:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fa93 f2a3 	rbit	r2, r3
 8003740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003752:	2202      	movs	r2, #2
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800376c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376e:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 8003770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800377a:	2102      	movs	r1, #2
 800377c:	6019      	str	r1, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f1a3 	rbit	r1, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003794:	6019      	str	r1, [r3, #0]
  return result;
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d197      	bne.n	80036ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 81a1 	beq.w	8003b14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d8:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a22      	ldr	r2, [pc, #136]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	61d3      	str	r3, [r2, #28]
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800380a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_RCC_OscConfig+0x93c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_RCC_OscConfig+0x93c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_RCC_OscConfig+0x93c>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fe f80b 	bl	8001844 <HAL_GetTick>
 800382e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	e009      	b.n	8003848 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fe f806 	bl	8001844 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e3b1      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_RCC_OscConfig+0x93c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ef      	beq.n	8003834 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10d      	bne.n	8003880 <HAL_RCC_OscConfig+0x940>
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a02      	ldr	r2, [pc, #8]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e03c      	b.n	80038ec <HAL_RCC_OscConfig+0x9ac>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	10908120 	.word	0x10908120
 800387c:	40007000 	.word	0x40007000
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0x96a>
 8003890:	4bc1      	ldr	r3, [pc, #772]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4ac0      	ldr	r2, [pc, #768]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6213      	str	r3, [r2, #32]
 800389c:	4bbe      	ldr	r3, [pc, #760]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4abd      	ldr	r2, [pc, #756]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038a2:	f023 0304 	bic.w	r3, r3, #4
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	e020      	b.n	80038ec <HAL_RCC_OscConfig+0x9ac>
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x994>
 80038ba:	4bb7      	ldr	r3, [pc, #732]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4ab6      	ldr	r2, [pc, #728]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
 80038c6:	4bb4      	ldr	r3, [pc, #720]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4ab3      	ldr	r2, [pc, #716]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6213      	str	r3, [r2, #32]
 80038d2:	e00b      	b.n	80038ec <HAL_RCC_OscConfig+0x9ac>
 80038d4:	4bb0      	ldr	r3, [pc, #704]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	4aaf      	ldr	r2, [pc, #700]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6213      	str	r3, [r2, #32]
 80038e0:	4bad      	ldr	r3, [pc, #692]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4aac      	ldr	r2, [pc, #688]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80038e6:	f023 0304 	bic.w	r3, r3, #4
 80038ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8081 	beq.w	8003a00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fe:	f7fd ffa1 	bl	8001844 <HAL_GetTick>
 8003902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fd ff9c 	bl	8001844 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e345      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003928:	2202      	movs	r2, #2
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800394c:	2202      	movs	r2, #2
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003966:	601a      	str	r2, [r3, #0]
  return result;
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003970:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d102      	bne.n	800398c <HAL_RCC_OscConfig+0xa4c>
 8003986:	4b84      	ldr	r3, [pc, #528]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	e013      	b.n	80039b4 <HAL_RCC_OscConfig+0xa74>
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003994:	2202      	movs	r2, #2
 8003996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039bc:	2102      	movs	r1, #2
 80039be:	6011      	str	r1, [r2, #0]
 80039c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	fa92 f1a2 	rbit	r1, r2
 80039ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039d6:	6011      	str	r1, [r2, #0]
  return result;
 80039d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	fab2 f282 	clz	r2, r2
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	f002 021f 	and.w	r2, r2, #31
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f202 	lsl.w	r2, r1, r2
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d084      	beq.n	8003908 <HAL_RCC_OscConfig+0x9c8>
 80039fe:	e07f      	b.n	8003b00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fd ff20 	bl	8001844 <HAL_GetTick>
 8003a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a08:	e00b      	b.n	8003a22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fd ff1b 	bl	8001844 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e2c4      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a4e:	2202      	movs	r2, #2
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	fa93 f2a3 	rbit	r2, r3
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a68:	601a      	str	r2, [r3, #0]
  return result;
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_OscConfig+0xb4e>
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	e013      	b.n	8003ab6 <HAL_RCC_OscConfig+0xb76>
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a96:	2202      	movs	r2, #2
 8003a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003abe:	2102      	movs	r1, #2
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	fa92 f1a2 	rbit	r1, r2
 8003ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ad8:	6011      	str	r1, [r2, #0]
  return result;
 8003ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ade:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f002 021f 	and.w	r2, r2, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d184      	bne.n	8003a0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b00:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8242 	beq.w	8003faa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_OscConfig+0xc58>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	f000 8213 	beq.w	8003f5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	f040 8162 	bne.w	8003e0a <HAL_RCC_OscConfig+0xeca>
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b58:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f2a3 	rbit	r2, r3
 8003b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b6a:	601a      	str	r2, [r3, #0]
  return result;
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fe5a 	bl	8001844 <HAL_GetTick>
 8003b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCC_OscConfig+0xc70>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fe52 	bl	8001844 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e1fd      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bd4:	601a      	str	r2, [r3, #0]
  return result;
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d102      	bne.n	8003bfa <HAL_RCC_OscConfig+0xcba>
 8003bf4:	4bb0      	ldr	r3, [pc, #704]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	e027      	b.n	8003c4a <HAL_RCC_OscConfig+0xd0a>
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	fa93 f2a3 	rbit	r2, r3
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	fa93 f2a3 	rbit	r2, r3
 8003c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	4b9c      	ldr	r3, [pc, #624]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c56:	6011      	str	r1, [r2, #0]
 8003c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	fa92 f1a2 	rbit	r1, r2
 8003c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c6e:	6011      	str	r1, [r2, #0]
  return result;
 8003c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0220 	orr.w	r2, r2, #32
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d182      	bne.n	8003b9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c96:	4b88      	ldr	r3, [pc, #544]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	497f      	ldr	r1, [pc, #508]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ce2:	601a      	str	r2, [r3, #0]
  return result;
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2301      	movs	r3, #1
 8003d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd fd9e 	bl	8001844 <HAL_GetTick>
 8003d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d0c:	e009      	b.n	8003d22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd fd99 	bl	8001844 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e144      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	fa93 f2a3 	rbit	r2, r3
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d46:	601a      	str	r2, [r3, #0]
  return result;
 8003d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe2c>
 8003d66:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	e027      	b.n	8003dbc <HAL_RCC_OscConfig+0xe7c>
 8003d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	fa93 f2a3 	rbit	r2, r3
 8003dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003dc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	fa92 f1a2 	rbit	r1, r2
 8003dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ddc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003de0:	6011      	str	r1, [r2, #0]
  return result;
 8003de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	fab2 f282 	clz	r2, r2
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	f042 0220 	orr.w	r2, r2, #32
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f002 021f 	and.w	r2, r2, #31
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d082      	beq.n	8003d0e <HAL_RCC_OscConfig+0xdce>
 8003e08:	e0cf      	b.n	8003faa <HAL_RCC_OscConfig+0x106a>
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fa93 f2a3 	rbit	r2, r3
 8003e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e2e:	601a      	str	r2, [r3, #0]
  return result;
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fd fcf8 	bl	8001844 <HAL_GetTick>
 8003e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e58:	e009      	b.n	8003e6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd fcf3 	bl	8001844 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e09e      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fa93 f2a3 	rbit	r2, r3
 8003e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e92:	601a      	str	r2, [r3, #0]
  return result;
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d104      	bne.n	8003ebc <HAL_RCC_OscConfig+0xf7c>
 8003eb2:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <HAL_RCC_OscConfig+0xf78>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e029      	b.n	8003f0c <HAL_RCC_OscConfig+0xfcc>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fa93 f2a3 	rbit	r2, r3
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	fa93 f2a3 	rbit	r2, r3
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0x1078>)
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f18:	6011      	str	r1, [r2, #0]
 8003f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fa92 f1a2 	rbit	r1, r2
 8003f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f30:	6011      	str	r1, [r2, #0]
  return result;
 8003f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fab2 f282 	clz	r2, r2
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f042 0220 	orr.w	r2, r2, #32
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f002 021f 	and.w	r2, r2, #31
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d180      	bne.n	8003e5a <HAL_RCC_OscConfig+0xf1a>
 8003f58:	e027      	b.n	8003faa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e01e      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_RCC_OscConfig+0x1078>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b09e      	sub	sp, #120	; 0x78
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e162      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b90      	ldr	r3, [pc, #576]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d910      	bls.n	8004004 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b8d      	ldr	r3, [pc, #564]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 0207 	bic.w	r2, r3, #7
 8003fea:	498b      	ldr	r1, [pc, #556]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b89      	ldr	r3, [pc, #548]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e14a      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004010:	4b82      	ldr	r3, [pc, #520]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	497f      	ldr	r1, [pc, #508]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80dc 	beq.w	80041e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d13c      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xf6>
 8004038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800403c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d102      	bne.n	8004062 <HAL_RCC_ClockConfig+0xa6>
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	e00f      	b.n	8004082 <HAL_RCC_ClockConfig+0xc6>
 8004062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004066:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	667b      	str	r3, [r7, #100]	; 0x64
 8004070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004074:	663b      	str	r3, [r7, #96]	; 0x60
 8004076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800407e:	4b67      	ldr	r3, [pc, #412]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004086:	65ba      	str	r2, [r7, #88]	; 0x58
 8004088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800408a:	fa92 f2a2 	rbit	r2, r2
 800408e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004092:	fab2 f282 	clz	r2, r2
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	f042 0220 	orr.w	r2, r2, #32
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f002 021f 	and.w	r2, r2, #31
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f202 	lsl.w	r2, r1, r2
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d17b      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0f3      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d13c      	bne.n	8004134 <HAL_RCC_ClockConfig+0x178>
 80040ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d102      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x128>
 80040de:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	e00f      	b.n	8004104 <HAL_RCC_ClockConfig+0x148>
 80040e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ec:	fa93 f3a3 	rbit	r3, r3
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
 80040f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40
 80040f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004100:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004108:	63ba      	str	r2, [r7, #56]	; 0x38
 800410a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800410c:	fa92 f2a2 	rbit	r2, r2
 8004110:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004114:	fab2 f282 	clz	r2, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	f042 0220 	orr.w	r2, r2, #32
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f002 021f 	and.w	r2, r2, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f202 	lsl.w	r2, r1, r2
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d13a      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0b2      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
 8004134:	2302      	movs	r3, #2
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_RCC_ClockConfig+0x1a0>
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	e00d      	b.n	8004178 <HAL_RCC_ClockConfig+0x1bc>
 800415c:	2302      	movs	r3, #2
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	2302      	movs	r3, #2
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	4b29      	ldr	r3, [pc, #164]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2202      	movs	r2, #2
 800417a:	61ba      	str	r2, [r7, #24]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	fa92 f2a2 	rbit	r2, r2
 8004182:	617a      	str	r2, [r7, #20]
  return result;
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	fab2 f282 	clz	r2, r2
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f042 0220 	orr.w	r2, r2, #32
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f002 021f 	and.w	r2, r2, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f202 	lsl.w	r2, r1, r2
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e079      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	491a      	ldr	r1, [pc, #104]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fd fb44 	bl	8001844 <HAL_GetTick>
 80041bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fd fb40 	bl	8001844 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e061      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCC_ClockConfig+0x260>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d214      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 0207 	bic.w	r2, r3, #7
 80041fe:	4906      	ldr	r1, [pc, #24]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <HAL_RCC_ClockConfig+0x25c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e040      	b.n	800429a <HAL_RCC_ClockConfig+0x2de>
 8004218:	40022000 	.word	0x40022000
 800421c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_ClockConfig+0x2e8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	491a      	ldr	r1, [pc, #104]	; (80042a4 <HAL_RCC_ClockConfig+0x2e8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_RCC_ClockConfig+0x2e8>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4912      	ldr	r1, [pc, #72]	; (80042a4 <HAL_RCC_ClockConfig+0x2e8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800425e:	f000 f829 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004262:	4601      	mov	r1, r0
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426c:	22f0      	movs	r2, #240	; 0xf0
 800426e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	fa92 f2a2 	rbit	r2, r2
 8004276:	60fa      	str	r2, [r7, #12]
  return result;
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	40d3      	lsrs	r3, r2
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	fa21 f303 	lsr.w	r3, r1, r3
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <HAL_RCC_ClockConfig+0x2f0>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fa92 	bl	80017bc <HAL_InitTick>
  
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3778      	adds	r7, #120	; 0x78
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	0800b578 	.word	0x0800b578
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000004 	.word	0x20000004

080042b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b08b      	sub	sp, #44	; 0x2c
 80042b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x30>
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x36>
 80042e2:	e03c      	b.n	800435e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042e4:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042e6:	623b      	str	r3, [r7, #32]
      break;
 80042e8:	e03c      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	fa92 f2a2 	rbit	r2, r2
 80042fc:	607a      	str	r2, [r7, #4]
  return result;
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	fab2 f282 	clz	r2, r2
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	40d3      	lsrs	r3, r2
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_RCC_GetSysClockFreq+0xc8>)
 800430a:	5cd3      	ldrb	r3, [r2, r3]
 800430c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	220f      	movs	r2, #15
 8004318:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	fa92 f2a2 	rbit	r2, r2
 8004320:	60fa      	str	r2, [r7, #12]
  return result;
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	fab2 f282 	clz	r2, r2
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	40d3      	lsrs	r3, r2
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_RCC_GetSysClockFreq+0xcc>)
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800433c:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_RCC_GetSysClockFreq+0xc4>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	fbb2 f2f3 	udiv	r2, r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	e004      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	623b      	str	r3, [r7, #32]
      break;
 800435c:	e002      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004360:	623b      	str	r3, [r7, #32]
      break;
 8004362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004364:	6a3b      	ldr	r3, [r7, #32]
}
 8004366:	4618      	mov	r0, r3
 8004368:	372c      	adds	r7, #44	; 0x2c
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
 8004378:	007a1200 	.word	0x007a1200
 800437c:	0800b590 	.word	0x0800b590
 8004380:	0800b5a0 	.word	0x0800b5a0
 8004384:	003d0900 	.word	0x003d0900

08004388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043a6:	f7ff ffef 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043aa:	4601      	mov	r1, r0
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	fa92 f2a2 	rbit	r2, r2
 80043c0:	603a      	str	r2, [r7, #0]
  return result;
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	fab2 f282 	clz	r2, r2
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	40d3      	lsrs	r3, r2
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000
 80043e0:	0800b588 	.word	0x0800b588

080043e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80043ea:	f7ff ffcd 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043ee:	4601      	mov	r1, r0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80043f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80043fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	fa92 f2a2 	rbit	r2, r2
 8004404:	603a      	str	r2, [r7, #0]
  return result;
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	40d3      	lsrs	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	0800b588 	.word	0x0800b588

08004428 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b092      	sub	sp, #72	; 0x48
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80cd 	beq.w	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444c:	4b86      	ldr	r3, [pc, #536]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10e      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b83      	ldr	r3, [pc, #524]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4a82      	ldr	r2, [pc, #520]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	61d3      	str	r3, [r2, #28]
 8004464:	4b80      	ldr	r3, [pc, #512]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b7d      	ldr	r3, [pc, #500]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b7a      	ldr	r3, [pc, #488]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a79      	ldr	r2, [pc, #484]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fd f9d9 	bl	8001844 <HAL_GetTick>
 8004492:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fd f9d5 	bl	8001844 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	; 0x64
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e0db      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b70      	ldr	r3, [pc, #448]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044b4:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d07d      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d076      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b5e      	ldr	r3, [pc, #376]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	2301      	movs	r3, #1
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800450e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	461a      	mov	r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004524:	4a50      	ldr	r2, [pc, #320]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004528:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d045      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd f986 	bl	8001844 <HAL_GetTick>
 8004538:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd f982 	bl	8001844 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e086      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004552:	2302      	movs	r3, #2
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	2302      	movs	r3, #2
 8004560:	623b      	str	r3, [r7, #32]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	61fb      	str	r3, [r7, #28]
  return result;
 800456a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f043 0302 	orr.w	r3, r3, #2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d102      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004580:	4b39      	ldr	r3, [pc, #228]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	e007      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004586:	2302      	movs	r3, #2
 8004588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2202      	movs	r2, #2
 8004598:	613a      	str	r2, [r7, #16]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	fa92 f2a2 	rbit	r2, r2
 80045a0:	60fa      	str	r2, [r7, #12]
  return result;
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	fab2 f282 	clz	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	f002 021f 	and.w	r2, r2, #31
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0bd      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045c0:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4926      	ldr	r1, [pc, #152]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b23      	ldr	r3, [pc, #140]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4a22      	ldr	r2, [pc, #136]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f023 0203 	bic.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	491a      	ldr	r1, [pc, #104]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004600:	4313      	orrs	r3, r2
 8004602:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004610:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	f023 0210 	bic.w	r2, r3, #16
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4912      	ldr	r1, [pc, #72]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461e:	4313      	orrs	r3, r2
 8004620:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	490b      	ldr	r1, [pc, #44]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800463c:	4313      	orrs	r3, r2
 800463e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	4903      	ldr	r1, [pc, #12]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800465a:	4313      	orrs	r3, r2
 800465c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3748      	adds	r7, #72	; 0x48
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	40007000 	.word	0x40007000
 8004670:	10908100 	.word	0x10908100

08004674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e040      	b.n	8004708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fec6 	bl	8001428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2224      	movs	r2, #36	; 0x24
 80046a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fbbc 	bl	8004e30 <UART_SetConfig>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e022      	b.n	8004708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fce6 	bl	800509c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fd6d 	bl	80051e0 <UART_CheckIdleState>
 8004706:	4603      	mov	r3, r0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004724:	2b20      	cmp	r3, #32
 8004726:	d178      	bne.n	800481a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_UART_Transmit+0x24>
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e071      	b.n	800481c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2221      	movs	r2, #33	; 0x21
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004746:	f7fd f87d 	bl	8001844 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d108      	bne.n	8004778 <HAL_UART_Transmit+0x68>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e003      	b.n	8004780 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004780:	e030      	b.n	80047e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2180      	movs	r1, #128	; 0x80
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fdcf 	bl	8005330 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e03c      	b.n	800481c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b4:	b292      	uxth	r2, r2
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	3302      	adds	r3, #2
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e008      	b.n	80047d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b292      	uxth	r2, r2
 80047ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3301      	adds	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1c8      	bne.n	8004782 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2140      	movs	r1, #64	; 0x40
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fd98 	bl	8005330 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e005      	b.n	800481c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e000      	b.n	800481c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b0ba      	sub	sp, #232	; 0xe8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800484a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800484e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004852:	4013      	ands	r3, r2
 8004854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d115      	bne.n	800488c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00f      	beq.n	800488c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 82ab 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
      }
      return;
 800488a:	e2a5      	b.n	8004dd8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800488c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8117 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048a6:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_UART_IRQHandler+0x298>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 810a 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d011      	beq.n	80048e0 <HAL_UART_IRQHandler+0xbc>
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	f043 0201 	orr.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d011      	beq.n	8004910 <HAL_UART_IRQHandler+0xec>
 80048ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2202      	movs	r2, #2
 80048fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004906:	f043 0204 	orr.w	r2, r3, #4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_UART_IRQHandler+0x11c>
 800491c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2204      	movs	r2, #4
 800492e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d017      	beq.n	800497c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2208      	movs	r2, #8
 800496a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800497c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <HAL_UART_IRQHandler+0x18a>
 8004988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800499c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8211 	beq.w	8004ddc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fcf9 	bl	80053fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d141      	bne.n	8004a9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1d9      	bne.n	8004a1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <HAL_UART_IRQHandler+0x29c>)
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f898 	bl	8002bb0 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d017      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e00f      	b.n	8004ab6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9b4 	bl	8004e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00b      	b.n	8004ab6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9b0 	bl	8004e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e007      	b.n	8004ab6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9ac 	bl	8004e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004ab4:	e192      	b.n	8004ddc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab6:	bf00      	nop
    return;
 8004ab8:	e190      	b.n	8004ddc <HAL_UART_IRQHandler+0x5b8>
 8004aba:	bf00      	nop
 8004abc:	04000120 	.word	0x04000120
 8004ac0:	080054c7 	.word	0x080054c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 814b 	bne.w	8004d64 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8144 	beq.w	8004d64 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 813d 	beq.w	8004d64 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	f040 80b5 	bne.w	8004c6c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8164 	beq.w	8004de0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b22:	429a      	cmp	r2, r3
 8004b24:	f080 815c 	bcs.w	8004de0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	f000 8086 	beq.w	8004c4a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1da      	bne.n	8004b3e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e1      	bne.n	8004b88 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3308      	adds	r3, #8
 8004be4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004be8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e3      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1a:	f023 0310 	bic.w	r3, r3, #16
 8004c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e4      	bne.n	8004c0a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd ff7a 	bl	8002b3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8d7 	bl	8004e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c6a:	e0b9      	b.n	8004de0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80ab 	beq.w	8004de4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004c8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a6 	beq.w	8004de4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cba:	647b      	str	r3, [r7, #68]	; 0x44
 8004cbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e4      	bne.n	8004c98 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cf2:	633a      	str	r2, [r7, #48]	; 0x30
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e3      	bne.n	8004cce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0310 	bic.w	r3, r3, #16
 8004d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e4      	bne.n	8004d1a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f85b 	bl	8004e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d62:	e03f      	b.n	8004de4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <HAL_UART_IRQHandler+0x56a>
 8004d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fbdd 	bl	8005546 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d8c:	e02d      	b.n	8004dea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01c      	beq.n	8004de8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
    }
    return;
 8004db6:	e017      	b.n	8004de8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <HAL_UART_IRQHandler+0x5c6>
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fb8e 	bl	80054f2 <UART_EndTransmit_IT>
    return;
 8004dd6:	e008      	b.n	8004dea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004dd8:	bf00      	nop
 8004dda:	e006      	b.n	8004dea <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_UART_IRQHandler+0x5c6>
    return;
 8004de8:	bf00      	nop
  }

}
 8004dea:	37e8      	adds	r7, #232	; 0xe8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b8a      	ldr	r3, [pc, #552]	; (8005084 <UART_SetConfig+0x254>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a78      	ldr	r2, [pc, #480]	; (8005088 <UART_SetConfig+0x258>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d120      	bne.n	8004eee <UART_SetConfig+0xbe>
 8004eac:	4b77      	ldr	r3, [pc, #476]	; (800508c <UART_SetConfig+0x25c>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d817      	bhi.n	8004ee8 <UART_SetConfig+0xb8>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x90>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ed1 	.word	0x08004ed1
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ee3 	.word	0x08004ee3
 8004ecc:	08004ed7 	.word	0x08004ed7
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e01d      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e01a      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004edc:	2304      	movs	r3, #4
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e017      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e014      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e011      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a67      	ldr	r2, [pc, #412]	; (8005090 <UART_SetConfig+0x260>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d102      	bne.n	8004efe <UART_SetConfig+0xce>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e009      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a64      	ldr	r2, [pc, #400]	; (8005094 <UART_SetConfig+0x264>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d102      	bne.n	8004f0e <UART_SetConfig+0xde>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e001      	b.n	8004f12 <UART_SetConfig+0xe2>
 8004f0e:	2310      	movs	r3, #16
 8004f10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1a:	d15a      	bne.n	8004fd2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004f1c:	7ffb      	ldrb	r3, [r7, #31]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d827      	bhi.n	8004f72 <UART_SetConfig+0x142>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0xf8>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f55 	.word	0x08004f55
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f63 	.word	0x08004f63
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f73 	.word	0x08004f73
 8004f48:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7ff fa28 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8004f50:	61b8      	str	r0, [r7, #24]
        break;
 8004f52:	e013      	b.n	8004f7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7ff fa46 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
 8004f58:	61b8      	str	r0, [r7, #24]
        break;
 8004f5a:	e00f      	b.n	8004f7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b4e      	ldr	r3, [pc, #312]	; (8005098 <UART_SetConfig+0x268>)
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e00c      	b.n	8004f7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7ff f9a7 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004f66:	61b8      	str	r0, [r7, #24]
        break;
 8004f68:	e008      	b.n	8004f7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	61bb      	str	r3, [r7, #24]
        break;
 8004f70:	e004      	b.n	8004f7c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	77bb      	strb	r3, [r7, #30]
        break;
 8004f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d074      	beq.n	800506c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d916      	bls.n	8004fcc <UART_SetConfig+0x19c>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa4:	d212      	bcs.n	8004fcc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f023 030f 	bic.w	r3, r3, #15
 8004fae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	89fa      	ldrh	r2, [r7, #14]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e04f      	b.n	800506c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77bb      	strb	r3, [r7, #30]
 8004fd0:	e04c      	b.n	800506c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d828      	bhi.n	800502a <UART_SetConfig+0x1fa>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x1b0>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7ff f9cc 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8005008:	61b8      	str	r0, [r7, #24]
        break;
 800500a:	e013      	b.n	8005034 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7ff f9ea 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
 8005010:	61b8      	str	r0, [r7, #24]
        break;
 8005012:	e00f      	b.n	8005034 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b20      	ldr	r3, [pc, #128]	; (8005098 <UART_SetConfig+0x268>)
 8005016:	61bb      	str	r3, [r7, #24]
        break;
 8005018:	e00c      	b.n	8005034 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7ff f94b 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800501e:	61b8      	str	r0, [r7, #24]
        break;
 8005020:	e008      	b.n	8005034 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	61bb      	str	r3, [r7, #24]
        break;
 8005028:	e004      	b.n	8005034 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	77bb      	strb	r3, [r7, #30]
        break;
 8005032:	bf00      	nop
    }

    if (pclk != 0U)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d018      	beq.n	800506c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	085a      	lsrs	r2, r3, #1
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b0f      	cmp	r3, #15
 8005052:	d909      	bls.n	8005068 <UART_SetConfig+0x238>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505a:	d205      	bcs.n	8005068 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	e001      	b.n	800506c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005078:	7fbb      	ldrb	r3, [r7, #30]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	efff69f3 	.word	0xefff69f3
 8005088:	40013800 	.word	0x40013800
 800508c:	40021000 	.word	0x40021000
 8005090:	40004400 	.word	0x40004400
 8005094:	40004800 	.word	0x40004800
 8005098:	007a1200 	.word	0x007a1200

0800509c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519a:	d10a      	bne.n	80051b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b098      	sub	sp, #96	; 0x60
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f0:	f7fc fb28 	bl	8001844 <HAL_GetTick>
 80051f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d12e      	bne.n	8005262 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520c:	2200      	movs	r2, #0
 800520e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f88c 	bl	8005330 <UART_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d021      	beq.n	8005262 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	653b      	str	r3, [r7, #80]	; 0x50
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800524a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e062      	b.n	8005328 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d149      	bne.n	8005304 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005278:	2200      	movs	r2, #0
 800527a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f856 	bl	8005330 <UART_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03c      	beq.n	8005304 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	623b      	str	r3, [r7, #32]
   return(result);
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800529e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30
 80052aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e6      	bne.n	800528a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3308      	adds	r3, #8
 80052c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052dc:	61fa      	str	r2, [r7, #28]
 80052de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	69b9      	ldr	r1, [r7, #24]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e5      	bne.n	80052bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e011      	b.n	8005328 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3758      	adds	r7, #88	; 0x58
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005340:	e049      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d045      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534a:	f7fc fa7b 	bl	8001844 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <UART_WaitOnFlagUntilTimeout+0x30>
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e048      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d031      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b08      	cmp	r3, #8
 800537e:	d110      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2208      	movs	r2, #8
 8005386:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f838 	bl	80053fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2208      	movs	r2, #8
 8005392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e029      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b0:	d111      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f81e 	bl	80053fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e00f      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d0a6      	beq.n	8005342 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053fe:	b480      	push	{r7}
 8005400:	b095      	sub	sp, #84	; 0x54
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800541a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	643b      	str	r3, [r7, #64]	; 0x40
 8005426:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800542a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	61fb      	str	r3, [r7, #28]
   return(result);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	2b01      	cmp	r3, #1
 8005472:	d118      	bne.n	80054a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	60bb      	str	r3, [r7, #8]
   return(result);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 0310 	bic.w	r3, r3, #16
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6979      	ldr	r1, [r7, #20]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	613b      	str	r3, [r7, #16]
   return(result);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054ba:	bf00      	nop
 80054bc:	3754      	adds	r7, #84	; 0x54
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fc8d 	bl	8004e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b088      	sub	sp, #32
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	60bb      	str	r3, [r7, #8]
   return(result);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6979      	ldr	r1, [r7, #20]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	613b      	str	r3, [r7, #16]
   return(result);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fc59 	bl	8004df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800553e:	bf00      	nop
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	0000      	movs	r0, r0
 800555c:	0000      	movs	r0, r0
	...

08005560 <cos>:
 8005560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005562:	ec53 2b10 	vmov	r2, r3, d0
 8005566:	4826      	ldr	r0, [pc, #152]	; (8005600 <cos+0xa0>)
 8005568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800556c:	4281      	cmp	r1, r0
 800556e:	dc06      	bgt.n	800557e <cos+0x1e>
 8005570:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80055f8 <cos+0x98>
 8005574:	b005      	add	sp, #20
 8005576:	f85d eb04 	ldr.w	lr, [sp], #4
 800557a:	f000 bb79 	b.w	8005c70 <__kernel_cos>
 800557e:	4821      	ldr	r0, [pc, #132]	; (8005604 <cos+0xa4>)
 8005580:	4281      	cmp	r1, r0
 8005582:	dd09      	ble.n	8005598 <cos+0x38>
 8005584:	ee10 0a10 	vmov	r0, s0
 8005588:	4619      	mov	r1, r3
 800558a:	f7fa fe7d 	bl	8000288 <__aeabi_dsub>
 800558e:	ec41 0b10 	vmov	d0, r0, r1
 8005592:	b005      	add	sp, #20
 8005594:	f85d fb04 	ldr.w	pc, [sp], #4
 8005598:	4668      	mov	r0, sp
 800559a:	f000 f95d 	bl	8005858 <__ieee754_rem_pio2>
 800559e:	f000 0003 	and.w	r0, r0, #3
 80055a2:	2801      	cmp	r0, #1
 80055a4:	d00b      	beq.n	80055be <cos+0x5e>
 80055a6:	2802      	cmp	r0, #2
 80055a8:	d016      	beq.n	80055d8 <cos+0x78>
 80055aa:	b9e0      	cbnz	r0, 80055e6 <cos+0x86>
 80055ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055b0:	ed9d 0b00 	vldr	d0, [sp]
 80055b4:	f000 fb5c 	bl	8005c70 <__kernel_cos>
 80055b8:	ec51 0b10 	vmov	r0, r1, d0
 80055bc:	e7e7      	b.n	800558e <cos+0x2e>
 80055be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055c2:	ed9d 0b00 	vldr	d0, [sp]
 80055c6:	f000 ff6b 	bl	80064a0 <__kernel_sin>
 80055ca:	ec53 2b10 	vmov	r2, r3, d0
 80055ce:	ee10 0a10 	vmov	r0, s0
 80055d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055d6:	e7da      	b.n	800558e <cos+0x2e>
 80055d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055dc:	ed9d 0b00 	vldr	d0, [sp]
 80055e0:	f000 fb46 	bl	8005c70 <__kernel_cos>
 80055e4:	e7f1      	b.n	80055ca <cos+0x6a>
 80055e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055ea:	ed9d 0b00 	vldr	d0, [sp]
 80055ee:	2001      	movs	r0, #1
 80055f0:	f000 ff56 	bl	80064a0 <__kernel_sin>
 80055f4:	e7e0      	b.n	80055b8 <cos+0x58>
 80055f6:	bf00      	nop
	...
 8005600:	3fe921fb 	.word	0x3fe921fb
 8005604:	7fefffff 	.word	0x7fefffff

08005608 <sin>:
 8005608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800560a:	ec53 2b10 	vmov	r2, r3, d0
 800560e:	4828      	ldr	r0, [pc, #160]	; (80056b0 <sin+0xa8>)
 8005610:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005614:	4281      	cmp	r1, r0
 8005616:	dc07      	bgt.n	8005628 <sin+0x20>
 8005618:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80056a8 <sin+0xa0>
 800561c:	2000      	movs	r0, #0
 800561e:	b005      	add	sp, #20
 8005620:	f85d eb04 	ldr.w	lr, [sp], #4
 8005624:	f000 bf3c 	b.w	80064a0 <__kernel_sin>
 8005628:	4822      	ldr	r0, [pc, #136]	; (80056b4 <sin+0xac>)
 800562a:	4281      	cmp	r1, r0
 800562c:	dd09      	ble.n	8005642 <sin+0x3a>
 800562e:	ee10 0a10 	vmov	r0, s0
 8005632:	4619      	mov	r1, r3
 8005634:	f7fa fe28 	bl	8000288 <__aeabi_dsub>
 8005638:	ec41 0b10 	vmov	d0, r0, r1
 800563c:	b005      	add	sp, #20
 800563e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005642:	4668      	mov	r0, sp
 8005644:	f000 f908 	bl	8005858 <__ieee754_rem_pio2>
 8005648:	f000 0003 	and.w	r0, r0, #3
 800564c:	2801      	cmp	r0, #1
 800564e:	d00c      	beq.n	800566a <sin+0x62>
 8005650:	2802      	cmp	r0, #2
 8005652:	d011      	beq.n	8005678 <sin+0x70>
 8005654:	b9f0      	cbnz	r0, 8005694 <sin+0x8c>
 8005656:	ed9d 1b02 	vldr	d1, [sp, #8]
 800565a:	ed9d 0b00 	vldr	d0, [sp]
 800565e:	2001      	movs	r0, #1
 8005660:	f000 ff1e 	bl	80064a0 <__kernel_sin>
 8005664:	ec51 0b10 	vmov	r0, r1, d0
 8005668:	e7e6      	b.n	8005638 <sin+0x30>
 800566a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800566e:	ed9d 0b00 	vldr	d0, [sp]
 8005672:	f000 fafd 	bl	8005c70 <__kernel_cos>
 8005676:	e7f5      	b.n	8005664 <sin+0x5c>
 8005678:	ed9d 1b02 	vldr	d1, [sp, #8]
 800567c:	ed9d 0b00 	vldr	d0, [sp]
 8005680:	2001      	movs	r0, #1
 8005682:	f000 ff0d 	bl	80064a0 <__kernel_sin>
 8005686:	ec53 2b10 	vmov	r2, r3, d0
 800568a:	ee10 0a10 	vmov	r0, s0
 800568e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005692:	e7d1      	b.n	8005638 <sin+0x30>
 8005694:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005698:	ed9d 0b00 	vldr	d0, [sp]
 800569c:	f000 fae8 	bl	8005c70 <__kernel_cos>
 80056a0:	e7f1      	b.n	8005686 <sin+0x7e>
 80056a2:	bf00      	nop
 80056a4:	f3af 8000 	nop.w
	...
 80056b0:	3fe921fb 	.word	0x3fe921fb
 80056b4:	7fefffff 	.word	0x7fefffff

080056b8 <atan2>:
 80056b8:	f000 b802 	b.w	80056c0 <__ieee754_atan2>
 80056bc:	0000      	movs	r0, r0
	...

080056c0 <__ieee754_atan2>:
 80056c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	ec57 6b11 	vmov	r6, r7, d1
 80056c8:	4273      	negs	r3, r6
 80056ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005850 <__ieee754_atan2+0x190>
 80056ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80056d2:	4333      	orrs	r3, r6
 80056d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80056d8:	4573      	cmp	r3, lr
 80056da:	ec51 0b10 	vmov	r0, r1, d0
 80056de:	ee11 8a10 	vmov	r8, s2
 80056e2:	d80a      	bhi.n	80056fa <__ieee754_atan2+0x3a>
 80056e4:	4244      	negs	r4, r0
 80056e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80056ea:	4304      	orrs	r4, r0
 80056ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80056f0:	4574      	cmp	r4, lr
 80056f2:	ee10 9a10 	vmov	r9, s0
 80056f6:	468c      	mov	ip, r1
 80056f8:	d907      	bls.n	800570a <__ieee754_atan2+0x4a>
 80056fa:	4632      	mov	r2, r6
 80056fc:	463b      	mov	r3, r7
 80056fe:	f7fa fdc5 	bl	800028c <__adddf3>
 8005702:	ec41 0b10 	vmov	d0, r0, r1
 8005706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800570e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005712:	4334      	orrs	r4, r6
 8005714:	d103      	bne.n	800571e <__ieee754_atan2+0x5e>
 8005716:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800571a:	f000 bf81 	b.w	8006620 <atan>
 800571e:	17bc      	asrs	r4, r7, #30
 8005720:	f004 0402 	and.w	r4, r4, #2
 8005724:	ea53 0909 	orrs.w	r9, r3, r9
 8005728:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800572c:	d107      	bne.n	800573e <__ieee754_atan2+0x7e>
 800572e:	2c02      	cmp	r4, #2
 8005730:	d060      	beq.n	80057f4 <__ieee754_atan2+0x134>
 8005732:	2c03      	cmp	r4, #3
 8005734:	d1e5      	bne.n	8005702 <__ieee754_atan2+0x42>
 8005736:	a142      	add	r1, pc, #264	; (adr r1, 8005840 <__ieee754_atan2+0x180>)
 8005738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800573c:	e7e1      	b.n	8005702 <__ieee754_atan2+0x42>
 800573e:	ea52 0808 	orrs.w	r8, r2, r8
 8005742:	d106      	bne.n	8005752 <__ieee754_atan2+0x92>
 8005744:	f1bc 0f00 	cmp.w	ip, #0
 8005748:	da5f      	bge.n	800580a <__ieee754_atan2+0x14a>
 800574a:	a13f      	add	r1, pc, #252	; (adr r1, 8005848 <__ieee754_atan2+0x188>)
 800574c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005750:	e7d7      	b.n	8005702 <__ieee754_atan2+0x42>
 8005752:	4572      	cmp	r2, lr
 8005754:	d10f      	bne.n	8005776 <__ieee754_atan2+0xb6>
 8005756:	4293      	cmp	r3, r2
 8005758:	f104 34ff 	add.w	r4, r4, #4294967295
 800575c:	d107      	bne.n	800576e <__ieee754_atan2+0xae>
 800575e:	2c02      	cmp	r4, #2
 8005760:	d84c      	bhi.n	80057fc <__ieee754_atan2+0x13c>
 8005762:	4b35      	ldr	r3, [pc, #212]	; (8005838 <__ieee754_atan2+0x178>)
 8005764:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005768:	e9d4 0100 	ldrd	r0, r1, [r4]
 800576c:	e7c9      	b.n	8005702 <__ieee754_atan2+0x42>
 800576e:	2c02      	cmp	r4, #2
 8005770:	d848      	bhi.n	8005804 <__ieee754_atan2+0x144>
 8005772:	4b32      	ldr	r3, [pc, #200]	; (800583c <__ieee754_atan2+0x17c>)
 8005774:	e7f6      	b.n	8005764 <__ieee754_atan2+0xa4>
 8005776:	4573      	cmp	r3, lr
 8005778:	d0e4      	beq.n	8005744 <__ieee754_atan2+0x84>
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005780:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005784:	da1e      	bge.n	80057c4 <__ieee754_atan2+0x104>
 8005786:	2f00      	cmp	r7, #0
 8005788:	da01      	bge.n	800578e <__ieee754_atan2+0xce>
 800578a:	323c      	adds	r2, #60	; 0x3c
 800578c:	db1e      	blt.n	80057cc <__ieee754_atan2+0x10c>
 800578e:	4632      	mov	r2, r6
 8005790:	463b      	mov	r3, r7
 8005792:	f7fb f85b 	bl	800084c <__aeabi_ddiv>
 8005796:	ec41 0b10 	vmov	d0, r0, r1
 800579a:	f001 f8e1 	bl	8006960 <fabs>
 800579e:	f000 ff3f 	bl	8006620 <atan>
 80057a2:	ec51 0b10 	vmov	r0, r1, d0
 80057a6:	2c01      	cmp	r4, #1
 80057a8:	d013      	beq.n	80057d2 <__ieee754_atan2+0x112>
 80057aa:	2c02      	cmp	r4, #2
 80057ac:	d015      	beq.n	80057da <__ieee754_atan2+0x11a>
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	d0a7      	beq.n	8005702 <__ieee754_atan2+0x42>
 80057b2:	a319      	add	r3, pc, #100	; (adr r3, 8005818 <__ieee754_atan2+0x158>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd66 	bl	8000288 <__aeabi_dsub>
 80057bc:	a318      	add	r3, pc, #96	; (adr r3, 8005820 <__ieee754_atan2+0x160>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	e014      	b.n	80057ee <__ieee754_atan2+0x12e>
 80057c4:	a118      	add	r1, pc, #96	; (adr r1, 8005828 <__ieee754_atan2+0x168>)
 80057c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ca:	e7ec      	b.n	80057a6 <__ieee754_atan2+0xe6>
 80057cc:	2000      	movs	r0, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	e7e9      	b.n	80057a6 <__ieee754_atan2+0xe6>
 80057d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057d6:	4619      	mov	r1, r3
 80057d8:	e793      	b.n	8005702 <__ieee754_atan2+0x42>
 80057da:	a30f      	add	r3, pc, #60	; (adr r3, 8005818 <__ieee754_atan2+0x158>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa fd52 	bl	8000288 <__aeabi_dsub>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	a10d      	add	r1, pc, #52	; (adr r1, 8005820 <__ieee754_atan2+0x160>)
 80057ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ee:	f7fa fd4b 	bl	8000288 <__aeabi_dsub>
 80057f2:	e786      	b.n	8005702 <__ieee754_atan2+0x42>
 80057f4:	a10a      	add	r1, pc, #40	; (adr r1, 8005820 <__ieee754_atan2+0x160>)
 80057f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057fa:	e782      	b.n	8005702 <__ieee754_atan2+0x42>
 80057fc:	a10c      	add	r1, pc, #48	; (adr r1, 8005830 <__ieee754_atan2+0x170>)
 80057fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005802:	e77e      	b.n	8005702 <__ieee754_atan2+0x42>
 8005804:	2000      	movs	r0, #0
 8005806:	2100      	movs	r1, #0
 8005808:	e77b      	b.n	8005702 <__ieee754_atan2+0x42>
 800580a:	a107      	add	r1, pc, #28	; (adr r1, 8005828 <__ieee754_atan2+0x168>)
 800580c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005810:	e777      	b.n	8005702 <__ieee754_atan2+0x42>
 8005812:	bf00      	nop
 8005814:	f3af 8000 	nop.w
 8005818:	33145c07 	.word	0x33145c07
 800581c:	3ca1a626 	.word	0x3ca1a626
 8005820:	54442d18 	.word	0x54442d18
 8005824:	400921fb 	.word	0x400921fb
 8005828:	54442d18 	.word	0x54442d18
 800582c:	3ff921fb 	.word	0x3ff921fb
 8005830:	54442d18 	.word	0x54442d18
 8005834:	3fe921fb 	.word	0x3fe921fb
 8005838:	0800b5b0 	.word	0x0800b5b0
 800583c:	0800b5c8 	.word	0x0800b5c8
 8005840:	54442d18 	.word	0x54442d18
 8005844:	c00921fb 	.word	0xc00921fb
 8005848:	54442d18 	.word	0x54442d18
 800584c:	bff921fb 	.word	0xbff921fb
 8005850:	7ff00000 	.word	0x7ff00000
 8005854:	00000000 	.word	0x00000000

08005858 <__ieee754_rem_pio2>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	ed2d 8b02 	vpush	{d8}
 8005860:	ec55 4b10 	vmov	r4, r5, d0
 8005864:	4bca      	ldr	r3, [pc, #808]	; (8005b90 <__ieee754_rem_pio2+0x338>)
 8005866:	b08b      	sub	sp, #44	; 0x2c
 8005868:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800586c:	4598      	cmp	r8, r3
 800586e:	4682      	mov	sl, r0
 8005870:	9502      	str	r5, [sp, #8]
 8005872:	dc08      	bgt.n	8005886 <__ieee754_rem_pio2+0x2e>
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	ed80 0b00 	vstr	d0, [r0]
 800587c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005880:	f04f 0b00 	mov.w	fp, #0
 8005884:	e028      	b.n	80058d8 <__ieee754_rem_pio2+0x80>
 8005886:	4bc3      	ldr	r3, [pc, #780]	; (8005b94 <__ieee754_rem_pio2+0x33c>)
 8005888:	4598      	cmp	r8, r3
 800588a:	dc78      	bgt.n	800597e <__ieee754_rem_pio2+0x126>
 800588c:	9b02      	ldr	r3, [sp, #8]
 800588e:	4ec2      	ldr	r6, [pc, #776]	; (8005b98 <__ieee754_rem_pio2+0x340>)
 8005890:	2b00      	cmp	r3, #0
 8005892:	ee10 0a10 	vmov	r0, s0
 8005896:	a3b0      	add	r3, pc, #704	; (adr r3, 8005b58 <__ieee754_rem_pio2+0x300>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	4629      	mov	r1, r5
 800589e:	dd39      	ble.n	8005914 <__ieee754_rem_pio2+0xbc>
 80058a0:	f7fa fcf2 	bl	8000288 <__aeabi_dsub>
 80058a4:	45b0      	cmp	r8, r6
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	d01b      	beq.n	80058e4 <__ieee754_rem_pio2+0x8c>
 80058ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8005b60 <__ieee754_rem_pio2+0x308>)
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f7fa fce9 	bl	8000288 <__aeabi_dsub>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	e9ca 2300 	strd	r2, r3, [sl]
 80058be:	4620      	mov	r0, r4
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7fa fce1 	bl	8000288 <__aeabi_dsub>
 80058c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005b60 <__ieee754_rem_pio2+0x308>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058d4:	f04f 0b01 	mov.w	fp, #1
 80058d8:	4658      	mov	r0, fp
 80058da:	b00b      	add	sp, #44	; 0x2c
 80058dc:	ecbd 8b02 	vpop	{d8}
 80058e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005b68 <__ieee754_rem_pio2+0x310>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fccd 	bl	8000288 <__aeabi_dsub>
 80058ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8005b70 <__ieee754_rem_pio2+0x318>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	4604      	mov	r4, r0
 80058f6:	460d      	mov	r5, r1
 80058f8:	f7fa fcc6 	bl	8000288 <__aeabi_dsub>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	e9ca 2300 	strd	r2, r3, [sl]
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fa fcbe 	bl	8000288 <__aeabi_dsub>
 800590c:	a398      	add	r3, pc, #608	; (adr r3, 8005b70 <__ieee754_rem_pio2+0x318>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	e7db      	b.n	80058cc <__ieee754_rem_pio2+0x74>
 8005914:	f7fa fcba 	bl	800028c <__adddf3>
 8005918:	45b0      	cmp	r8, r6
 800591a:	4604      	mov	r4, r0
 800591c:	460d      	mov	r5, r1
 800591e:	d016      	beq.n	800594e <__ieee754_rem_pio2+0xf6>
 8005920:	a38f      	add	r3, pc, #572	; (adr r3, 8005b60 <__ieee754_rem_pio2+0x308>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f7fa fcb1 	bl	800028c <__adddf3>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	e9ca 2300 	strd	r2, r3, [sl]
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fa fca7 	bl	8000288 <__aeabi_dsub>
 800593a:	a389      	add	r3, pc, #548	; (adr r3, 8005b60 <__ieee754_rem_pio2+0x308>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f7fa fca4 	bl	800028c <__adddf3>
 8005944:	f04f 3bff 	mov.w	fp, #4294967295
 8005948:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800594c:	e7c4      	b.n	80058d8 <__ieee754_rem_pio2+0x80>
 800594e:	a386      	add	r3, pc, #536	; (adr r3, 8005b68 <__ieee754_rem_pio2+0x310>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa fc9a 	bl	800028c <__adddf3>
 8005958:	a385      	add	r3, pc, #532	; (adr r3, 8005b70 <__ieee754_rem_pio2+0x318>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	f7fa fc93 	bl	800028c <__adddf3>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9ca 2300 	strd	r2, r3, [sl]
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	f7fa fc89 	bl	8000288 <__aeabi_dsub>
 8005976:	a37e      	add	r3, pc, #504	; (adr r3, 8005b70 <__ieee754_rem_pio2+0x318>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	e7e0      	b.n	8005940 <__ieee754_rem_pio2+0xe8>
 800597e:	4b87      	ldr	r3, [pc, #540]	; (8005b9c <__ieee754_rem_pio2+0x344>)
 8005980:	4598      	cmp	r8, r3
 8005982:	f300 80d9 	bgt.w	8005b38 <__ieee754_rem_pio2+0x2e0>
 8005986:	f000 ffeb 	bl	8006960 <fabs>
 800598a:	ec55 4b10 	vmov	r4, r5, d0
 800598e:	ee10 0a10 	vmov	r0, s0
 8005992:	a379      	add	r3, pc, #484	; (adr r3, 8005b78 <__ieee754_rem_pio2+0x320>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fe2d 	bl	80005f8 <__aeabi_dmul>
 800599e:	4b80      	ldr	r3, [pc, #512]	; (8005ba0 <__ieee754_rem_pio2+0x348>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	f7fa fc73 	bl	800028c <__adddf3>
 80059a6:	f7fb f8d7 	bl	8000b58 <__aeabi_d2iz>
 80059aa:	4683      	mov	fp, r0
 80059ac:	f7fa fdba 	bl	8000524 <__aeabi_i2d>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	ec43 2b18 	vmov	d8, r2, r3
 80059b8:	a367      	add	r3, pc, #412	; (adr r3, 8005b58 <__ieee754_rem_pio2+0x300>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fe1b 	bl	80005f8 <__aeabi_dmul>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa fc5d 	bl	8000288 <__aeabi_dsub>
 80059ce:	a364      	add	r3, pc, #400	; (adr r3, 8005b60 <__ieee754_rem_pio2+0x308>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	ec51 0b18 	vmov	r0, r1, d8
 80059dc:	f7fa fe0c 	bl	80005f8 <__aeabi_dmul>
 80059e0:	f1bb 0f1f 	cmp.w	fp, #31
 80059e4:	4604      	mov	r4, r0
 80059e6:	460d      	mov	r5, r1
 80059e8:	dc0d      	bgt.n	8005a06 <__ieee754_rem_pio2+0x1ae>
 80059ea:	4b6e      	ldr	r3, [pc, #440]	; (8005ba4 <__ieee754_rem_pio2+0x34c>)
 80059ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	4543      	cmp	r3, r8
 80059f6:	d006      	beq.n	8005a06 <__ieee754_rem_pio2+0x1ae>
 80059f8:	4622      	mov	r2, r4
 80059fa:	462b      	mov	r3, r5
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fa fc42 	bl	8000288 <__aeabi_dsub>
 8005a04:	e00f      	b.n	8005a26 <__ieee754_rem_pio2+0x1ce>
 8005a06:	462b      	mov	r3, r5
 8005a08:	4622      	mov	r2, r4
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fa fc3b 	bl	8000288 <__aeabi_dsub>
 8005a12:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a16:	9303      	str	r3, [sp, #12]
 8005a18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005a20:	f1b8 0f10 	cmp.w	r8, #16
 8005a24:	dc02      	bgt.n	8005a2c <__ieee754_rem_pio2+0x1d4>
 8005a26:	e9ca 0100 	strd	r0, r1, [sl]
 8005a2a:	e039      	b.n	8005aa0 <__ieee754_rem_pio2+0x248>
 8005a2c:	a34e      	add	r3, pc, #312	; (adr r3, 8005b68 <__ieee754_rem_pio2+0x310>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	ec51 0b18 	vmov	r0, r1, d8
 8005a36:	f7fa fddf 	bl	80005f8 <__aeabi_dmul>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fa fc1f 	bl	8000288 <__aeabi_dsub>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4680      	mov	r8, r0
 8005a50:	4689      	mov	r9, r1
 8005a52:	4630      	mov	r0, r6
 8005a54:	4639      	mov	r1, r7
 8005a56:	f7fa fc17 	bl	8000288 <__aeabi_dsub>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	f7fa fc13 	bl	8000288 <__aeabi_dsub>
 8005a62:	a343      	add	r3, pc, #268	; (adr r3, 8005b70 <__ieee754_rem_pio2+0x318>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	ec51 0b18 	vmov	r0, r1, d8
 8005a70:	f7fa fdc2 	bl	80005f8 <__aeabi_dmul>
 8005a74:	4622      	mov	r2, r4
 8005a76:	462b      	mov	r3, r5
 8005a78:	f7fa fc06 	bl	8000288 <__aeabi_dsub>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fa fbfe 	bl	8000288 <__aeabi_dsub>
 8005a8c:	9a03      	ldr	r2, [sp, #12]
 8005a8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b31      	cmp	r3, #49	; 0x31
 8005a96:	dc24      	bgt.n	8005ae2 <__ieee754_rem_pio2+0x28a>
 8005a98:	e9ca 0100 	strd	r0, r1, [sl]
 8005a9c:	4646      	mov	r6, r8
 8005a9e:	464f      	mov	r7, r9
 8005aa0:	e9da 8900 	ldrd	r8, r9, [sl]
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f7fa fbec 	bl	8000288 <__aeabi_dsub>
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	f7fa fbe8 	bl	8000288 <__aeabi_dsub>
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ac0:	f6bf af0a 	bge.w	80058d8 <__ieee754_rem_pio2+0x80>
 8005ac4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ac8:	f8ca 3004 	str.w	r3, [sl, #4]
 8005acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ad0:	f8ca 8000 	str.w	r8, [sl]
 8005ad4:	f8ca 0008 	str.w	r0, [sl, #8]
 8005ad8:	f8ca 300c 	str.w	r3, [sl, #12]
 8005adc:	f1cb 0b00 	rsb	fp, fp, #0
 8005ae0:	e6fa      	b.n	80058d8 <__ieee754_rem_pio2+0x80>
 8005ae2:	a327      	add	r3, pc, #156	; (adr r3, 8005b80 <__ieee754_rem_pio2+0x328>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	ec51 0b18 	vmov	r0, r1, d8
 8005aec:	f7fa fd84 	bl	80005f8 <__aeabi_dmul>
 8005af0:	4604      	mov	r4, r0
 8005af2:	460d      	mov	r5, r1
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	f7fa fbc4 	bl	8000288 <__aeabi_dsub>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4640      	mov	r0, r8
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	f7fa fbbc 	bl	8000288 <__aeabi_dsub>
 8005b10:	4622      	mov	r2, r4
 8005b12:	462b      	mov	r3, r5
 8005b14:	f7fa fbb8 	bl	8000288 <__aeabi_dsub>
 8005b18:	a31b      	add	r3, pc, #108	; (adr r3, 8005b88 <__ieee754_rem_pio2+0x330>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	4604      	mov	r4, r0
 8005b20:	460d      	mov	r5, r1
 8005b22:	ec51 0b18 	vmov	r0, r1, d8
 8005b26:	f7fa fd67 	bl	80005f8 <__aeabi_dmul>
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	f7fa fbab 	bl	8000288 <__aeabi_dsub>
 8005b32:	4604      	mov	r4, r0
 8005b34:	460d      	mov	r5, r1
 8005b36:	e75f      	b.n	80059f8 <__ieee754_rem_pio2+0x1a0>
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <__ieee754_rem_pio2+0x350>)
 8005b3a:	4598      	cmp	r8, r3
 8005b3c:	dd36      	ble.n	8005bac <__ieee754_rem_pio2+0x354>
 8005b3e:	ee10 2a10 	vmov	r2, s0
 8005b42:	462b      	mov	r3, r5
 8005b44:	4620      	mov	r0, r4
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7fa fb9e 	bl	8000288 <__aeabi_dsub>
 8005b4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b50:	e9ca 0100 	strd	r0, r1, [sl]
 8005b54:	e694      	b.n	8005880 <__ieee754_rem_pio2+0x28>
 8005b56:	bf00      	nop
 8005b58:	54400000 	.word	0x54400000
 8005b5c:	3ff921fb 	.word	0x3ff921fb
 8005b60:	1a626331 	.word	0x1a626331
 8005b64:	3dd0b461 	.word	0x3dd0b461
 8005b68:	1a600000 	.word	0x1a600000
 8005b6c:	3dd0b461 	.word	0x3dd0b461
 8005b70:	2e037073 	.word	0x2e037073
 8005b74:	3ba3198a 	.word	0x3ba3198a
 8005b78:	6dc9c883 	.word	0x6dc9c883
 8005b7c:	3fe45f30 	.word	0x3fe45f30
 8005b80:	2e000000 	.word	0x2e000000
 8005b84:	3ba3198a 	.word	0x3ba3198a
 8005b88:	252049c1 	.word	0x252049c1
 8005b8c:	397b839a 	.word	0x397b839a
 8005b90:	3fe921fb 	.word	0x3fe921fb
 8005b94:	4002d97b 	.word	0x4002d97b
 8005b98:	3ff921fb 	.word	0x3ff921fb
 8005b9c:	413921fb 	.word	0x413921fb
 8005ba0:	3fe00000 	.word	0x3fe00000
 8005ba4:	0800b5e0 	.word	0x0800b5e0
 8005ba8:	7fefffff 	.word	0x7fefffff
 8005bac:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005bb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005bb4:	ee10 0a10 	vmov	r0, s0
 8005bb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005bbc:	ee10 6a10 	vmov	r6, s0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	f7fa ffc9 	bl	8000b58 <__aeabi_d2iz>
 8005bc6:	f7fa fcad 	bl	8000524 <__aeabi_i2d>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bd6:	f7fa fb57 	bl	8000288 <__aeabi_dsub>
 8005bda:	4b23      	ldr	r3, [pc, #140]	; (8005c68 <__ieee754_rem_pio2+0x410>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f7fa fd0b 	bl	80005f8 <__aeabi_dmul>
 8005be2:	460f      	mov	r7, r1
 8005be4:	4606      	mov	r6, r0
 8005be6:	f7fa ffb7 	bl	8000b58 <__aeabi_d2iz>
 8005bea:	f7fa fc9b 	bl	8000524 <__aeabi_i2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bfa:	f7fa fb45 	bl	8000288 <__aeabi_dsub>
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <__ieee754_rem_pio2+0x410>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c0a:	ad04      	add	r5, sp, #16
 8005c0c:	f04f 0803 	mov.w	r8, #3
 8005c10:	46a9      	mov	r9, r5
 8005c12:	2600      	movs	r6, #0
 8005c14:	2700      	movs	r7, #0
 8005c16:	4632      	mov	r2, r6
 8005c18:	463b      	mov	r3, r7
 8005c1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005c1e:	46c3      	mov	fp, r8
 8005c20:	3d08      	subs	r5, #8
 8005c22:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c26:	f7fa ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1f3      	bne.n	8005c16 <__ieee754_rem_pio2+0x3be>
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <__ieee754_rem_pio2+0x414>)
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	2302      	movs	r3, #2
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4622      	mov	r2, r4
 8005c38:	465b      	mov	r3, fp
 8005c3a:	4651      	mov	r1, sl
 8005c3c:	4648      	mov	r0, r9
 8005c3e:	f000 f8df 	bl	8005e00 <__kernel_rem_pio2>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	4683      	mov	fp, r0
 8005c48:	f6bf ae46 	bge.w	80058d8 <__ieee754_rem_pio2+0x80>
 8005c4c:	e9da 2100 	ldrd	r2, r1, [sl]
 8005c50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c54:	e9ca 2300 	strd	r2, r3, [sl]
 8005c58:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005c5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c60:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005c64:	e73a      	b.n	8005adc <__ieee754_rem_pio2+0x284>
 8005c66:	bf00      	nop
 8005c68:	41700000 	.word	0x41700000
 8005c6c:	0800b660 	.word	0x0800b660

08005c70 <__kernel_cos>:
 8005c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	ec57 6b10 	vmov	r6, r7, d0
 8005c78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005c7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005c80:	ed8d 1b00 	vstr	d1, [sp]
 8005c84:	da07      	bge.n	8005c96 <__kernel_cos+0x26>
 8005c86:	ee10 0a10 	vmov	r0, s0
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f7fa ff64 	bl	8000b58 <__aeabi_d2iz>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	f000 8088 	beq.w	8005da6 <__kernel_cos+0x136>
 8005c96:	4632      	mov	r2, r6
 8005c98:	463b      	mov	r3, r7
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa fcab 	bl	80005f8 <__aeabi_dmul>
 8005ca2:	4b51      	ldr	r3, [pc, #324]	; (8005de8 <__kernel_cos+0x178>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	f7fa fca5 	bl	80005f8 <__aeabi_dmul>
 8005cae:	a340      	add	r3, pc, #256	; (adr r3, 8005db0 <__kernel_cos+0x140>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	468b      	mov	fp, r1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa fc9c 	bl	80005f8 <__aeabi_dmul>
 8005cc0:	a33d      	add	r3, pc, #244	; (adr r3, 8005db8 <__kernel_cos+0x148>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f7fa fae1 	bl	800028c <__adddf3>
 8005cca:	4622      	mov	r2, r4
 8005ccc:	462b      	mov	r3, r5
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8005dc0 <__kernel_cos+0x150>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa fad6 	bl	8000288 <__aeabi_dsub>
 8005cdc:	4622      	mov	r2, r4
 8005cde:	462b      	mov	r3, r5
 8005ce0:	f7fa fc8a 	bl	80005f8 <__aeabi_dmul>
 8005ce4:	a338      	add	r3, pc, #224	; (adr r3, 8005dc8 <__kernel_cos+0x158>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	f7fa facf 	bl	800028c <__adddf3>
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	f7fa fc81 	bl	80005f8 <__aeabi_dmul>
 8005cf6:	a336      	add	r3, pc, #216	; (adr r3, 8005dd0 <__kernel_cos+0x160>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f7fa fac4 	bl	8000288 <__aeabi_dsub>
 8005d00:	4622      	mov	r2, r4
 8005d02:	462b      	mov	r3, r5
 8005d04:	f7fa fc78 	bl	80005f8 <__aeabi_dmul>
 8005d08:	a333      	add	r3, pc, #204	; (adr r3, 8005dd8 <__kernel_cos+0x168>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fabd 	bl	800028c <__adddf3>
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	f7fa fc6f 	bl	80005f8 <__aeabi_dmul>
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	f7fa fc6b 	bl	80005f8 <__aeabi_dmul>
 8005d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d26:	4604      	mov	r4, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	f7fa fc63 	bl	80005f8 <__aeabi_dmul>
 8005d32:	460b      	mov	r3, r1
 8005d34:	4602      	mov	r2, r0
 8005d36:	4629      	mov	r1, r5
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f7fa faa5 	bl	8000288 <__aeabi_dsub>
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <__kernel_cos+0x17c>)
 8005d40:	4598      	cmp	r8, r3
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	dc10      	bgt.n	8005d6a <__kernel_cos+0xfa>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	f7fa fa9a 	bl	8000288 <__aeabi_dsub>
 8005d54:	460b      	mov	r3, r1
 8005d56:	4926      	ldr	r1, [pc, #152]	; (8005df0 <__kernel_cos+0x180>)
 8005d58:	4602      	mov	r2, r0
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7fa fa94 	bl	8000288 <__aeabi_dsub>
 8005d60:	ec41 0b10 	vmov	d0, r0, r1
 8005d64:	b003      	add	sp, #12
 8005d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6a:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <__kernel_cos+0x184>)
 8005d6c:	4920      	ldr	r1, [pc, #128]	; (8005df0 <__kernel_cos+0x180>)
 8005d6e:	4598      	cmp	r8, r3
 8005d70:	bfcc      	ite	gt
 8005d72:	4d21      	ldrgt	r5, [pc, #132]	; (8005df8 <__kernel_cos+0x188>)
 8005d74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005d78:	2400      	movs	r4, #0
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f7fa fa82 	bl	8000288 <__aeabi_dsub>
 8005d84:	4622      	mov	r2, r4
 8005d86:	4680      	mov	r8, r0
 8005d88:	4689      	mov	r9, r1
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	4659      	mov	r1, fp
 8005d90:	f7fa fa7a 	bl	8000288 <__aeabi_dsub>
 8005d94:	4632      	mov	r2, r6
 8005d96:	463b      	mov	r3, r7
 8005d98:	f7fa fa76 	bl	8000288 <__aeabi_dsub>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4640      	mov	r0, r8
 8005da2:	4649      	mov	r1, r9
 8005da4:	e7da      	b.n	8005d5c <__kernel_cos+0xec>
 8005da6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005de0 <__kernel_cos+0x170>
 8005daa:	e7db      	b.n	8005d64 <__kernel_cos+0xf4>
 8005dac:	f3af 8000 	nop.w
 8005db0:	be8838d4 	.word	0xbe8838d4
 8005db4:	bda8fae9 	.word	0xbda8fae9
 8005db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005dbc:	3e21ee9e 	.word	0x3e21ee9e
 8005dc0:	809c52ad 	.word	0x809c52ad
 8005dc4:	3e927e4f 	.word	0x3e927e4f
 8005dc8:	19cb1590 	.word	0x19cb1590
 8005dcc:	3efa01a0 	.word	0x3efa01a0
 8005dd0:	16c15177 	.word	0x16c15177
 8005dd4:	3f56c16c 	.word	0x3f56c16c
 8005dd8:	5555554c 	.word	0x5555554c
 8005ddc:	3fa55555 	.word	0x3fa55555
 8005de0:	00000000 	.word	0x00000000
 8005de4:	3ff00000 	.word	0x3ff00000
 8005de8:	3fe00000 	.word	0x3fe00000
 8005dec:	3fd33332 	.word	0x3fd33332
 8005df0:	3ff00000 	.word	0x3ff00000
 8005df4:	3fe90000 	.word	0x3fe90000
 8005df8:	3fd20000 	.word	0x3fd20000
 8005dfc:	00000000 	.word	0x00000000

08005e00 <__kernel_rem_pio2>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	ed2d 8b02 	vpush	{d8}
 8005e08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005e0c:	f112 0f14 	cmn.w	r2, #20
 8005e10:	9308      	str	r3, [sp, #32]
 8005e12:	9101      	str	r1, [sp, #4]
 8005e14:	4bc4      	ldr	r3, [pc, #784]	; (8006128 <__kernel_rem_pio2+0x328>)
 8005e16:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005e18:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e1e:	9302      	str	r3, [sp, #8]
 8005e20:	9b08      	ldr	r3, [sp, #32]
 8005e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e26:	bfa8      	it	ge
 8005e28:	1ed4      	subge	r4, r2, #3
 8005e2a:	9306      	str	r3, [sp, #24]
 8005e2c:	bfb2      	itee	lt
 8005e2e:	2400      	movlt	r4, #0
 8005e30:	2318      	movge	r3, #24
 8005e32:	fb94 f4f3 	sdivge	r4, r4, r3
 8005e36:	f06f 0317 	mvn.w	r3, #23
 8005e3a:	fb04 3303 	mla	r3, r4, r3, r3
 8005e3e:	eb03 0a02 	add.w	sl, r3, r2
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	9a06      	ldr	r2, [sp, #24]
 8005e46:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006118 <__kernel_rem_pio2+0x318>
 8005e4a:	eb03 0802 	add.w	r8, r3, r2
 8005e4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005e50:	1aa7      	subs	r7, r4, r2
 8005e52:	ae22      	add	r6, sp, #136	; 0x88
 8005e54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005e58:	2500      	movs	r5, #0
 8005e5a:	4545      	cmp	r5, r8
 8005e5c:	dd13      	ble.n	8005e86 <__kernel_rem_pio2+0x86>
 8005e5e:	9b08      	ldr	r3, [sp, #32]
 8005e60:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006118 <__kernel_rem_pio2+0x318>
 8005e64:	aa22      	add	r2, sp, #136	; 0x88
 8005e66:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005e6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005e6e:	f04f 0800 	mov.w	r8, #0
 8005e72:	9b02      	ldr	r3, [sp, #8]
 8005e74:	4598      	cmp	r8, r3
 8005e76:	dc2f      	bgt.n	8005ed8 <__kernel_rem_pio2+0xd8>
 8005e78:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005e7c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005e80:	462f      	mov	r7, r5
 8005e82:	2600      	movs	r6, #0
 8005e84:	e01b      	b.n	8005ebe <__kernel_rem_pio2+0xbe>
 8005e86:	42ef      	cmn	r7, r5
 8005e88:	d407      	bmi.n	8005e9a <__kernel_rem_pio2+0x9a>
 8005e8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005e8e:	f7fa fb49 	bl	8000524 <__aeabi_i2d>
 8005e92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005e96:	3501      	adds	r5, #1
 8005e98:	e7df      	b.n	8005e5a <__kernel_rem_pio2+0x5a>
 8005e9a:	ec51 0b18 	vmov	r0, r1, d8
 8005e9e:	e7f8      	b.n	8005e92 <__kernel_rem_pio2+0x92>
 8005ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005ea8:	f7fa fba6 	bl	80005f8 <__aeabi_dmul>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb4:	f7fa f9ea 	bl	800028c <__adddf3>
 8005eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ebc:	3601      	adds	r6, #1
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	429e      	cmp	r6, r3
 8005ec2:	f1a7 0708 	sub.w	r7, r7, #8
 8005ec6:	ddeb      	ble.n	8005ea0 <__kernel_rem_pio2+0xa0>
 8005ec8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ecc:	f108 0801 	add.w	r8, r8, #1
 8005ed0:	ecab 7b02 	vstmia	fp!, {d7}
 8005ed4:	3508      	adds	r5, #8
 8005ed6:	e7cc      	b.n	8005e72 <__kernel_rem_pio2+0x72>
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	aa0e      	add	r2, sp, #56	; 0x38
 8005edc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ee0:	930d      	str	r3, [sp, #52]	; 0x34
 8005ee2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005ee4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005ee8:	9c02      	ldr	r4, [sp, #8]
 8005eea:	930c      	str	r3, [sp, #48]	; 0x30
 8005eec:	00e3      	lsls	r3, r4, #3
 8005eee:	930a      	str	r3, [sp, #40]	; 0x28
 8005ef0:	ab9a      	add	r3, sp, #616	; 0x268
 8005ef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005efa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005efe:	ab72      	add	r3, sp, #456	; 0x1c8
 8005f00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005f04:	46c3      	mov	fp, r8
 8005f06:	46a1      	mov	r9, r4
 8005f08:	f1b9 0f00 	cmp.w	r9, #0
 8005f0c:	f1a5 0508 	sub.w	r5, r5, #8
 8005f10:	dc77      	bgt.n	8006002 <__kernel_rem_pio2+0x202>
 8005f12:	ec47 6b10 	vmov	d0, r6, r7
 8005f16:	4650      	mov	r0, sl
 8005f18:	f000 fdae 	bl	8006a78 <scalbn>
 8005f1c:	ec57 6b10 	vmov	r6, r7, d0
 8005f20:	2200      	movs	r2, #0
 8005f22:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005f26:	ee10 0a10 	vmov	r0, s0
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa fb64 	bl	80005f8 <__aeabi_dmul>
 8005f30:	ec41 0b10 	vmov	d0, r0, r1
 8005f34:	f000 fd20 	bl	8006978 <floor>
 8005f38:	4b7c      	ldr	r3, [pc, #496]	; (800612c <__kernel_rem_pio2+0x32c>)
 8005f3a:	ec51 0b10 	vmov	r0, r1, d0
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f7fa fb5a 	bl	80005f8 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4630      	mov	r0, r6
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	f7fa f99c 	bl	8000288 <__aeabi_dsub>
 8005f50:	460f      	mov	r7, r1
 8005f52:	4606      	mov	r6, r0
 8005f54:	f7fa fe00 	bl	8000b58 <__aeabi_d2iz>
 8005f58:	9004      	str	r0, [sp, #16]
 8005f5a:	f7fa fae3 	bl	8000524 <__aeabi_i2d>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4630      	mov	r0, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	f7fa f98f 	bl	8000288 <__aeabi_dsub>
 8005f6a:	f1ba 0f00 	cmp.w	sl, #0
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	dd6d      	ble.n	8006050 <__kernel_rem_pio2+0x250>
 8005f74:	1e62      	subs	r2, r4, #1
 8005f76:	ab0e      	add	r3, sp, #56	; 0x38
 8005f78:	9d04      	ldr	r5, [sp, #16]
 8005f7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005f7e:	f1ca 0118 	rsb	r1, sl, #24
 8005f82:	fa40 f301 	asr.w	r3, r0, r1
 8005f86:	441d      	add	r5, r3
 8005f88:	408b      	lsls	r3, r1
 8005f8a:	1ac0      	subs	r0, r0, r3
 8005f8c:	ab0e      	add	r3, sp, #56	; 0x38
 8005f8e:	9504      	str	r5, [sp, #16]
 8005f90:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005f94:	f1ca 0317 	rsb	r3, sl, #23
 8005f98:	fa40 fb03 	asr.w	fp, r0, r3
 8005f9c:	f1bb 0f00 	cmp.w	fp, #0
 8005fa0:	dd65      	ble.n	800606e <__kernel_rem_pio2+0x26e>
 8005fa2:	9b04      	ldr	r3, [sp, #16]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	4615      	mov	r5, r2
 8005fac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005fb0:	4294      	cmp	r4, r2
 8005fb2:	f300 809c 	bgt.w	80060ee <__kernel_rem_pio2+0x2ee>
 8005fb6:	f1ba 0f00 	cmp.w	sl, #0
 8005fba:	dd07      	ble.n	8005fcc <__kernel_rem_pio2+0x1cc>
 8005fbc:	f1ba 0f01 	cmp.w	sl, #1
 8005fc0:	f000 80c0 	beq.w	8006144 <__kernel_rem_pio2+0x344>
 8005fc4:	f1ba 0f02 	cmp.w	sl, #2
 8005fc8:	f000 80c6 	beq.w	8006158 <__kernel_rem_pio2+0x358>
 8005fcc:	f1bb 0f02 	cmp.w	fp, #2
 8005fd0:	d14d      	bne.n	800606e <__kernel_rem_pio2+0x26e>
 8005fd2:	4632      	mov	r2, r6
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	4956      	ldr	r1, [pc, #344]	; (8006130 <__kernel_rem_pio2+0x330>)
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f7fa f955 	bl	8000288 <__aeabi_dsub>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	d043      	beq.n	800606e <__kernel_rem_pio2+0x26e>
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006120 <__kernel_rem_pio2+0x320>
 8005fec:	f000 fd44 	bl	8006a78 <scalbn>
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	ec53 2b10 	vmov	r2, r3, d0
 8005ff8:	f7fa f946 	bl	8000288 <__aeabi_dsub>
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	460f      	mov	r7, r1
 8006000:	e035      	b.n	800606e <__kernel_rem_pio2+0x26e>
 8006002:	4b4c      	ldr	r3, [pc, #304]	; (8006134 <__kernel_rem_pio2+0x334>)
 8006004:	2200      	movs	r2, #0
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	f7fa faf5 	bl	80005f8 <__aeabi_dmul>
 800600e:	f7fa fda3 	bl	8000b58 <__aeabi_d2iz>
 8006012:	f7fa fa87 	bl	8000524 <__aeabi_i2d>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	ec43 2b18 	vmov	d8, r2, r3
 800601e:	4b46      	ldr	r3, [pc, #280]	; (8006138 <__kernel_rem_pio2+0x338>)
 8006020:	2200      	movs	r2, #0
 8006022:	f7fa fae9 	bl	80005f8 <__aeabi_dmul>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa f92b 	bl	8000288 <__aeabi_dsub>
 8006032:	f7fa fd91 	bl	8000b58 <__aeabi_d2iz>
 8006036:	e9d5 2300 	ldrd	r2, r3, [r5]
 800603a:	f84b 0b04 	str.w	r0, [fp], #4
 800603e:	ec51 0b18 	vmov	r0, r1, d8
 8006042:	f7fa f923 	bl	800028c <__adddf3>
 8006046:	f109 39ff 	add.w	r9, r9, #4294967295
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	e75b      	b.n	8005f08 <__kernel_rem_pio2+0x108>
 8006050:	d106      	bne.n	8006060 <__kernel_rem_pio2+0x260>
 8006052:	1e63      	subs	r3, r4, #1
 8006054:	aa0e      	add	r2, sp, #56	; 0x38
 8006056:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800605a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800605e:	e79d      	b.n	8005f9c <__kernel_rem_pio2+0x19c>
 8006060:	4b36      	ldr	r3, [pc, #216]	; (800613c <__kernel_rem_pio2+0x33c>)
 8006062:	2200      	movs	r2, #0
 8006064:	f7fa fd4e 	bl	8000b04 <__aeabi_dcmpge>
 8006068:	2800      	cmp	r0, #0
 800606a:	d13d      	bne.n	80060e8 <__kernel_rem_pio2+0x2e8>
 800606c:	4683      	mov	fp, r0
 800606e:	2200      	movs	r2, #0
 8006070:	2300      	movs	r3, #0
 8006072:	4630      	mov	r0, r6
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800607a:	2800      	cmp	r0, #0
 800607c:	f000 80c0 	beq.w	8006200 <__kernel_rem_pio2+0x400>
 8006080:	1e65      	subs	r5, r4, #1
 8006082:	462b      	mov	r3, r5
 8006084:	2200      	movs	r2, #0
 8006086:	9902      	ldr	r1, [sp, #8]
 8006088:	428b      	cmp	r3, r1
 800608a:	da6c      	bge.n	8006166 <__kernel_rem_pio2+0x366>
 800608c:	2a00      	cmp	r2, #0
 800608e:	f000 8089 	beq.w	80061a4 <__kernel_rem_pio2+0x3a4>
 8006092:	ab0e      	add	r3, sp, #56	; 0x38
 8006094:	f1aa 0a18 	sub.w	sl, sl, #24
 8006098:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80ad 	beq.w	80061fc <__kernel_rem_pio2+0x3fc>
 80060a2:	4650      	mov	r0, sl
 80060a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006120 <__kernel_rem_pio2+0x320>
 80060a8:	f000 fce6 	bl	8006a78 <scalbn>
 80060ac:	ab9a      	add	r3, sp, #616	; 0x268
 80060ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80060b2:	ec57 6b10 	vmov	r6, r7, d0
 80060b6:	00ec      	lsls	r4, r5, #3
 80060b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80060bc:	46aa      	mov	sl, r5
 80060be:	f1ba 0f00 	cmp.w	sl, #0
 80060c2:	f280 80d6 	bge.w	8006272 <__kernel_rem_pio2+0x472>
 80060c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006118 <__kernel_rem_pio2+0x318>
 80060ca:	462e      	mov	r6, r5
 80060cc:	2e00      	cmp	r6, #0
 80060ce:	f2c0 8104 	blt.w	80062da <__kernel_rem_pio2+0x4da>
 80060d2:	ab72      	add	r3, sp, #456	; 0x1c8
 80060d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80060d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006140 <__kernel_rem_pio2+0x340>
 80060dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80060e0:	f04f 0800 	mov.w	r8, #0
 80060e4:	1baf      	subs	r7, r5, r6
 80060e6:	e0ea      	b.n	80062be <__kernel_rem_pio2+0x4be>
 80060e8:	f04f 0b02 	mov.w	fp, #2
 80060ec:	e759      	b.n	8005fa2 <__kernel_rem_pio2+0x1a2>
 80060ee:	f8d8 3000 	ldr.w	r3, [r8]
 80060f2:	b955      	cbnz	r5, 800610a <__kernel_rem_pio2+0x30a>
 80060f4:	b123      	cbz	r3, 8006100 <__kernel_rem_pio2+0x300>
 80060f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80060fa:	f8c8 3000 	str.w	r3, [r8]
 80060fe:	2301      	movs	r3, #1
 8006100:	3201      	adds	r2, #1
 8006102:	f108 0804 	add.w	r8, r8, #4
 8006106:	461d      	mov	r5, r3
 8006108:	e752      	b.n	8005fb0 <__kernel_rem_pio2+0x1b0>
 800610a:	1acb      	subs	r3, r1, r3
 800610c:	f8c8 3000 	str.w	r3, [r8]
 8006110:	462b      	mov	r3, r5
 8006112:	e7f5      	b.n	8006100 <__kernel_rem_pio2+0x300>
 8006114:	f3af 8000 	nop.w
	...
 8006124:	3ff00000 	.word	0x3ff00000
 8006128:	0800b7a8 	.word	0x0800b7a8
 800612c:	40200000 	.word	0x40200000
 8006130:	3ff00000 	.word	0x3ff00000
 8006134:	3e700000 	.word	0x3e700000
 8006138:	41700000 	.word	0x41700000
 800613c:	3fe00000 	.word	0x3fe00000
 8006140:	0800b768 	.word	0x0800b768
 8006144:	1e62      	subs	r2, r4, #1
 8006146:	ab0e      	add	r3, sp, #56	; 0x38
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006150:	a90e      	add	r1, sp, #56	; 0x38
 8006152:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006156:	e739      	b.n	8005fcc <__kernel_rem_pio2+0x1cc>
 8006158:	1e62      	subs	r2, r4, #1
 800615a:	ab0e      	add	r3, sp, #56	; 0x38
 800615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006160:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006164:	e7f4      	b.n	8006150 <__kernel_rem_pio2+0x350>
 8006166:	a90e      	add	r1, sp, #56	; 0x38
 8006168:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800616c:	3b01      	subs	r3, #1
 800616e:	430a      	orrs	r2, r1
 8006170:	e789      	b.n	8006086 <__kernel_rem_pio2+0x286>
 8006172:	3301      	adds	r3, #1
 8006174:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006178:	2900      	cmp	r1, #0
 800617a:	d0fa      	beq.n	8006172 <__kernel_rem_pio2+0x372>
 800617c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006182:	446a      	add	r2, sp
 8006184:	3a98      	subs	r2, #152	; 0x98
 8006186:	920a      	str	r2, [sp, #40]	; 0x28
 8006188:	9a08      	ldr	r2, [sp, #32]
 800618a:	18e3      	adds	r3, r4, r3
 800618c:	18a5      	adds	r5, r4, r2
 800618e:	aa22      	add	r2, sp, #136	; 0x88
 8006190:	f104 0801 	add.w	r8, r4, #1
 8006194:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	9b04      	ldr	r3, [sp, #16]
 800619c:	4543      	cmp	r3, r8
 800619e:	da04      	bge.n	80061aa <__kernel_rem_pio2+0x3aa>
 80061a0:	461c      	mov	r4, r3
 80061a2:	e6a3      	b.n	8005eec <__kernel_rem_pio2+0xec>
 80061a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7e4      	b.n	8006174 <__kernel_rem_pio2+0x374>
 80061aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80061b0:	f7fa f9b8 	bl	8000524 <__aeabi_i2d>
 80061b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80061b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ba:	46ab      	mov	fp, r5
 80061bc:	461c      	mov	r4, r3
 80061be:	f04f 0900 	mov.w	r9, #0
 80061c2:	2600      	movs	r6, #0
 80061c4:	2700      	movs	r7, #0
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	4599      	cmp	r9, r3
 80061ca:	dd06      	ble.n	80061da <__kernel_rem_pio2+0x3da>
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 80061d2:	f108 0801 	add.w	r8, r8, #1
 80061d6:	930a      	str	r3, [sp, #40]	; 0x28
 80061d8:	e7df      	b.n	800619a <__kernel_rem_pio2+0x39a>
 80061da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80061de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80061e2:	f7fa fa09 	bl	80005f8 <__aeabi_dmul>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4630      	mov	r0, r6
 80061ec:	4639      	mov	r1, r7
 80061ee:	f7fa f84d 	bl	800028c <__adddf3>
 80061f2:	f109 0901 	add.w	r9, r9, #1
 80061f6:	4606      	mov	r6, r0
 80061f8:	460f      	mov	r7, r1
 80061fa:	e7e4      	b.n	80061c6 <__kernel_rem_pio2+0x3c6>
 80061fc:	3d01      	subs	r5, #1
 80061fe:	e748      	b.n	8006092 <__kernel_rem_pio2+0x292>
 8006200:	ec47 6b10 	vmov	d0, r6, r7
 8006204:	f1ca 0000 	rsb	r0, sl, #0
 8006208:	f000 fc36 	bl	8006a78 <scalbn>
 800620c:	ec57 6b10 	vmov	r6, r7, d0
 8006210:	4ba0      	ldr	r3, [pc, #640]	; (8006494 <__kernel_rem_pio2+0x694>)
 8006212:	ee10 0a10 	vmov	r0, s0
 8006216:	2200      	movs	r2, #0
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa fc73 	bl	8000b04 <__aeabi_dcmpge>
 800621e:	b1f8      	cbz	r0, 8006260 <__kernel_rem_pio2+0x460>
 8006220:	4b9d      	ldr	r3, [pc, #628]	; (8006498 <__kernel_rem_pio2+0x698>)
 8006222:	2200      	movs	r2, #0
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	f7fa fc94 	bl	8000b58 <__aeabi_d2iz>
 8006230:	4680      	mov	r8, r0
 8006232:	f7fa f977 	bl	8000524 <__aeabi_i2d>
 8006236:	4b97      	ldr	r3, [pc, #604]	; (8006494 <__kernel_rem_pio2+0x694>)
 8006238:	2200      	movs	r2, #0
 800623a:	f7fa f9dd 	bl	80005f8 <__aeabi_dmul>
 800623e:	460b      	mov	r3, r1
 8006240:	4602      	mov	r2, r0
 8006242:	4639      	mov	r1, r7
 8006244:	4630      	mov	r0, r6
 8006246:	f7fa f81f 	bl	8000288 <__aeabi_dsub>
 800624a:	f7fa fc85 	bl	8000b58 <__aeabi_d2iz>
 800624e:	1c65      	adds	r5, r4, #1
 8006250:	ab0e      	add	r3, sp, #56	; 0x38
 8006252:	f10a 0a18 	add.w	sl, sl, #24
 8006256:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800625a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800625e:	e720      	b.n	80060a2 <__kernel_rem_pio2+0x2a2>
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa fc78 	bl	8000b58 <__aeabi_d2iz>
 8006268:	ab0e      	add	r3, sp, #56	; 0x38
 800626a:	4625      	mov	r5, r4
 800626c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006270:	e717      	b.n	80060a2 <__kernel_rem_pio2+0x2a2>
 8006272:	ab0e      	add	r3, sp, #56	; 0x38
 8006274:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006278:	f7fa f954 	bl	8000524 <__aeabi_i2d>
 800627c:	4632      	mov	r2, r6
 800627e:	463b      	mov	r3, r7
 8006280:	f7fa f9ba 	bl	80005f8 <__aeabi_dmul>
 8006284:	4b84      	ldr	r3, [pc, #528]	; (8006498 <__kernel_rem_pio2+0x698>)
 8006286:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800628a:	2200      	movs	r2, #0
 800628c:	4630      	mov	r0, r6
 800628e:	4639      	mov	r1, r7
 8006290:	f7fa f9b2 	bl	80005f8 <__aeabi_dmul>
 8006294:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006298:	4606      	mov	r6, r0
 800629a:	460f      	mov	r7, r1
 800629c:	e70f      	b.n	80060be <__kernel_rem_pio2+0x2be>
 800629e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80062a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80062a6:	f7fa f9a7 	bl	80005f8 <__aeabi_dmul>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b2:	f7f9 ffeb 	bl	800028c <__adddf3>
 80062b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	9b02      	ldr	r3, [sp, #8]
 80062c0:	4598      	cmp	r8, r3
 80062c2:	dc01      	bgt.n	80062c8 <__kernel_rem_pio2+0x4c8>
 80062c4:	45b8      	cmp	r8, r7
 80062c6:	ddea      	ble.n	800629e <__kernel_rem_pio2+0x49e>
 80062c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80062cc:	ab4a      	add	r3, sp, #296	; 0x128
 80062ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80062d2:	ed87 7b00 	vstr	d7, [r7]
 80062d6:	3e01      	subs	r6, #1
 80062d8:	e6f8      	b.n	80060cc <__kernel_rem_pio2+0x2cc>
 80062da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80062dc:	2b02      	cmp	r3, #2
 80062de:	dc0b      	bgt.n	80062f8 <__kernel_rem_pio2+0x4f8>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc35      	bgt.n	8006350 <__kernel_rem_pio2+0x550>
 80062e4:	d059      	beq.n	800639a <__kernel_rem_pio2+0x59a>
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	f003 0007 	and.w	r0, r3, #7
 80062ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80062f0:	ecbd 8b02 	vpop	{d8}
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d1f3      	bne.n	80062e6 <__kernel_rem_pio2+0x4e6>
 80062fe:	ab4a      	add	r3, sp, #296	; 0x128
 8006300:	4423      	add	r3, r4
 8006302:	9306      	str	r3, [sp, #24]
 8006304:	461c      	mov	r4, r3
 8006306:	469a      	mov	sl, r3
 8006308:	9502      	str	r5, [sp, #8]
 800630a:	9b02      	ldr	r3, [sp, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f1aa 0a08 	sub.w	sl, sl, #8
 8006312:	dc6b      	bgt.n	80063ec <__kernel_rem_pio2+0x5ec>
 8006314:	46aa      	mov	sl, r5
 8006316:	f1ba 0f01 	cmp.w	sl, #1
 800631a:	f1a4 0408 	sub.w	r4, r4, #8
 800631e:	f300 8085 	bgt.w	800642c <__kernel_rem_pio2+0x62c>
 8006322:	9c06      	ldr	r4, [sp, #24]
 8006324:	2000      	movs	r0, #0
 8006326:	3408      	adds	r4, #8
 8006328:	2100      	movs	r1, #0
 800632a:	2d01      	cmp	r5, #1
 800632c:	f300 809d 	bgt.w	800646a <__kernel_rem_pio2+0x66a>
 8006330:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006334:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006338:	f1bb 0f00 	cmp.w	fp, #0
 800633c:	f040 809b 	bne.w	8006476 <__kernel_rem_pio2+0x676>
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	e9c3 5600 	strd	r5, r6, [r3]
 8006346:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800634a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800634e:	e7ca      	b.n	80062e6 <__kernel_rem_pio2+0x4e6>
 8006350:	3408      	adds	r4, #8
 8006352:	ab4a      	add	r3, sp, #296	; 0x128
 8006354:	441c      	add	r4, r3
 8006356:	462e      	mov	r6, r5
 8006358:	2000      	movs	r0, #0
 800635a:	2100      	movs	r1, #0
 800635c:	2e00      	cmp	r6, #0
 800635e:	da36      	bge.n	80063ce <__kernel_rem_pio2+0x5ce>
 8006360:	f1bb 0f00 	cmp.w	fp, #0
 8006364:	d039      	beq.n	80063da <__kernel_rem_pio2+0x5da>
 8006366:	4602      	mov	r2, r0
 8006368:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800636c:	9c01      	ldr	r4, [sp, #4]
 800636e:	e9c4 2300 	strd	r2, r3, [r4]
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800637a:	f7f9 ff85 	bl	8000288 <__aeabi_dsub>
 800637e:	ae4c      	add	r6, sp, #304	; 0x130
 8006380:	2401      	movs	r4, #1
 8006382:	42a5      	cmp	r5, r4
 8006384:	da2c      	bge.n	80063e0 <__kernel_rem_pio2+0x5e0>
 8006386:	f1bb 0f00 	cmp.w	fp, #0
 800638a:	d002      	beq.n	8006392 <__kernel_rem_pio2+0x592>
 800638c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006390:	4619      	mov	r1, r3
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006398:	e7a5      	b.n	80062e6 <__kernel_rem_pio2+0x4e6>
 800639a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800639e:	eb0d 0403 	add.w	r4, sp, r3
 80063a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80063a6:	2000      	movs	r0, #0
 80063a8:	2100      	movs	r1, #0
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	da09      	bge.n	80063c2 <__kernel_rem_pio2+0x5c2>
 80063ae:	f1bb 0f00 	cmp.w	fp, #0
 80063b2:	d002      	beq.n	80063ba <__kernel_rem_pio2+0x5ba>
 80063b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063b8:	4619      	mov	r1, r3
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	e9c3 0100 	strd	r0, r1, [r3]
 80063c0:	e791      	b.n	80062e6 <__kernel_rem_pio2+0x4e6>
 80063c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80063c6:	f7f9 ff61 	bl	800028c <__adddf3>
 80063ca:	3d01      	subs	r5, #1
 80063cc:	e7ed      	b.n	80063aa <__kernel_rem_pio2+0x5aa>
 80063ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80063d2:	f7f9 ff5b 	bl	800028c <__adddf3>
 80063d6:	3e01      	subs	r6, #1
 80063d8:	e7c0      	b.n	800635c <__kernel_rem_pio2+0x55c>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	e7c5      	b.n	800636c <__kernel_rem_pio2+0x56c>
 80063e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80063e4:	f7f9 ff52 	bl	800028c <__adddf3>
 80063e8:	3401      	adds	r4, #1
 80063ea:	e7ca      	b.n	8006382 <__kernel_rem_pio2+0x582>
 80063ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80063f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	4632      	mov	r2, r6
 80063fc:	463b      	mov	r3, r7
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7f9 ff43 	bl	800028c <__adddf3>
 8006406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7f9 ff39 	bl	8000288 <__aeabi_dsub>
 8006416:	4632      	mov	r2, r6
 8006418:	463b      	mov	r3, r7
 800641a:	f7f9 ff37 	bl	800028c <__adddf3>
 800641e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006422:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006426:	ed8a 7b00 	vstr	d7, [sl]
 800642a:	e76e      	b.n	800630a <__kernel_rem_pio2+0x50a>
 800642c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006430:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006434:	4640      	mov	r0, r8
 8006436:	4632      	mov	r2, r6
 8006438:	463b      	mov	r3, r7
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 ff26 	bl	800028c <__adddf3>
 8006440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7f9 ff1c 	bl	8000288 <__aeabi_dsub>
 8006450:	4632      	mov	r2, r6
 8006452:	463b      	mov	r3, r7
 8006454:	f7f9 ff1a 	bl	800028c <__adddf3>
 8006458:	ed9d 7b02 	vldr	d7, [sp, #8]
 800645c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006460:	ed84 7b00 	vstr	d7, [r4]
 8006464:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006468:	e755      	b.n	8006316 <__kernel_rem_pio2+0x516>
 800646a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800646e:	f7f9 ff0d 	bl	800028c <__adddf3>
 8006472:	3d01      	subs	r5, #1
 8006474:	e759      	b.n	800632a <__kernel_rem_pio2+0x52a>
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	9a01      	ldr	r2, [sp, #4]
 800647a:	601d      	str	r5, [r3, #0]
 800647c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006480:	605c      	str	r4, [r3, #4]
 8006482:	609f      	str	r7, [r3, #8]
 8006484:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006488:	60d3      	str	r3, [r2, #12]
 800648a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800648e:	6110      	str	r0, [r2, #16]
 8006490:	6153      	str	r3, [r2, #20]
 8006492:	e728      	b.n	80062e6 <__kernel_rem_pio2+0x4e6>
 8006494:	41700000 	.word	0x41700000
 8006498:	3e700000 	.word	0x3e700000
 800649c:	00000000 	.word	0x00000000

080064a0 <__kernel_sin>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	ed2d 8b04 	vpush	{d8-d9}
 80064a8:	eeb0 8a41 	vmov.f32	s16, s2
 80064ac:	eef0 8a61 	vmov.f32	s17, s3
 80064b0:	ec55 4b10 	vmov	r4, r5, d0
 80064b4:	b083      	sub	sp, #12
 80064b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80064be:	9001      	str	r0, [sp, #4]
 80064c0:	da06      	bge.n	80064d0 <__kernel_sin+0x30>
 80064c2:	ee10 0a10 	vmov	r0, s0
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7fa fb46 	bl	8000b58 <__aeabi_d2iz>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d051      	beq.n	8006574 <__kernel_sin+0xd4>
 80064d0:	4622      	mov	r2, r4
 80064d2:	462b      	mov	r3, r5
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	4682      	mov	sl, r0
 80064de:	468b      	mov	fp, r1
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	a341      	add	r3, pc, #260	; (adr r3, 80065f4 <__kernel_sin+0x154>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	4680      	mov	r8, r0
 80064f4:	4689      	mov	r9, r1
 80064f6:	4650      	mov	r0, sl
 80064f8:	4659      	mov	r1, fp
 80064fa:	f7fa f87d 	bl	80005f8 <__aeabi_dmul>
 80064fe:	a33f      	add	r3, pc, #252	; (adr r3, 80065fc <__kernel_sin+0x15c>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7f9 fec0 	bl	8000288 <__aeabi_dsub>
 8006508:	4652      	mov	r2, sl
 800650a:	465b      	mov	r3, fp
 800650c:	f7fa f874 	bl	80005f8 <__aeabi_dmul>
 8006510:	a33c      	add	r3, pc, #240	; (adr r3, 8006604 <__kernel_sin+0x164>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7f9 feb9 	bl	800028c <__adddf3>
 800651a:	4652      	mov	r2, sl
 800651c:	465b      	mov	r3, fp
 800651e:	f7fa f86b 	bl	80005f8 <__aeabi_dmul>
 8006522:	a33a      	add	r3, pc, #232	; (adr r3, 800660c <__kernel_sin+0x16c>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f7f9 feae 	bl	8000288 <__aeabi_dsub>
 800652c:	4652      	mov	r2, sl
 800652e:	465b      	mov	r3, fp
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	a337      	add	r3, pc, #220	; (adr r3, 8006614 <__kernel_sin+0x174>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fea7 	bl	800028c <__adddf3>
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	4606      	mov	r6, r0
 8006542:	460f      	mov	r7, r1
 8006544:	b9eb      	cbnz	r3, 8006582 <__kernel_sin+0xe2>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4650      	mov	r0, sl
 800654c:	4659      	mov	r1, fp
 800654e:	f7fa f853 	bl	80005f8 <__aeabi_dmul>
 8006552:	a325      	add	r3, pc, #148	; (adr r3, 80065e8 <__kernel_sin+0x148>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7f9 fe96 	bl	8000288 <__aeabi_dsub>
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7f9 fe8e 	bl	800028c <__adddf3>
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	ec45 4b10 	vmov	d0, r4, r5
 8006578:	b003      	add	sp, #12
 800657a:	ecbd 8b04 	vpop	{d8-d9}
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <__kernel_sin+0x150>)
 8006584:	ec51 0b18 	vmov	r0, r1, d8
 8006588:	2200      	movs	r2, #0
 800658a:	f7fa f835 	bl	80005f8 <__aeabi_dmul>
 800658e:	4632      	mov	r2, r6
 8006590:	ec41 0b19 	vmov	d9, r0, r1
 8006594:	463b      	mov	r3, r7
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa f82d 	bl	80005f8 <__aeabi_dmul>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	ec51 0b19 	vmov	r0, r1, d9
 80065a6:	f7f9 fe6f 	bl	8000288 <__aeabi_dsub>
 80065aa:	4652      	mov	r2, sl
 80065ac:	465b      	mov	r3, fp
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	ec53 2b18 	vmov	r2, r3, d8
 80065b6:	f7f9 fe67 	bl	8000288 <__aeabi_dsub>
 80065ba:	a30b      	add	r3, pc, #44	; (adr r3, 80065e8 <__kernel_sin+0x148>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	4606      	mov	r6, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	4640      	mov	r0, r8
 80065c6:	4649      	mov	r1, r9
 80065c8:	f7fa f816 	bl	80005f8 <__aeabi_dmul>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4630      	mov	r0, r6
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7f9 fe5a 	bl	800028c <__adddf3>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7f9 fe52 	bl	8000288 <__aeabi_dsub>
 80065e4:	e7c4      	b.n	8006570 <__kernel_sin+0xd0>
 80065e6:	bf00      	nop
 80065e8:	55555549 	.word	0x55555549
 80065ec:	3fc55555 	.word	0x3fc55555
 80065f0:	3fe00000 	.word	0x3fe00000
 80065f4:	5acfd57c 	.word	0x5acfd57c
 80065f8:	3de5d93a 	.word	0x3de5d93a
 80065fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8006600:	3e5ae5e6 	.word	0x3e5ae5e6
 8006604:	57b1fe7d 	.word	0x57b1fe7d
 8006608:	3ec71de3 	.word	0x3ec71de3
 800660c:	19c161d5 	.word	0x19c161d5
 8006610:	3f2a01a0 	.word	0x3f2a01a0
 8006614:	1110f8a6 	.word	0x1110f8a6
 8006618:	3f811111 	.word	0x3f811111
 800661c:	00000000 	.word	0x00000000

08006620 <atan>:
 8006620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ec55 4b10 	vmov	r4, r5, d0
 8006628:	4bc3      	ldr	r3, [pc, #780]	; (8006938 <atan+0x318>)
 800662a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800662e:	429e      	cmp	r6, r3
 8006630:	46ab      	mov	fp, r5
 8006632:	dd18      	ble.n	8006666 <atan+0x46>
 8006634:	4bc1      	ldr	r3, [pc, #772]	; (800693c <atan+0x31c>)
 8006636:	429e      	cmp	r6, r3
 8006638:	dc01      	bgt.n	800663e <atan+0x1e>
 800663a:	d109      	bne.n	8006650 <atan+0x30>
 800663c:	b144      	cbz	r4, 8006650 <atan+0x30>
 800663e:	4622      	mov	r2, r4
 8006640:	462b      	mov	r3, r5
 8006642:	4620      	mov	r0, r4
 8006644:	4629      	mov	r1, r5
 8006646:	f7f9 fe21 	bl	800028c <__adddf3>
 800664a:	4604      	mov	r4, r0
 800664c:	460d      	mov	r5, r1
 800664e:	e006      	b.n	800665e <atan+0x3e>
 8006650:	f1bb 0f00 	cmp.w	fp, #0
 8006654:	f300 8131 	bgt.w	80068ba <atan+0x29a>
 8006658:	a59b      	add	r5, pc, #620	; (adr r5, 80068c8 <atan+0x2a8>)
 800665a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800665e:	ec45 4b10 	vmov	d0, r4, r5
 8006662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006666:	4bb6      	ldr	r3, [pc, #728]	; (8006940 <atan+0x320>)
 8006668:	429e      	cmp	r6, r3
 800666a:	dc14      	bgt.n	8006696 <atan+0x76>
 800666c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006670:	429e      	cmp	r6, r3
 8006672:	dc0d      	bgt.n	8006690 <atan+0x70>
 8006674:	a396      	add	r3, pc, #600	; (adr r3, 80068d0 <atan+0x2b0>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	ee10 0a10 	vmov	r0, s0
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 fe04 	bl	800028c <__adddf3>
 8006684:	4baf      	ldr	r3, [pc, #700]	; (8006944 <atan+0x324>)
 8006686:	2200      	movs	r2, #0
 8006688:	f7fa fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800668c:	2800      	cmp	r0, #0
 800668e:	d1e6      	bne.n	800665e <atan+0x3e>
 8006690:	f04f 3aff 	mov.w	sl, #4294967295
 8006694:	e02b      	b.n	80066ee <atan+0xce>
 8006696:	f000 f963 	bl	8006960 <fabs>
 800669a:	4bab      	ldr	r3, [pc, #684]	; (8006948 <atan+0x328>)
 800669c:	429e      	cmp	r6, r3
 800669e:	ec55 4b10 	vmov	r4, r5, d0
 80066a2:	f300 80bf 	bgt.w	8006824 <atan+0x204>
 80066a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80066aa:	429e      	cmp	r6, r3
 80066ac:	f300 80a0 	bgt.w	80067f0 <atan+0x1d0>
 80066b0:	ee10 2a10 	vmov	r2, s0
 80066b4:	ee10 0a10 	vmov	r0, s0
 80066b8:	462b      	mov	r3, r5
 80066ba:	4629      	mov	r1, r5
 80066bc:	f7f9 fde6 	bl	800028c <__adddf3>
 80066c0:	4ba0      	ldr	r3, [pc, #640]	; (8006944 <atan+0x324>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	f7f9 fde0 	bl	8000288 <__aeabi_dsub>
 80066c8:	2200      	movs	r2, #0
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 fdd9 	bl	800028c <__adddf3>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7fa f8b3 	bl	800084c <__aeabi_ddiv>
 80066e6:	f04f 0a00 	mov.w	sl, #0
 80066ea:	4604      	mov	r4, r0
 80066ec:	460d      	mov	r5, r1
 80066ee:	4622      	mov	r2, r4
 80066f0:	462b      	mov	r3, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7f9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4680      	mov	r8, r0
 8006700:	4689      	mov	r9, r1
 8006702:	f7f9 ff79 	bl	80005f8 <__aeabi_dmul>
 8006706:	a374      	add	r3, pc, #464	; (adr r3, 80068d8 <atan+0x2b8>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	4606      	mov	r6, r0
 800670e:	460f      	mov	r7, r1
 8006710:	f7f9 ff72 	bl	80005f8 <__aeabi_dmul>
 8006714:	a372      	add	r3, pc, #456	; (adr r3, 80068e0 <atan+0x2c0>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fdb7 	bl	800028c <__adddf3>
 800671e:	4632      	mov	r2, r6
 8006720:	463b      	mov	r3, r7
 8006722:	f7f9 ff69 	bl	80005f8 <__aeabi_dmul>
 8006726:	a370      	add	r3, pc, #448	; (adr r3, 80068e8 <atan+0x2c8>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 fdae 	bl	800028c <__adddf3>
 8006730:	4632      	mov	r2, r6
 8006732:	463b      	mov	r3, r7
 8006734:	f7f9 ff60 	bl	80005f8 <__aeabi_dmul>
 8006738:	a36d      	add	r3, pc, #436	; (adr r3, 80068f0 <atan+0x2d0>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 fda5 	bl	800028c <__adddf3>
 8006742:	4632      	mov	r2, r6
 8006744:	463b      	mov	r3, r7
 8006746:	f7f9 ff57 	bl	80005f8 <__aeabi_dmul>
 800674a:	a36b      	add	r3, pc, #428	; (adr r3, 80068f8 <atan+0x2d8>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 fd9c 	bl	800028c <__adddf3>
 8006754:	4632      	mov	r2, r6
 8006756:	463b      	mov	r3, r7
 8006758:	f7f9 ff4e 	bl	80005f8 <__aeabi_dmul>
 800675c:	a368      	add	r3, pc, #416	; (adr r3, 8006900 <atan+0x2e0>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 fd93 	bl	800028c <__adddf3>
 8006766:	4642      	mov	r2, r8
 8006768:	464b      	mov	r3, r9
 800676a:	f7f9 ff45 	bl	80005f8 <__aeabi_dmul>
 800676e:	a366      	add	r3, pc, #408	; (adr r3, 8006908 <atan+0x2e8>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	4680      	mov	r8, r0
 8006776:	4689      	mov	r9, r1
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	a363      	add	r3, pc, #396	; (adr r3, 8006910 <atan+0x2f0>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 fd7f 	bl	8000288 <__aeabi_dsub>
 800678a:	4632      	mov	r2, r6
 800678c:	463b      	mov	r3, r7
 800678e:	f7f9 ff33 	bl	80005f8 <__aeabi_dmul>
 8006792:	a361      	add	r3, pc, #388	; (adr r3, 8006918 <atan+0x2f8>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7f9 fd76 	bl	8000288 <__aeabi_dsub>
 800679c:	4632      	mov	r2, r6
 800679e:	463b      	mov	r3, r7
 80067a0:	f7f9 ff2a 	bl	80005f8 <__aeabi_dmul>
 80067a4:	a35e      	add	r3, pc, #376	; (adr r3, 8006920 <atan+0x300>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7f9 fd6d 	bl	8000288 <__aeabi_dsub>
 80067ae:	4632      	mov	r2, r6
 80067b0:	463b      	mov	r3, r7
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	a35c      	add	r3, pc, #368	; (adr r3, 8006928 <atan+0x308>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fd64 	bl	8000288 <__aeabi_dsub>
 80067c0:	4632      	mov	r2, r6
 80067c2:	463b      	mov	r3, r7
 80067c4:	f7f9 ff18 	bl	80005f8 <__aeabi_dmul>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4640      	mov	r0, r8
 80067ce:	4649      	mov	r1, r9
 80067d0:	f7f9 fd5c 	bl	800028c <__adddf3>
 80067d4:	4622      	mov	r2, r4
 80067d6:	462b      	mov	r3, r5
 80067d8:	f7f9 ff0e 	bl	80005f8 <__aeabi_dmul>
 80067dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	d14b      	bne.n	800687e <atan+0x25e>
 80067e6:	4620      	mov	r0, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7f9 fd4d 	bl	8000288 <__aeabi_dsub>
 80067ee:	e72c      	b.n	800664a <atan+0x2a>
 80067f0:	ee10 0a10 	vmov	r0, s0
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <atan+0x324>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	4629      	mov	r1, r5
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4b51      	ldr	r3, [pc, #324]	; (8006944 <atan+0x324>)
 8006800:	4606      	mov	r6, r0
 8006802:	460f      	mov	r7, r1
 8006804:	2200      	movs	r2, #0
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7f9 fd3f 	bl	800028c <__adddf3>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4630      	mov	r0, r6
 8006814:	4639      	mov	r1, r7
 8006816:	f7fa f819 	bl	800084c <__aeabi_ddiv>
 800681a:	f04f 0a01 	mov.w	sl, #1
 800681e:	4604      	mov	r4, r0
 8006820:	460d      	mov	r5, r1
 8006822:	e764      	b.n	80066ee <atan+0xce>
 8006824:	4b49      	ldr	r3, [pc, #292]	; (800694c <atan+0x32c>)
 8006826:	429e      	cmp	r6, r3
 8006828:	da1d      	bge.n	8006866 <atan+0x246>
 800682a:	ee10 0a10 	vmov	r0, s0
 800682e:	4b48      	ldr	r3, [pc, #288]	; (8006950 <atan+0x330>)
 8006830:	2200      	movs	r2, #0
 8006832:	4629      	mov	r1, r5
 8006834:	f7f9 fd28 	bl	8000288 <__aeabi_dsub>
 8006838:	4b45      	ldr	r3, [pc, #276]	; (8006950 <atan+0x330>)
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	2200      	movs	r2, #0
 8006840:	4620      	mov	r0, r4
 8006842:	4629      	mov	r1, r5
 8006844:	f7f9 fed8 	bl	80005f8 <__aeabi_dmul>
 8006848:	4b3e      	ldr	r3, [pc, #248]	; (8006944 <atan+0x324>)
 800684a:	2200      	movs	r2, #0
 800684c:	f7f9 fd1e 	bl	800028c <__adddf3>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4630      	mov	r0, r6
 8006856:	4639      	mov	r1, r7
 8006858:	f7f9 fff8 	bl	800084c <__aeabi_ddiv>
 800685c:	f04f 0a02 	mov.w	sl, #2
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	e743      	b.n	80066ee <atan+0xce>
 8006866:	462b      	mov	r3, r5
 8006868:	ee10 2a10 	vmov	r2, s0
 800686c:	4939      	ldr	r1, [pc, #228]	; (8006954 <atan+0x334>)
 800686e:	2000      	movs	r0, #0
 8006870:	f7f9 ffec 	bl	800084c <__aeabi_ddiv>
 8006874:	f04f 0a03 	mov.w	sl, #3
 8006878:	4604      	mov	r4, r0
 800687a:	460d      	mov	r5, r1
 800687c:	e737      	b.n	80066ee <atan+0xce>
 800687e:	4b36      	ldr	r3, [pc, #216]	; (8006958 <atan+0x338>)
 8006880:	4e36      	ldr	r6, [pc, #216]	; (800695c <atan+0x33c>)
 8006882:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006886:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800688a:	e9da 2300 	ldrd	r2, r3, [sl]
 800688e:	f7f9 fcfb 	bl	8000288 <__aeabi_dsub>
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80068a2:	f7f9 fcf1 	bl	8000288 <__aeabi_dsub>
 80068a6:	f1bb 0f00 	cmp.w	fp, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	460d      	mov	r5, r1
 80068ae:	f6bf aed6 	bge.w	800665e <atan+0x3e>
 80068b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068b6:	461d      	mov	r5, r3
 80068b8:	e6d1      	b.n	800665e <atan+0x3e>
 80068ba:	a51d      	add	r5, pc, #116	; (adr r5, 8006930 <atan+0x310>)
 80068bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80068c0:	e6cd      	b.n	800665e <atan+0x3e>
 80068c2:	bf00      	nop
 80068c4:	f3af 8000 	nop.w
 80068c8:	54442d18 	.word	0x54442d18
 80068cc:	bff921fb 	.word	0xbff921fb
 80068d0:	8800759c 	.word	0x8800759c
 80068d4:	7e37e43c 	.word	0x7e37e43c
 80068d8:	e322da11 	.word	0xe322da11
 80068dc:	3f90ad3a 	.word	0x3f90ad3a
 80068e0:	24760deb 	.word	0x24760deb
 80068e4:	3fa97b4b 	.word	0x3fa97b4b
 80068e8:	a0d03d51 	.word	0xa0d03d51
 80068ec:	3fb10d66 	.word	0x3fb10d66
 80068f0:	c54c206e 	.word	0xc54c206e
 80068f4:	3fb745cd 	.word	0x3fb745cd
 80068f8:	920083ff 	.word	0x920083ff
 80068fc:	3fc24924 	.word	0x3fc24924
 8006900:	5555550d 	.word	0x5555550d
 8006904:	3fd55555 	.word	0x3fd55555
 8006908:	2c6a6c2f 	.word	0x2c6a6c2f
 800690c:	bfa2b444 	.word	0xbfa2b444
 8006910:	52defd9a 	.word	0x52defd9a
 8006914:	3fadde2d 	.word	0x3fadde2d
 8006918:	af749a6d 	.word	0xaf749a6d
 800691c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006920:	fe231671 	.word	0xfe231671
 8006924:	3fbc71c6 	.word	0x3fbc71c6
 8006928:	9998ebc4 	.word	0x9998ebc4
 800692c:	3fc99999 	.word	0x3fc99999
 8006930:	54442d18 	.word	0x54442d18
 8006934:	3ff921fb 	.word	0x3ff921fb
 8006938:	440fffff 	.word	0x440fffff
 800693c:	7ff00000 	.word	0x7ff00000
 8006940:	3fdbffff 	.word	0x3fdbffff
 8006944:	3ff00000 	.word	0x3ff00000
 8006948:	3ff2ffff 	.word	0x3ff2ffff
 800694c:	40038000 	.word	0x40038000
 8006950:	3ff80000 	.word	0x3ff80000
 8006954:	bff00000 	.word	0xbff00000
 8006958:	0800b7d8 	.word	0x0800b7d8
 800695c:	0800b7b8 	.word	0x0800b7b8

08006960 <fabs>:
 8006960:	ec51 0b10 	vmov	r0, r1, d0
 8006964:	ee10 2a10 	vmov	r2, s0
 8006968:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800696c:	ec43 2b10 	vmov	d0, r2, r3
 8006970:	4770      	bx	lr
 8006972:	0000      	movs	r0, r0
 8006974:	0000      	movs	r0, r0
	...

08006978 <floor>:
 8006978:	ec51 0b10 	vmov	r0, r1, d0
 800697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006984:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006988:	2e13      	cmp	r6, #19
 800698a:	ee10 5a10 	vmov	r5, s0
 800698e:	ee10 8a10 	vmov	r8, s0
 8006992:	460c      	mov	r4, r1
 8006994:	dc32      	bgt.n	80069fc <floor+0x84>
 8006996:	2e00      	cmp	r6, #0
 8006998:	da14      	bge.n	80069c4 <floor+0x4c>
 800699a:	a333      	add	r3, pc, #204	; (adr r3, 8006a68 <floor+0xf0>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fc74 	bl	800028c <__adddf3>
 80069a4:	2200      	movs	r2, #0
 80069a6:	2300      	movs	r3, #0
 80069a8:	f7fa f8b6 	bl	8000b18 <__aeabi_dcmpgt>
 80069ac:	b138      	cbz	r0, 80069be <floor+0x46>
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	da57      	bge.n	8006a62 <floor+0xea>
 80069b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80069b6:	431d      	orrs	r5, r3
 80069b8:	d001      	beq.n	80069be <floor+0x46>
 80069ba:	4c2d      	ldr	r4, [pc, #180]	; (8006a70 <floor+0xf8>)
 80069bc:	2500      	movs	r5, #0
 80069be:	4621      	mov	r1, r4
 80069c0:	4628      	mov	r0, r5
 80069c2:	e025      	b.n	8006a10 <floor+0x98>
 80069c4:	4f2b      	ldr	r7, [pc, #172]	; (8006a74 <floor+0xfc>)
 80069c6:	4137      	asrs	r7, r6
 80069c8:	ea01 0307 	and.w	r3, r1, r7
 80069cc:	4303      	orrs	r3, r0
 80069ce:	d01f      	beq.n	8006a10 <floor+0x98>
 80069d0:	a325      	add	r3, pc, #148	; (adr r3, 8006a68 <floor+0xf0>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fc59 	bl	800028c <__adddf3>
 80069da:	2200      	movs	r2, #0
 80069dc:	2300      	movs	r3, #0
 80069de:	f7fa f89b 	bl	8000b18 <__aeabi_dcmpgt>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d0eb      	beq.n	80069be <floor+0x46>
 80069e6:	2c00      	cmp	r4, #0
 80069e8:	bfbe      	ittt	lt
 80069ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80069ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80069f2:	19a4      	addlt	r4, r4, r6
 80069f4:	ea24 0407 	bic.w	r4, r4, r7
 80069f8:	2500      	movs	r5, #0
 80069fa:	e7e0      	b.n	80069be <floor+0x46>
 80069fc:	2e33      	cmp	r6, #51	; 0x33
 80069fe:	dd0b      	ble.n	8006a18 <floor+0xa0>
 8006a00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006a04:	d104      	bne.n	8006a10 <floor+0x98>
 8006a06:	ee10 2a10 	vmov	r2, s0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	f7f9 fc3e 	bl	800028c <__adddf3>
 8006a10:	ec41 0b10 	vmov	d0, r0, r1
 8006a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a20:	fa23 f707 	lsr.w	r7, r3, r7
 8006a24:	4207      	tst	r7, r0
 8006a26:	d0f3      	beq.n	8006a10 <floor+0x98>
 8006a28:	a30f      	add	r3, pc, #60	; (adr r3, 8006a68 <floor+0xf0>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fc2d 	bl	800028c <__adddf3>
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	f7fa f86f 	bl	8000b18 <__aeabi_dcmpgt>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d0bf      	beq.n	80069be <floor+0x46>
 8006a3e:	2c00      	cmp	r4, #0
 8006a40:	da02      	bge.n	8006a48 <floor+0xd0>
 8006a42:	2e14      	cmp	r6, #20
 8006a44:	d103      	bne.n	8006a4e <floor+0xd6>
 8006a46:	3401      	adds	r4, #1
 8006a48:	ea25 0507 	bic.w	r5, r5, r7
 8006a4c:	e7b7      	b.n	80069be <floor+0x46>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006a54:	fa03 f606 	lsl.w	r6, r3, r6
 8006a58:	4435      	add	r5, r6
 8006a5a:	4545      	cmp	r5, r8
 8006a5c:	bf38      	it	cc
 8006a5e:	18e4      	addcc	r4, r4, r3
 8006a60:	e7f2      	b.n	8006a48 <floor+0xd0>
 8006a62:	2500      	movs	r5, #0
 8006a64:	462c      	mov	r4, r5
 8006a66:	e7aa      	b.n	80069be <floor+0x46>
 8006a68:	8800759c 	.word	0x8800759c
 8006a6c:	7e37e43c 	.word	0x7e37e43c
 8006a70:	bff00000 	.word	0xbff00000
 8006a74:	000fffff 	.word	0x000fffff

08006a78 <scalbn>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	ec55 4b10 	vmov	r4, r5, d0
 8006a7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006a82:	4606      	mov	r6, r0
 8006a84:	462b      	mov	r3, r5
 8006a86:	b99a      	cbnz	r2, 8006ab0 <scalbn+0x38>
 8006a88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a8c:	4323      	orrs	r3, r4
 8006a8e:	d036      	beq.n	8006afe <scalbn+0x86>
 8006a90:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <scalbn+0x100>)
 8006a92:	4629      	mov	r1, r5
 8006a94:	ee10 0a10 	vmov	r0, s0
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f7f9 fdad 	bl	80005f8 <__aeabi_dmul>
 8006a9e:	4b37      	ldr	r3, [pc, #220]	; (8006b7c <scalbn+0x104>)
 8006aa0:	429e      	cmp	r6, r3
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	da10      	bge.n	8006aca <scalbn+0x52>
 8006aa8:	a32b      	add	r3, pc, #172	; (adr r3, 8006b58 <scalbn+0xe0>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	e03a      	b.n	8006b26 <scalbn+0xae>
 8006ab0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006ab4:	428a      	cmp	r2, r1
 8006ab6:	d10c      	bne.n	8006ad2 <scalbn+0x5a>
 8006ab8:	ee10 2a10 	vmov	r2, s0
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7f9 fbe4 	bl	800028c <__adddf3>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	e019      	b.n	8006afe <scalbn+0x86>
 8006aca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ace:	460b      	mov	r3, r1
 8006ad0:	3a36      	subs	r2, #54	; 0x36
 8006ad2:	4432      	add	r2, r6
 8006ad4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ad8:	428a      	cmp	r2, r1
 8006ada:	dd08      	ble.n	8006aee <scalbn+0x76>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	a120      	add	r1, pc, #128	; (adr r1, 8006b60 <scalbn+0xe8>)
 8006ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae4:	da1c      	bge.n	8006b20 <scalbn+0xa8>
 8006ae6:	a120      	add	r1, pc, #128	; (adr r1, 8006b68 <scalbn+0xf0>)
 8006ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aec:	e018      	b.n	8006b20 <scalbn+0xa8>
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	dd08      	ble.n	8006b04 <scalbn+0x8c>
 8006af2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006afa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006afe:	ec45 4b10 	vmov	d0, r4, r5
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b08:	da19      	bge.n	8006b3e <scalbn+0xc6>
 8006b0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006b14:	dd0a      	ble.n	8006b2c <scalbn+0xb4>
 8006b16:	a112      	add	r1, pc, #72	; (adr r1, 8006b60 <scalbn+0xe8>)
 8006b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e2      	bne.n	8006ae6 <scalbn+0x6e>
 8006b20:	a30f      	add	r3, pc, #60	; (adr r3, 8006b60 <scalbn+0xe8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	e7cb      	b.n	8006ac4 <scalbn+0x4c>
 8006b2c:	a10a      	add	r1, pc, #40	; (adr r1, 8006b58 <scalbn+0xe0>)
 8006b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0b8      	beq.n	8006aa8 <scalbn+0x30>
 8006b36:	a10e      	add	r1, pc, #56	; (adr r1, 8006b70 <scalbn+0xf8>)
 8006b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b3c:	e7b4      	b.n	8006aa8 <scalbn+0x30>
 8006b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b42:	3236      	adds	r2, #54	; 0x36
 8006b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <scalbn+0x108>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	e7e8      	b.n	8006b26 <scalbn+0xae>
 8006b54:	f3af 8000 	nop.w
 8006b58:	c2f8f359 	.word	0xc2f8f359
 8006b5c:	01a56e1f 	.word	0x01a56e1f
 8006b60:	8800759c 	.word	0x8800759c
 8006b64:	7e37e43c 	.word	0x7e37e43c
 8006b68:	8800759c 	.word	0x8800759c
 8006b6c:	fe37e43c 	.word	0xfe37e43c
 8006b70:	c2f8f359 	.word	0xc2f8f359
 8006b74:	81a56e1f 	.word	0x81a56e1f
 8006b78:	43500000 	.word	0x43500000
 8006b7c:	ffff3cb0 	.word	0xffff3cb0
 8006b80:	3c900000 	.word	0x3c900000

08006b84 <__errno>:
 8006b84:	4b01      	ldr	r3, [pc, #4]	; (8006b8c <__errno+0x8>)
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	2000000c 	.word	0x2000000c

08006b90 <__libc_init_array>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	4d0d      	ldr	r5, [pc, #52]	; (8006bc8 <__libc_init_array+0x38>)
 8006b94:	4c0d      	ldr	r4, [pc, #52]	; (8006bcc <__libc_init_array+0x3c>)
 8006b96:	1b64      	subs	r4, r4, r5
 8006b98:	10a4      	asrs	r4, r4, #2
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	42a6      	cmp	r6, r4
 8006b9e:	d109      	bne.n	8006bb4 <__libc_init_array+0x24>
 8006ba0:	4d0b      	ldr	r5, [pc, #44]	; (8006bd0 <__libc_init_array+0x40>)
 8006ba2:	4c0c      	ldr	r4, [pc, #48]	; (8006bd4 <__libc_init_array+0x44>)
 8006ba4:	f004 fcc4 	bl	800b530 <_init>
 8006ba8:	1b64      	subs	r4, r4, r5
 8006baa:	10a4      	asrs	r4, r4, #2
 8006bac:	2600      	movs	r6, #0
 8006bae:	42a6      	cmp	r6, r4
 8006bb0:	d105      	bne.n	8006bbe <__libc_init_array+0x2e>
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb8:	4798      	blx	r3
 8006bba:	3601      	adds	r6, #1
 8006bbc:	e7ee      	b.n	8006b9c <__libc_init_array+0xc>
 8006bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc2:	4798      	blx	r3
 8006bc4:	3601      	adds	r6, #1
 8006bc6:	e7f2      	b.n	8006bae <__libc_init_array+0x1e>
 8006bc8:	0800bc9c 	.word	0x0800bc9c
 8006bcc:	0800bc9c 	.word	0x0800bc9c
 8006bd0:	0800bc9c 	.word	0x0800bc9c
 8006bd4:	0800bca0 	.word	0x0800bca0

08006bd8 <memset>:
 8006bd8:	4402      	add	r2, r0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d100      	bne.n	8006be2 <memset+0xa>
 8006be0:	4770      	bx	lr
 8006be2:	f803 1b01 	strb.w	r1, [r3], #1
 8006be6:	e7f9      	b.n	8006bdc <memset+0x4>

08006be8 <__cvt>:
 8006be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	ec55 4b10 	vmov	r4, r5, d0
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	460e      	mov	r6, r1
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	bfbb      	ittet	lt
 8006bfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bfe:	461d      	movlt	r5, r3
 8006c00:	2300      	movge	r3, #0
 8006c02:	232d      	movlt	r3, #45	; 0x2d
 8006c04:	700b      	strb	r3, [r1, #0]
 8006c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c0c:	4691      	mov	r9, r2
 8006c0e:	f023 0820 	bic.w	r8, r3, #32
 8006c12:	bfbc      	itt	lt
 8006c14:	4622      	movlt	r2, r4
 8006c16:	4614      	movlt	r4, r2
 8006c18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c1c:	d005      	beq.n	8006c2a <__cvt+0x42>
 8006c1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c22:	d100      	bne.n	8006c26 <__cvt+0x3e>
 8006c24:	3601      	adds	r6, #1
 8006c26:	2102      	movs	r1, #2
 8006c28:	e000      	b.n	8006c2c <__cvt+0x44>
 8006c2a:	2103      	movs	r1, #3
 8006c2c:	ab03      	add	r3, sp, #12
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	ab02      	add	r3, sp, #8
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	ec45 4b10 	vmov	d0, r4, r5
 8006c38:	4653      	mov	r3, sl
 8006c3a:	4632      	mov	r2, r6
 8006c3c:	f001 fde0 	bl	8008800 <_dtoa_r>
 8006c40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c44:	4607      	mov	r7, r0
 8006c46:	d102      	bne.n	8006c4e <__cvt+0x66>
 8006c48:	f019 0f01 	tst.w	r9, #1
 8006c4c:	d022      	beq.n	8006c94 <__cvt+0xac>
 8006c4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c52:	eb07 0906 	add.w	r9, r7, r6
 8006c56:	d110      	bne.n	8006c7a <__cvt+0x92>
 8006c58:	783b      	ldrb	r3, [r7, #0]
 8006c5a:	2b30      	cmp	r3, #48	; 0x30
 8006c5c:	d10a      	bne.n	8006c74 <__cvt+0x8c>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2300      	movs	r3, #0
 8006c62:	4620      	mov	r0, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7f9 ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c6a:	b918      	cbnz	r0, 8006c74 <__cvt+0x8c>
 8006c6c:	f1c6 0601 	rsb	r6, r6, #1
 8006c70:	f8ca 6000 	str.w	r6, [sl]
 8006c74:	f8da 3000 	ldr.w	r3, [sl]
 8006c78:	4499      	add	r9, r3
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c86:	b108      	cbz	r0, 8006c8c <__cvt+0xa4>
 8006c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c8c:	2230      	movs	r2, #48	; 0x30
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	454b      	cmp	r3, r9
 8006c92:	d307      	bcc.n	8006ca4 <__cvt+0xbc>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c98:	1bdb      	subs	r3, r3, r7
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	b004      	add	sp, #16
 8006ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca4:	1c59      	adds	r1, r3, #1
 8006ca6:	9103      	str	r1, [sp, #12]
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e7f0      	b.n	8006c8e <__cvt+0xa6>

08006cac <__exponent>:
 8006cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bfb8      	it	lt
 8006cb4:	4249      	neglt	r1, r1
 8006cb6:	f803 2b02 	strb.w	r2, [r3], #2
 8006cba:	bfb4      	ite	lt
 8006cbc:	222d      	movlt	r2, #45	; 0x2d
 8006cbe:	222b      	movge	r2, #43	; 0x2b
 8006cc0:	2909      	cmp	r1, #9
 8006cc2:	7042      	strb	r2, [r0, #1]
 8006cc4:	dd2a      	ble.n	8006d1c <__exponent+0x70>
 8006cc6:	f10d 0407 	add.w	r4, sp, #7
 8006cca:	46a4      	mov	ip, r4
 8006ccc:	270a      	movs	r7, #10
 8006cce:	46a6      	mov	lr, r4
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cd6:	fb07 1516 	mls	r5, r7, r6, r1
 8006cda:	3530      	adds	r5, #48	; 0x30
 8006cdc:	2a63      	cmp	r2, #99	; 0x63
 8006cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	dcf1      	bgt.n	8006cce <__exponent+0x22>
 8006cea:	3130      	adds	r1, #48	; 0x30
 8006cec:	f1ae 0502 	sub.w	r5, lr, #2
 8006cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cf4:	1c44      	adds	r4, r0, #1
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4561      	cmp	r1, ip
 8006cfa:	d30a      	bcc.n	8006d12 <__exponent+0x66>
 8006cfc:	f10d 0209 	add.w	r2, sp, #9
 8006d00:	eba2 020e 	sub.w	r2, r2, lr
 8006d04:	4565      	cmp	r5, ip
 8006d06:	bf88      	it	hi
 8006d08:	2200      	movhi	r2, #0
 8006d0a:	4413      	add	r3, r2
 8006d0c:	1a18      	subs	r0, r3, r0
 8006d0e:	b003      	add	sp, #12
 8006d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d1a:	e7ed      	b.n	8006cf8 <__exponent+0x4c>
 8006d1c:	2330      	movs	r3, #48	; 0x30
 8006d1e:	3130      	adds	r1, #48	; 0x30
 8006d20:	7083      	strb	r3, [r0, #2]
 8006d22:	70c1      	strb	r1, [r0, #3]
 8006d24:	1d03      	adds	r3, r0, #4
 8006d26:	e7f1      	b.n	8006d0c <__exponent+0x60>

08006d28 <_printf_float>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	ed2d 8b02 	vpush	{d8}
 8006d30:	b08d      	sub	sp, #52	; 0x34
 8006d32:	460c      	mov	r4, r1
 8006d34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d38:	4616      	mov	r6, r2
 8006d3a:	461f      	mov	r7, r3
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	f002 febd 	bl	8009abc <_localeconv_r>
 8006d42:	f8d0 a000 	ldr.w	sl, [r0]
 8006d46:	4650      	mov	r0, sl
 8006d48:	f7f9 fa42 	bl	80001d0 <strlen>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	9305      	str	r3, [sp, #20]
 8006d54:	f8d8 3000 	ldr.w	r3, [r8]
 8006d58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d5c:	3307      	adds	r3, #7
 8006d5e:	f023 0307 	bic.w	r3, r3, #7
 8006d62:	f103 0208 	add.w	r2, r3, #8
 8006d66:	f8c8 2000 	str.w	r2, [r8]
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d80:	ee08 0a10 	vmov	s16, r0
 8006d84:	4b9f      	ldr	r3, [pc, #636]	; (8007004 <_printf_float+0x2dc>)
 8006d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	f7f9 fecd 	bl	8000b2c <__aeabi_dcmpun>
 8006d92:	bb88      	cbnz	r0, 8006df8 <_printf_float+0xd0>
 8006d94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d98:	4b9a      	ldr	r3, [pc, #616]	; (8007004 <_printf_float+0x2dc>)
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	f7f9 fea7 	bl	8000af0 <__aeabi_dcmple>
 8006da2:	bb48      	cbnz	r0, 8006df8 <_printf_float+0xd0>
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	4640      	mov	r0, r8
 8006daa:	4649      	mov	r1, r9
 8006dac:	f7f9 fe96 	bl	8000adc <__aeabi_dcmplt>
 8006db0:	b110      	cbz	r0, 8006db8 <_printf_float+0x90>
 8006db2:	232d      	movs	r3, #45	; 0x2d
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db8:	4b93      	ldr	r3, [pc, #588]	; (8007008 <_printf_float+0x2e0>)
 8006dba:	4894      	ldr	r0, [pc, #592]	; (800700c <_printf_float+0x2e4>)
 8006dbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006dc0:	bf94      	ite	ls
 8006dc2:	4698      	movls	r8, r3
 8006dc4:	4680      	movhi	r8, r0
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	f023 0204 	bic.w	r2, r3, #4
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	f04f 0900 	mov.w	r9, #0
 8006dd6:	9700      	str	r7, [sp, #0]
 8006dd8:	4633      	mov	r3, r6
 8006dda:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f9d8 	bl	8007194 <_printf_common>
 8006de4:	3001      	adds	r0, #1
 8006de6:	f040 8090 	bne.w	8006f0a <_printf_float+0x1e2>
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295
 8006dee:	b00d      	add	sp, #52	; 0x34
 8006df0:	ecbd 8b02 	vpop	{d8}
 8006df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe94 	bl	8000b2c <__aeabi_dcmpun>
 8006e04:	b140      	cbz	r0, 8006e18 <_printf_float+0xf0>
 8006e06:	464b      	mov	r3, r9
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bfbc      	itt	lt
 8006e0c:	232d      	movlt	r3, #45	; 0x2d
 8006e0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e12:	487f      	ldr	r0, [pc, #508]	; (8007010 <_printf_float+0x2e8>)
 8006e14:	4b7f      	ldr	r3, [pc, #508]	; (8007014 <_printf_float+0x2ec>)
 8006e16:	e7d1      	b.n	8006dbc <_printf_float+0x94>
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e1e:	9206      	str	r2, [sp, #24]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	d13f      	bne.n	8006ea4 <_printf_float+0x17c>
 8006e24:	2306      	movs	r3, #6
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	9b05      	ldr	r3, [sp, #20]
 8006e2a:	6861      	ldr	r1, [r4, #4]
 8006e2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e30:	2300      	movs	r3, #0
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	ab0a      	add	r3, sp, #40	; 0x28
 8006e36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e3a:	ab09      	add	r3, sp, #36	; 0x24
 8006e3c:	ec49 8b10 	vmov	d0, r8, r9
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7ff fecd 	bl	8006be8 <__cvt>
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e52:	2b47      	cmp	r3, #71	; 0x47
 8006e54:	4680      	mov	r8, r0
 8006e56:	d108      	bne.n	8006e6a <_printf_float+0x142>
 8006e58:	1cc8      	adds	r0, r1, #3
 8006e5a:	db02      	blt.n	8006e62 <_printf_float+0x13a>
 8006e5c:	6863      	ldr	r3, [r4, #4]
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	dd41      	ble.n	8006ee6 <_printf_float+0x1be>
 8006e62:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e66:	fa5f fb8b 	uxtb.w	fp, fp
 8006e6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e6e:	d820      	bhi.n	8006eb2 <_printf_float+0x18a>
 8006e70:	3901      	subs	r1, #1
 8006e72:	465a      	mov	r2, fp
 8006e74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e78:	9109      	str	r1, [sp, #36]	; 0x24
 8006e7a:	f7ff ff17 	bl	8006cac <__exponent>
 8006e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e80:	1813      	adds	r3, r2, r0
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	4681      	mov	r9, r0
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	dc02      	bgt.n	8006e90 <_printf_float+0x168>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	07d2      	lsls	r2, r2, #31
 8006e8e:	d501      	bpl.n	8006e94 <_printf_float+0x16c>
 8006e90:	3301      	adds	r3, #1
 8006e92:	6123      	str	r3, [r4, #16]
 8006e94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d09c      	beq.n	8006dd6 <_printf_float+0xae>
 8006e9c:	232d      	movs	r3, #45	; 0x2d
 8006e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea2:	e798      	b.n	8006dd6 <_printf_float+0xae>
 8006ea4:	9a06      	ldr	r2, [sp, #24]
 8006ea6:	2a47      	cmp	r2, #71	; 0x47
 8006ea8:	d1be      	bne.n	8006e28 <_printf_float+0x100>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1bc      	bne.n	8006e28 <_printf_float+0x100>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7b9      	b.n	8006e26 <_printf_float+0xfe>
 8006eb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006eb6:	d118      	bne.n	8006eea <_printf_float+0x1c2>
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	dd0b      	ble.n	8006ed6 <_printf_float+0x1ae>
 8006ebe:	6121      	str	r1, [r4, #16]
 8006ec0:	b913      	cbnz	r3, 8006ec8 <_printf_float+0x1a0>
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	07d0      	lsls	r0, r2, #31
 8006ec6:	d502      	bpl.n	8006ece <_printf_float+0x1a6>
 8006ec8:	3301      	adds	r3, #1
 8006eca:	440b      	add	r3, r1
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ed0:	f04f 0900 	mov.w	r9, #0
 8006ed4:	e7de      	b.n	8006e94 <_printf_float+0x16c>
 8006ed6:	b913      	cbnz	r3, 8006ede <_printf_float+0x1b6>
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	07d2      	lsls	r2, r2, #31
 8006edc:	d501      	bpl.n	8006ee2 <_printf_float+0x1ba>
 8006ede:	3302      	adds	r3, #2
 8006ee0:	e7f4      	b.n	8006ecc <_printf_float+0x1a4>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e7f2      	b.n	8006ecc <_printf_float+0x1a4>
 8006ee6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eec:	4299      	cmp	r1, r3
 8006eee:	db05      	blt.n	8006efc <_printf_float+0x1d4>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	6121      	str	r1, [r4, #16]
 8006ef4:	07d8      	lsls	r0, r3, #31
 8006ef6:	d5ea      	bpl.n	8006ece <_printf_float+0x1a6>
 8006ef8:	1c4b      	adds	r3, r1, #1
 8006efa:	e7e7      	b.n	8006ecc <_printf_float+0x1a4>
 8006efc:	2900      	cmp	r1, #0
 8006efe:	bfd4      	ite	le
 8006f00:	f1c1 0202 	rsble	r2, r1, #2
 8006f04:	2201      	movgt	r2, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	e7e0      	b.n	8006ecc <_printf_float+0x1a4>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	055a      	lsls	r2, r3, #21
 8006f0e:	d407      	bmi.n	8006f20 <_printf_float+0x1f8>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	4642      	mov	r2, r8
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d12c      	bne.n	8006f78 <_printf_float+0x250>
 8006f1e:	e764      	b.n	8006dea <_printf_float+0xc2>
 8006f20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f24:	f240 80e0 	bls.w	80070e8 <_printf_float+0x3c0>
 8006f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f7f9 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d034      	beq.n	8006fa2 <_printf_float+0x27a>
 8006f38:	4a37      	ldr	r2, [pc, #220]	; (8007018 <_printf_float+0x2f0>)
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	f43f af51 	beq.w	8006dea <_printf_float+0xc2>
 8006f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	db02      	blt.n	8006f56 <_printf_float+0x22e>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	07d8      	lsls	r0, r3, #31
 8006f54:	d510      	bpl.n	8006f78 <_printf_float+0x250>
 8006f56:	ee18 3a10 	vmov	r3, s16
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f af41 	beq.w	8006dea <_printf_float+0xc2>
 8006f68:	f04f 0800 	mov.w	r8, #0
 8006f6c:	f104 091a 	add.w	r9, r4, #26
 8006f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4543      	cmp	r3, r8
 8006f76:	dc09      	bgt.n	8006f8c <_printf_float+0x264>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	079b      	lsls	r3, r3, #30
 8006f7c:	f100 8105 	bmi.w	800718a <_printf_float+0x462>
 8006f80:	68e0      	ldr	r0, [r4, #12]
 8006f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f84:	4298      	cmp	r0, r3
 8006f86:	bfb8      	it	lt
 8006f88:	4618      	movlt	r0, r3
 8006f8a:	e730      	b.n	8006dee <_printf_float+0xc6>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	464a      	mov	r2, r9
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f af27 	beq.w	8006dea <_printf_float+0xc2>
 8006f9c:	f108 0801 	add.w	r8, r8, #1
 8006fa0:	e7e6      	b.n	8006f70 <_printf_float+0x248>
 8006fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc39      	bgt.n	800701c <_printf_float+0x2f4>
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <_printf_float+0x2f0>)
 8006faa:	2301      	movs	r3, #1
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f af19 	beq.w	8006dea <_printf_float+0xc2>
 8006fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d102      	bne.n	8006fc6 <_printf_float+0x29e>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	07d9      	lsls	r1, r3, #31
 8006fc4:	d5d8      	bpl.n	8006f78 <_printf_float+0x250>
 8006fc6:	ee18 3a10 	vmov	r3, s16
 8006fca:	4652      	mov	r2, sl
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f43f af09 	beq.w	8006dea <_printf_float+0xc2>
 8006fd8:	f04f 0900 	mov.w	r9, #0
 8006fdc:	f104 0a1a 	add.w	sl, r4, #26
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	425b      	negs	r3, r3
 8006fe4:	454b      	cmp	r3, r9
 8006fe6:	dc01      	bgt.n	8006fec <_printf_float+0x2c4>
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fea:	e792      	b.n	8006f12 <_printf_float+0x1ea>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4652      	mov	r2, sl
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f aef7 	beq.w	8006dea <_printf_float+0xc2>
 8006ffc:	f109 0901 	add.w	r9, r9, #1
 8007000:	e7ee      	b.n	8006fe0 <_printf_float+0x2b8>
 8007002:	bf00      	nop
 8007004:	7fefffff 	.word	0x7fefffff
 8007008:	0800b7fc 	.word	0x0800b7fc
 800700c:	0800b800 	.word	0x0800b800
 8007010:	0800b808 	.word	0x0800b808
 8007014:	0800b804 	.word	0x0800b804
 8007018:	0800b80c 	.word	0x0800b80c
 800701c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007020:	429a      	cmp	r2, r3
 8007022:	bfa8      	it	ge
 8007024:	461a      	movge	r2, r3
 8007026:	2a00      	cmp	r2, #0
 8007028:	4691      	mov	r9, r2
 800702a:	dc37      	bgt.n	800709c <_printf_float+0x374>
 800702c:	f04f 0b00 	mov.w	fp, #0
 8007030:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007034:	f104 021a 	add.w	r2, r4, #26
 8007038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	eba3 0309 	sub.w	r3, r3, r9
 8007040:	455b      	cmp	r3, fp
 8007042:	dc33      	bgt.n	80070ac <_printf_float+0x384>
 8007044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007048:	429a      	cmp	r2, r3
 800704a:	db3b      	blt.n	80070c4 <_printf_float+0x39c>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d438      	bmi.n	80070c4 <_printf_float+0x39c>
 8007052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007054:	9a05      	ldr	r2, [sp, #20]
 8007056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007058:	1a9a      	subs	r2, r3, r2
 800705a:	eba3 0901 	sub.w	r9, r3, r1
 800705e:	4591      	cmp	r9, r2
 8007060:	bfa8      	it	ge
 8007062:	4691      	movge	r9, r2
 8007064:	f1b9 0f00 	cmp.w	r9, #0
 8007068:	dc35      	bgt.n	80070d6 <_printf_float+0x3ae>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007072:	f104 0a1a 	add.w	sl, r4, #26
 8007076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	eba3 0309 	sub.w	r3, r3, r9
 8007080:	4543      	cmp	r3, r8
 8007082:	f77f af79 	ble.w	8006f78 <_printf_float+0x250>
 8007086:	2301      	movs	r3, #1
 8007088:	4652      	mov	r2, sl
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	f43f aeaa 	beq.w	8006dea <_printf_float+0xc2>
 8007096:	f108 0801 	add.w	r8, r8, #1
 800709a:	e7ec      	b.n	8007076 <_printf_float+0x34e>
 800709c:	4613      	mov	r3, r2
 800709e:	4631      	mov	r1, r6
 80070a0:	4642      	mov	r2, r8
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	d1c0      	bne.n	800702c <_printf_float+0x304>
 80070aa:	e69e      	b.n	8006dea <_printf_float+0xc2>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	9205      	str	r2, [sp, #20]
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f ae97 	beq.w	8006dea <_printf_float+0xc2>
 80070bc:	9a05      	ldr	r2, [sp, #20]
 80070be:	f10b 0b01 	add.w	fp, fp, #1
 80070c2:	e7b9      	b.n	8007038 <_printf_float+0x310>
 80070c4:	ee18 3a10 	vmov	r3, s16
 80070c8:	4652      	mov	r2, sl
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1be      	bne.n	8007052 <_printf_float+0x32a>
 80070d4:	e689      	b.n	8006dea <_printf_float+0xc2>
 80070d6:	9a05      	ldr	r2, [sp, #20]
 80070d8:	464b      	mov	r3, r9
 80070da:	4442      	add	r2, r8
 80070dc:	4631      	mov	r1, r6
 80070de:	4628      	mov	r0, r5
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	d1c1      	bne.n	800706a <_printf_float+0x342>
 80070e6:	e680      	b.n	8006dea <_printf_float+0xc2>
 80070e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ea:	2a01      	cmp	r2, #1
 80070ec:	dc01      	bgt.n	80070f2 <_printf_float+0x3ca>
 80070ee:	07db      	lsls	r3, r3, #31
 80070f0:	d538      	bpl.n	8007164 <_printf_float+0x43c>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4642      	mov	r2, r8
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f ae74 	beq.w	8006dea <_printf_float+0xc2>
 8007102:	ee18 3a10 	vmov	r3, s16
 8007106:	4652      	mov	r2, sl
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f ae6b 	beq.w	8006dea <_printf_float+0xc2>
 8007114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	f7f9 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007120:	b9d8      	cbnz	r0, 800715a <_printf_float+0x432>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	f108 0201 	add.w	r2, r8, #1
 8007128:	3b01      	subs	r3, #1
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	d10e      	bne.n	8007152 <_printf_float+0x42a>
 8007134:	e659      	b.n	8006dea <_printf_float+0xc2>
 8007136:	2301      	movs	r3, #1
 8007138:	4652      	mov	r2, sl
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae52 	beq.w	8006dea <_printf_float+0xc2>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714c:	3b01      	subs	r3, #1
 800714e:	4543      	cmp	r3, r8
 8007150:	dcf1      	bgt.n	8007136 <_printf_float+0x40e>
 8007152:	464b      	mov	r3, r9
 8007154:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007158:	e6dc      	b.n	8006f14 <_printf_float+0x1ec>
 800715a:	f04f 0800 	mov.w	r8, #0
 800715e:	f104 0a1a 	add.w	sl, r4, #26
 8007162:	e7f2      	b.n	800714a <_printf_float+0x422>
 8007164:	2301      	movs	r3, #1
 8007166:	4642      	mov	r2, r8
 8007168:	e7df      	b.n	800712a <_printf_float+0x402>
 800716a:	2301      	movs	r3, #1
 800716c:	464a      	mov	r2, r9
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	f43f ae38 	beq.w	8006dea <_printf_float+0xc2>
 800717a:	f108 0801 	add.w	r8, r8, #1
 800717e:	68e3      	ldr	r3, [r4, #12]
 8007180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007182:	1a5b      	subs	r3, r3, r1
 8007184:	4543      	cmp	r3, r8
 8007186:	dcf0      	bgt.n	800716a <_printf_float+0x442>
 8007188:	e6fa      	b.n	8006f80 <_printf_float+0x258>
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	f104 0919 	add.w	r9, r4, #25
 8007192:	e7f4      	b.n	800717e <_printf_float+0x456>

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4699      	mov	r9, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e0:	1e13      	subs	r3, r2, #0
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f0:	4649      	mov	r1, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c0      	blx	r8
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	68e5      	ldr	r5, [r4, #12]
 80071fe:	6832      	ldr	r2, [r6, #0]
 8007200:	f003 0306 	and.w	r3, r3, #6
 8007204:	2b04      	cmp	r3, #4
 8007206:	bf08      	it	eq
 8007208:	1aad      	subeq	r5, r5, r2
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4649      	mov	r1, r9
 8007230:	4638      	mov	r0, r7
 8007232:	47c0      	blx	r8
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	; 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	7e0f      	ldrb	r7, [r1, #24]
 8007276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007278:	2f78      	cmp	r7, #120	; 0x78
 800727a:	4691      	mov	r9, r2
 800727c:	4680      	mov	r8, r0
 800727e:	460c      	mov	r4, r1
 8007280:	469a      	mov	sl, r3
 8007282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	; 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80d8 	beq.w	8007442 <_printf_i+0x1d2>
 8007292:	2f58      	cmp	r7, #88	; 0x58
 8007294:	f000 80a3 	beq.w	80073de <_printf_i+0x16e>
 8007298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a101      	add	r1, pc, #4	; (adr r1, 80072b0 <_printf_i+0x40>)
 80072ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	08007429 	.word	0x08007429
 80072e0:	0800734d 	.word	0x0800734d
 80072e4:	0800740b 	.word	0x0800740b
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	0800744b 	.word	0x0800744b
 80072f4:	08007299 	.word	0x08007299
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	08007413 	.word	0x08007413
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	602a      	str	r2, [r5, #0]
 8007310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e0a3      	b.n	8007464 <_printf_i+0x1f4>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	6829      	ldr	r1, [r5, #0]
 8007320:	0606      	lsls	r6, r0, #24
 8007322:	f101 0304 	add.w	r3, r1, #4
 8007326:	d50a      	bpl.n	800733e <_printf_i+0xce>
 8007328:	680e      	ldr	r6, [r1, #0]
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	2e00      	cmp	r6, #0
 800732e:	da03      	bge.n	8007338 <_printf_i+0xc8>
 8007330:	232d      	movs	r3, #45	; 0x2d
 8007332:	4276      	negs	r6, r6
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	485e      	ldr	r0, [pc, #376]	; (80074b4 <_printf_i+0x244>)
 800733a:	230a      	movs	r3, #10
 800733c:	e019      	b.n	8007372 <_printf_i+0x102>
 800733e:	680e      	ldr	r6, [r1, #0]
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007346:	bf18      	it	ne
 8007348:	b236      	sxthne	r6, r6
 800734a:	e7ef      	b.n	800732c <_printf_i+0xbc>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	1d19      	adds	r1, r3, #4
 8007352:	6029      	str	r1, [r5, #0]
 8007354:	0601      	lsls	r1, r0, #24
 8007356:	d501      	bpl.n	800735c <_printf_i+0xec>
 8007358:	681e      	ldr	r6, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0xf2>
 800735c:	0646      	lsls	r6, r0, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0xe8>
 8007360:	881e      	ldrh	r6, [r3, #0]
 8007362:	4854      	ldr	r0, [pc, #336]	; (80074b4 <_printf_i+0x244>)
 8007364:	2f6f      	cmp	r7, #111	; 0x6f
 8007366:	bf0c      	ite	eq
 8007368:	2308      	moveq	r3, #8
 800736a:	230a      	movne	r3, #10
 800736c:	2100      	movs	r1, #0
 800736e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007372:	6865      	ldr	r5, [r4, #4]
 8007374:	60a5      	str	r5, [r4, #8]
 8007376:	2d00      	cmp	r5, #0
 8007378:	bfa2      	ittt	ge
 800737a:	6821      	ldrge	r1, [r4, #0]
 800737c:	f021 0104 	bicge.w	r1, r1, #4
 8007380:	6021      	strge	r1, [r4, #0]
 8007382:	b90e      	cbnz	r6, 8007388 <_printf_i+0x118>
 8007384:	2d00      	cmp	r5, #0
 8007386:	d04d      	beq.n	8007424 <_printf_i+0x1b4>
 8007388:	4615      	mov	r5, r2
 800738a:	fbb6 f1f3 	udiv	r1, r6, r3
 800738e:	fb03 6711 	mls	r7, r3, r1, r6
 8007392:	5dc7      	ldrb	r7, [r0, r7]
 8007394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007398:	4637      	mov	r7, r6
 800739a:	42bb      	cmp	r3, r7
 800739c:	460e      	mov	r6, r1
 800739e:	d9f4      	bls.n	800738a <_printf_i+0x11a>
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <_printf_i+0x14c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07de      	lsls	r6, r3, #31
 80073a8:	d508      	bpl.n	80073bc <_printf_i+0x14c>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	bfde      	ittt	le
 80073b2:	2330      	movle	r3, #48	; 0x30
 80073b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073bc:	1b52      	subs	r2, r2, r5
 80073be:	6122      	str	r2, [r4, #16]
 80073c0:	f8cd a000 	str.w	sl, [sp]
 80073c4:	464b      	mov	r3, r9
 80073c6:	aa03      	add	r2, sp, #12
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff fee2 	bl	8007194 <_printf_common>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d14c      	bne.n	800746e <_printf_i+0x1fe>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b004      	add	sp, #16
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	4835      	ldr	r0, [pc, #212]	; (80074b4 <_printf_i+0x244>)
 80073e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073e4:	6829      	ldr	r1, [r5, #0]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073ec:	6029      	str	r1, [r5, #0]
 80073ee:	061d      	lsls	r5, r3, #24
 80073f0:	d514      	bpl.n	800741c <_printf_i+0x1ac>
 80073f2:	07df      	lsls	r7, r3, #31
 80073f4:	bf44      	itt	mi
 80073f6:	f043 0320 	orrmi.w	r3, r3, #32
 80073fa:	6023      	strmi	r3, [r4, #0]
 80073fc:	b91e      	cbnz	r6, 8007406 <_printf_i+0x196>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	f023 0320 	bic.w	r3, r3, #32
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	2310      	movs	r3, #16
 8007408:	e7b0      	b.n	800736c <_printf_i+0xfc>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	4828      	ldr	r0, [pc, #160]	; (80074b8 <_printf_i+0x248>)
 8007416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800741a:	e7e3      	b.n	80073e4 <_printf_i+0x174>
 800741c:	0659      	lsls	r1, r3, #25
 800741e:	bf48      	it	mi
 8007420:	b2b6      	uxthmi	r6, r6
 8007422:	e7e6      	b.n	80073f2 <_printf_i+0x182>
 8007424:	4615      	mov	r5, r2
 8007426:	e7bb      	b.n	80073a0 <_printf_i+0x130>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	6826      	ldr	r6, [r4, #0]
 800742c:	6961      	ldr	r1, [r4, #20]
 800742e:	1d18      	adds	r0, r3, #4
 8007430:	6028      	str	r0, [r5, #0]
 8007432:	0635      	lsls	r5, r6, #24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	d501      	bpl.n	800743c <_printf_i+0x1cc>
 8007438:	6019      	str	r1, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0x1d2>
 800743c:	0670      	lsls	r0, r6, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0x1c8>
 8007440:	8019      	strh	r1, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4615      	mov	r5, r2
 8007448:	e7ba      	b.n	80073c0 <_printf_i+0x150>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	602a      	str	r2, [r5, #0]
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	4628      	mov	r0, r5
 8007458:	f7f8 fec2 	bl	80001e0 <memchr>
 800745c:	b108      	cbz	r0, 8007462 <_printf_i+0x1f2>
 800745e:	1b40      	subs	r0, r0, r5
 8007460:	6060      	str	r0, [r4, #4]
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2300      	movs	r3, #0
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e7a8      	b.n	80073c0 <_printf_i+0x150>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	462a      	mov	r2, r5
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d0ab      	beq.n	80073d4 <_printf_i+0x164>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	d413      	bmi.n	80074aa <_printf_i+0x23a>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	4298      	cmp	r0, r3
 8007488:	bfb8      	it	lt
 800748a:	4618      	movlt	r0, r3
 800748c:	e7a4      	b.n	80073d8 <_printf_i+0x168>
 800748e:	2301      	movs	r3, #1
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d09b      	beq.n	80073d4 <_printf_i+0x164>
 800749c:	3501      	adds	r5, #1
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dcf2      	bgt.n	800748e <_printf_i+0x21e>
 80074a8:	e7eb      	b.n	8007482 <_printf_i+0x212>
 80074aa:	2500      	movs	r5, #0
 80074ac:	f104 0619 	add.w	r6, r4, #25
 80074b0:	e7f5      	b.n	800749e <_printf_i+0x22e>
 80074b2:	bf00      	nop
 80074b4:	0800b80e 	.word	0x0800b80e
 80074b8:	0800b81f 	.word	0x0800b81f

080074bc <_scanf_float>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	b087      	sub	sp, #28
 80074c2:	4617      	mov	r7, r2
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	688b      	ldr	r3, [r1, #8]
 80074c8:	1e5a      	subs	r2, r3, #1
 80074ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80074ce:	bf83      	ittte	hi
 80074d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80074d4:	195b      	addhi	r3, r3, r5
 80074d6:	9302      	strhi	r3, [sp, #8]
 80074d8:	2300      	movls	r3, #0
 80074da:	bf86      	itte	hi
 80074dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80074e0:	608b      	strhi	r3, [r1, #8]
 80074e2:	9302      	strls	r3, [sp, #8]
 80074e4:	680b      	ldr	r3, [r1, #0]
 80074e6:	468b      	mov	fp, r1
 80074e8:	2500      	movs	r5, #0
 80074ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80074ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80074f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074f6:	4680      	mov	r8, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	465e      	mov	r6, fp
 80074fc:	46aa      	mov	sl, r5
 80074fe:	46a9      	mov	r9, r5
 8007500:	9501      	str	r5, [sp, #4]
 8007502:	68a2      	ldr	r2, [r4, #8]
 8007504:	b152      	cbz	r2, 800751c <_scanf_float+0x60>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b4e      	cmp	r3, #78	; 0x4e
 800750c:	d864      	bhi.n	80075d8 <_scanf_float+0x11c>
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d83c      	bhi.n	800758c <_scanf_float+0xd0>
 8007512:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007516:	b2c8      	uxtb	r0, r1
 8007518:	280e      	cmp	r0, #14
 800751a:	d93a      	bls.n	8007592 <_scanf_float+0xd6>
 800751c:	f1b9 0f00 	cmp.w	r9, #0
 8007520:	d003      	beq.n	800752a <_scanf_float+0x6e>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800752e:	f1ba 0f01 	cmp.w	sl, #1
 8007532:	f200 8113 	bhi.w	800775c <_scanf_float+0x2a0>
 8007536:	455e      	cmp	r6, fp
 8007538:	f200 8105 	bhi.w	8007746 <_scanf_float+0x28a>
 800753c:	2501      	movs	r5, #1
 800753e:	4628      	mov	r0, r5
 8007540:	b007      	add	sp, #28
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800754a:	2a0d      	cmp	r2, #13
 800754c:	d8e6      	bhi.n	800751c <_scanf_float+0x60>
 800754e:	a101      	add	r1, pc, #4	; (adr r1, 8007554 <_scanf_float+0x98>)
 8007550:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007554:	08007693 	.word	0x08007693
 8007558:	0800751d 	.word	0x0800751d
 800755c:	0800751d 	.word	0x0800751d
 8007560:	0800751d 	.word	0x0800751d
 8007564:	080076f3 	.word	0x080076f3
 8007568:	080076cb 	.word	0x080076cb
 800756c:	0800751d 	.word	0x0800751d
 8007570:	0800751d 	.word	0x0800751d
 8007574:	080076a1 	.word	0x080076a1
 8007578:	0800751d 	.word	0x0800751d
 800757c:	0800751d 	.word	0x0800751d
 8007580:	0800751d 	.word	0x0800751d
 8007584:	0800751d 	.word	0x0800751d
 8007588:	08007659 	.word	0x08007659
 800758c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007590:	e7db      	b.n	800754a <_scanf_float+0x8e>
 8007592:	290e      	cmp	r1, #14
 8007594:	d8c2      	bhi.n	800751c <_scanf_float+0x60>
 8007596:	a001      	add	r0, pc, #4	; (adr r0, 800759c <_scanf_float+0xe0>)
 8007598:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800759c:	0800764b 	.word	0x0800764b
 80075a0:	0800751d 	.word	0x0800751d
 80075a4:	0800764b 	.word	0x0800764b
 80075a8:	080076df 	.word	0x080076df
 80075ac:	0800751d 	.word	0x0800751d
 80075b0:	080075f9 	.word	0x080075f9
 80075b4:	08007635 	.word	0x08007635
 80075b8:	08007635 	.word	0x08007635
 80075bc:	08007635 	.word	0x08007635
 80075c0:	08007635 	.word	0x08007635
 80075c4:	08007635 	.word	0x08007635
 80075c8:	08007635 	.word	0x08007635
 80075cc:	08007635 	.word	0x08007635
 80075d0:	08007635 	.word	0x08007635
 80075d4:	08007635 	.word	0x08007635
 80075d8:	2b6e      	cmp	r3, #110	; 0x6e
 80075da:	d809      	bhi.n	80075f0 <_scanf_float+0x134>
 80075dc:	2b60      	cmp	r3, #96	; 0x60
 80075de:	d8b2      	bhi.n	8007546 <_scanf_float+0x8a>
 80075e0:	2b54      	cmp	r3, #84	; 0x54
 80075e2:	d077      	beq.n	80076d4 <_scanf_float+0x218>
 80075e4:	2b59      	cmp	r3, #89	; 0x59
 80075e6:	d199      	bne.n	800751c <_scanf_float+0x60>
 80075e8:	2d07      	cmp	r5, #7
 80075ea:	d197      	bne.n	800751c <_scanf_float+0x60>
 80075ec:	2508      	movs	r5, #8
 80075ee:	e029      	b.n	8007644 <_scanf_float+0x188>
 80075f0:	2b74      	cmp	r3, #116	; 0x74
 80075f2:	d06f      	beq.n	80076d4 <_scanf_float+0x218>
 80075f4:	2b79      	cmp	r3, #121	; 0x79
 80075f6:	e7f6      	b.n	80075e6 <_scanf_float+0x12a>
 80075f8:	6821      	ldr	r1, [r4, #0]
 80075fa:	05c8      	lsls	r0, r1, #23
 80075fc:	d51a      	bpl.n	8007634 <_scanf_float+0x178>
 80075fe:	9b02      	ldr	r3, [sp, #8]
 8007600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007604:	6021      	str	r1, [r4, #0]
 8007606:	f109 0901 	add.w	r9, r9, #1
 800760a:	b11b      	cbz	r3, 8007614 <_scanf_float+0x158>
 800760c:	3b01      	subs	r3, #1
 800760e:	3201      	adds	r2, #1
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	60a2      	str	r2, [r4, #8]
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	3301      	adds	r3, #1
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3b01      	subs	r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	607b      	str	r3, [r7, #4]
 8007628:	f340 8084 	ble.w	8007734 <_scanf_float+0x278>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	e766      	b.n	8007502 <_scanf_float+0x46>
 8007634:	eb1a 0f05 	cmn.w	sl, r5
 8007638:	f47f af70 	bne.w	800751c <_scanf_float+0x60>
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	f806 3b01 	strb.w	r3, [r6], #1
 8007648:	e7e4      	b.n	8007614 <_scanf_float+0x158>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	0610      	lsls	r0, r2, #24
 800764e:	f57f af65 	bpl.w	800751c <_scanf_float+0x60>
 8007652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007656:	e7f4      	b.n	8007642 <_scanf_float+0x186>
 8007658:	f1ba 0f00 	cmp.w	sl, #0
 800765c:	d10e      	bne.n	800767c <_scanf_float+0x1c0>
 800765e:	f1b9 0f00 	cmp.w	r9, #0
 8007662:	d10e      	bne.n	8007682 <_scanf_float+0x1c6>
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800766a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800766e:	d108      	bne.n	8007682 <_scanf_float+0x1c6>
 8007670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007674:	6022      	str	r2, [r4, #0]
 8007676:	f04f 0a01 	mov.w	sl, #1
 800767a:	e7e3      	b.n	8007644 <_scanf_float+0x188>
 800767c:	f1ba 0f02 	cmp.w	sl, #2
 8007680:	d055      	beq.n	800772e <_scanf_float+0x272>
 8007682:	2d01      	cmp	r5, #1
 8007684:	d002      	beq.n	800768c <_scanf_float+0x1d0>
 8007686:	2d04      	cmp	r5, #4
 8007688:	f47f af48 	bne.w	800751c <_scanf_float+0x60>
 800768c:	3501      	adds	r5, #1
 800768e:	b2ed      	uxtb	r5, r5
 8007690:	e7d8      	b.n	8007644 <_scanf_float+0x188>
 8007692:	f1ba 0f01 	cmp.w	sl, #1
 8007696:	f47f af41 	bne.w	800751c <_scanf_float+0x60>
 800769a:	f04f 0a02 	mov.w	sl, #2
 800769e:	e7d1      	b.n	8007644 <_scanf_float+0x188>
 80076a0:	b97d      	cbnz	r5, 80076c2 <_scanf_float+0x206>
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	f47f af3c 	bne.w	8007522 <_scanf_float+0x66>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076b4:	f47f af39 	bne.w	800752a <_scanf_float+0x6e>
 80076b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	2501      	movs	r5, #1
 80076c0:	e7c0      	b.n	8007644 <_scanf_float+0x188>
 80076c2:	2d03      	cmp	r5, #3
 80076c4:	d0e2      	beq.n	800768c <_scanf_float+0x1d0>
 80076c6:	2d05      	cmp	r5, #5
 80076c8:	e7de      	b.n	8007688 <_scanf_float+0x1cc>
 80076ca:	2d02      	cmp	r5, #2
 80076cc:	f47f af26 	bne.w	800751c <_scanf_float+0x60>
 80076d0:	2503      	movs	r5, #3
 80076d2:	e7b7      	b.n	8007644 <_scanf_float+0x188>
 80076d4:	2d06      	cmp	r5, #6
 80076d6:	f47f af21 	bne.w	800751c <_scanf_float+0x60>
 80076da:	2507      	movs	r5, #7
 80076dc:	e7b2      	b.n	8007644 <_scanf_float+0x188>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	0591      	lsls	r1, r2, #22
 80076e2:	f57f af1b 	bpl.w	800751c <_scanf_float+0x60>
 80076e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80076ea:	6022      	str	r2, [r4, #0]
 80076ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80076f0:	e7a8      	b.n	8007644 <_scanf_float+0x188>
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80076f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076fc:	d006      	beq.n	800770c <_scanf_float+0x250>
 80076fe:	0550      	lsls	r0, r2, #21
 8007700:	f57f af0c 	bpl.w	800751c <_scanf_float+0x60>
 8007704:	f1b9 0f00 	cmp.w	r9, #0
 8007708:	f43f af0f 	beq.w	800752a <_scanf_float+0x6e>
 800770c:	0591      	lsls	r1, r2, #22
 800770e:	bf58      	it	pl
 8007710:	9901      	ldrpl	r1, [sp, #4]
 8007712:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007716:	bf58      	it	pl
 8007718:	eba9 0101 	subpl.w	r1, r9, r1
 800771c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007720:	bf58      	it	pl
 8007722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	f04f 0900 	mov.w	r9, #0
 800772c:	e78a      	b.n	8007644 <_scanf_float+0x188>
 800772e:	f04f 0a03 	mov.w	sl, #3
 8007732:	e787      	b.n	8007644 <_scanf_float+0x188>
 8007734:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007738:	4639      	mov	r1, r7
 800773a:	4640      	mov	r0, r8
 800773c:	4798      	blx	r3
 800773e:	2800      	cmp	r0, #0
 8007740:	f43f aedf 	beq.w	8007502 <_scanf_float+0x46>
 8007744:	e6ea      	b.n	800751c <_scanf_float+0x60>
 8007746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800774a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800774e:	463a      	mov	r2, r7
 8007750:	4640      	mov	r0, r8
 8007752:	4798      	blx	r3
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	3b01      	subs	r3, #1
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	e6ec      	b.n	8007536 <_scanf_float+0x7a>
 800775c:	1e6b      	subs	r3, r5, #1
 800775e:	2b06      	cmp	r3, #6
 8007760:	d825      	bhi.n	80077ae <_scanf_float+0x2f2>
 8007762:	2d02      	cmp	r5, #2
 8007764:	d836      	bhi.n	80077d4 <_scanf_float+0x318>
 8007766:	455e      	cmp	r6, fp
 8007768:	f67f aee8 	bls.w	800753c <_scanf_float+0x80>
 800776c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007770:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007774:	463a      	mov	r2, r7
 8007776:	4640      	mov	r0, r8
 8007778:	4798      	blx	r3
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	3b01      	subs	r3, #1
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	e7f1      	b.n	8007766 <_scanf_float+0x2aa>
 8007782:	9802      	ldr	r0, [sp, #8]
 8007784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007788:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800778c:	9002      	str	r0, [sp, #8]
 800778e:	463a      	mov	r2, r7
 8007790:	4640      	mov	r0, r8
 8007792:	4798      	blx	r3
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	3b01      	subs	r3, #1
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800779e:	fa5f fa8a 	uxtb.w	sl, sl
 80077a2:	f1ba 0f02 	cmp.w	sl, #2
 80077a6:	d1ec      	bne.n	8007782 <_scanf_float+0x2c6>
 80077a8:	3d03      	subs	r5, #3
 80077aa:	b2ed      	uxtb	r5, r5
 80077ac:	1b76      	subs	r6, r6, r5
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	05da      	lsls	r2, r3, #23
 80077b2:	d52f      	bpl.n	8007814 <_scanf_float+0x358>
 80077b4:	055b      	lsls	r3, r3, #21
 80077b6:	d510      	bpl.n	80077da <_scanf_float+0x31e>
 80077b8:	455e      	cmp	r6, fp
 80077ba:	f67f aebf 	bls.w	800753c <_scanf_float+0x80>
 80077be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077c6:	463a      	mov	r2, r7
 80077c8:	4640      	mov	r0, r8
 80077ca:	4798      	blx	r3
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	e7f1      	b.n	80077b8 <_scanf_float+0x2fc>
 80077d4:	46aa      	mov	sl, r5
 80077d6:	9602      	str	r6, [sp, #8]
 80077d8:	e7df      	b.n	800779a <_scanf_float+0x2de>
 80077da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	2965      	cmp	r1, #101	; 0x65
 80077e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80077e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	d00c      	beq.n	8007808 <_scanf_float+0x34c>
 80077ee:	2945      	cmp	r1, #69	; 0x45
 80077f0:	d00a      	beq.n	8007808 <_scanf_float+0x34c>
 80077f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077f6:	463a      	mov	r2, r7
 80077f8:	4640      	mov	r0, r8
 80077fa:	4798      	blx	r3
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007802:	3b01      	subs	r3, #1
 8007804:	1eb5      	subs	r5, r6, #2
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800780c:	463a      	mov	r2, r7
 800780e:	4640      	mov	r0, r8
 8007810:	4798      	blx	r3
 8007812:	462e      	mov	r6, r5
 8007814:	6825      	ldr	r5, [r4, #0]
 8007816:	f015 0510 	ands.w	r5, r5, #16
 800781a:	d159      	bne.n	80078d0 <_scanf_float+0x414>
 800781c:	7035      	strb	r5, [r6, #0]
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007828:	d11b      	bne.n	8007862 <_scanf_float+0x3a6>
 800782a:	9b01      	ldr	r3, [sp, #4]
 800782c:	454b      	cmp	r3, r9
 800782e:	eba3 0209 	sub.w	r2, r3, r9
 8007832:	d123      	bne.n	800787c <_scanf_float+0x3c0>
 8007834:	2200      	movs	r2, #0
 8007836:	4659      	mov	r1, fp
 8007838:	4640      	mov	r0, r8
 800783a:	f000 fecb 	bl	80085d4 <_strtod_r>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	f012 0f02 	tst.w	r2, #2
 8007846:	ec57 6b10 	vmov	r6, r7, d0
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	d021      	beq.n	8007892 <_scanf_float+0x3d6>
 800784e:	9903      	ldr	r1, [sp, #12]
 8007850:	1d1a      	adds	r2, r3, #4
 8007852:	600a      	str	r2, [r1, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	e9c3 6700 	strd	r6, r7, [r3]
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	3301      	adds	r3, #1
 800785e:	60e3      	str	r3, [r4, #12]
 8007860:	e66d      	b.n	800753e <_scanf_float+0x82>
 8007862:	9b04      	ldr	r3, [sp, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0e5      	beq.n	8007834 <_scanf_float+0x378>
 8007868:	9905      	ldr	r1, [sp, #20]
 800786a:	230a      	movs	r3, #10
 800786c:	462a      	mov	r2, r5
 800786e:	3101      	adds	r1, #1
 8007870:	4640      	mov	r0, r8
 8007872:	f000 ff37 	bl	80086e4 <_strtol_r>
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	9e05      	ldr	r6, [sp, #20]
 800787a:	1ac2      	subs	r2, r0, r3
 800787c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007880:	429e      	cmp	r6, r3
 8007882:	bf28      	it	cs
 8007884:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007888:	4912      	ldr	r1, [pc, #72]	; (80078d4 <_scanf_float+0x418>)
 800788a:	4630      	mov	r0, r6
 800788c:	f000 f860 	bl	8007950 <siprintf>
 8007890:	e7d0      	b.n	8007834 <_scanf_float+0x378>
 8007892:	9903      	ldr	r1, [sp, #12]
 8007894:	f012 0f04 	tst.w	r2, #4
 8007898:	f103 0204 	add.w	r2, r3, #4
 800789c:	600a      	str	r2, [r1, #0]
 800789e:	d1d9      	bne.n	8007854 <_scanf_float+0x398>
 80078a0:	f8d3 8000 	ldr.w	r8, [r3]
 80078a4:	ee10 2a10 	vmov	r2, s0
 80078a8:	ee10 0a10 	vmov	r0, s0
 80078ac:	463b      	mov	r3, r7
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f9 f93c 	bl	8000b2c <__aeabi_dcmpun>
 80078b4:	b128      	cbz	r0, 80078c2 <_scanf_float+0x406>
 80078b6:	4808      	ldr	r0, [pc, #32]	; (80078d8 <_scanf_float+0x41c>)
 80078b8:	f000 f810 	bl	80078dc <nanf>
 80078bc:	ed88 0a00 	vstr	s0, [r8]
 80078c0:	e7cb      	b.n	800785a <_scanf_float+0x39e>
 80078c2:	4630      	mov	r0, r6
 80078c4:	4639      	mov	r1, r7
 80078c6:	f7f9 f98f 	bl	8000be8 <__aeabi_d2f>
 80078ca:	f8c8 0000 	str.w	r0, [r8]
 80078ce:	e7c4      	b.n	800785a <_scanf_float+0x39e>
 80078d0:	2500      	movs	r5, #0
 80078d2:	e634      	b.n	800753e <_scanf_float+0x82>
 80078d4:	0800b830 	.word	0x0800b830
 80078d8:	0800bc38 	.word	0x0800bc38

080078dc <nanf>:
 80078dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078e4 <nanf+0x8>
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	7fc00000 	.word	0x7fc00000

080078e8 <sniprintf>:
 80078e8:	b40c      	push	{r2, r3}
 80078ea:	b530      	push	{r4, r5, lr}
 80078ec:	4b17      	ldr	r3, [pc, #92]	; (800794c <sniprintf+0x64>)
 80078ee:	1e0c      	subs	r4, r1, #0
 80078f0:	681d      	ldr	r5, [r3, #0]
 80078f2:	b09d      	sub	sp, #116	; 0x74
 80078f4:	da08      	bge.n	8007908 <sniprintf+0x20>
 80078f6:	238b      	movs	r3, #139	; 0x8b
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	f04f 30ff 	mov.w	r0, #4294967295
 80078fe:	b01d      	add	sp, #116	; 0x74
 8007900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007904:	b002      	add	sp, #8
 8007906:	4770      	bx	lr
 8007908:	f44f 7302 	mov.w	r3, #520	; 0x208
 800790c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007910:	bf14      	ite	ne
 8007912:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007916:	4623      	moveq	r3, r4
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	9307      	str	r3, [sp, #28]
 800791c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007920:	9002      	str	r0, [sp, #8]
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800792a:	ab21      	add	r3, sp, #132	; 0x84
 800792c:	a902      	add	r1, sp, #8
 800792e:	4628      	mov	r0, r5
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f002 ff03 	bl	800a73c <_svfiprintf_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	bfbc      	itt	lt
 800793a:	238b      	movlt	r3, #139	; 0x8b
 800793c:	602b      	strlt	r3, [r5, #0]
 800793e:	2c00      	cmp	r4, #0
 8007940:	d0dd      	beq.n	80078fe <sniprintf+0x16>
 8007942:	9b02      	ldr	r3, [sp, #8]
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e7d9      	b.n	80078fe <sniprintf+0x16>
 800794a:	bf00      	nop
 800794c:	2000000c 	.word	0x2000000c

08007950 <siprintf>:
 8007950:	b40e      	push	{r1, r2, r3}
 8007952:	b500      	push	{lr}
 8007954:	b09c      	sub	sp, #112	; 0x70
 8007956:	ab1d      	add	r3, sp, #116	; 0x74
 8007958:	9002      	str	r0, [sp, #8]
 800795a:	9006      	str	r0, [sp, #24]
 800795c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007960:	4809      	ldr	r0, [pc, #36]	; (8007988 <siprintf+0x38>)
 8007962:	9107      	str	r1, [sp, #28]
 8007964:	9104      	str	r1, [sp, #16]
 8007966:	4909      	ldr	r1, [pc, #36]	; (800798c <siprintf+0x3c>)
 8007968:	f853 2b04 	ldr.w	r2, [r3], #4
 800796c:	9105      	str	r1, [sp, #20]
 800796e:	6800      	ldr	r0, [r0, #0]
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	a902      	add	r1, sp, #8
 8007974:	f002 fee2 	bl	800a73c <_svfiprintf_r>
 8007978:	9b02      	ldr	r3, [sp, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	b01c      	add	sp, #112	; 0x70
 8007980:	f85d eb04 	ldr.w	lr, [sp], #4
 8007984:	b003      	add	sp, #12
 8007986:	4770      	bx	lr
 8007988:	2000000c 	.word	0x2000000c
 800798c:	ffff0208 	.word	0xffff0208

08007990 <sulp>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	ec45 4b10 	vmov	d0, r4, r5
 800799a:	4616      	mov	r6, r2
 800799c:	f002 fc2c 	bl	800a1f8 <__ulp>
 80079a0:	ec51 0b10 	vmov	r0, r1, d0
 80079a4:	b17e      	cbz	r6, 80079c6 <sulp+0x36>
 80079a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dd09      	ble.n	80079c6 <sulp+0x36>
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079b8:	2400      	movs	r4, #0
 80079ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079be:	4622      	mov	r2, r4
 80079c0:	462b      	mov	r3, r5
 80079c2:	f7f8 fe19 	bl	80005f8 <__aeabi_dmul>
 80079c6:	bd70      	pop	{r4, r5, r6, pc}

080079c8 <_strtod_l>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	ed2d 8b02 	vpush	{d8}
 80079d0:	b09d      	sub	sp, #116	; 0x74
 80079d2:	461f      	mov	r7, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	9318      	str	r3, [sp, #96]	; 0x60
 80079d8:	4ba2      	ldr	r3, [pc, #648]	; (8007c64 <_strtod_l+0x29c>)
 80079da:	9213      	str	r2, [sp, #76]	; 0x4c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	4604      	mov	r4, r0
 80079e2:	4618      	mov	r0, r3
 80079e4:	4688      	mov	r8, r1
 80079e6:	f7f8 fbf3 	bl	80001d0 <strlen>
 80079ea:	f04f 0a00 	mov.w	sl, #0
 80079ee:	4605      	mov	r5, r0
 80079f0:	f04f 0b00 	mov.w	fp, #0
 80079f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80079f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079fa:	781a      	ldrb	r2, [r3, #0]
 80079fc:	2a2b      	cmp	r2, #43	; 0x2b
 80079fe:	d04e      	beq.n	8007a9e <_strtod_l+0xd6>
 8007a00:	d83b      	bhi.n	8007a7a <_strtod_l+0xb2>
 8007a02:	2a0d      	cmp	r2, #13
 8007a04:	d834      	bhi.n	8007a70 <_strtod_l+0xa8>
 8007a06:	2a08      	cmp	r2, #8
 8007a08:	d834      	bhi.n	8007a74 <_strtod_l+0xac>
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d03e      	beq.n	8007a8c <_strtod_l+0xc4>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	930a      	str	r3, [sp, #40]	; 0x28
 8007a12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a14:	7833      	ldrb	r3, [r6, #0]
 8007a16:	2b30      	cmp	r3, #48	; 0x30
 8007a18:	f040 80b0 	bne.w	8007b7c <_strtod_l+0x1b4>
 8007a1c:	7873      	ldrb	r3, [r6, #1]
 8007a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a22:	2b58      	cmp	r3, #88	; 0x58
 8007a24:	d168      	bne.n	8007af8 <_strtod_l+0x130>
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	ab18      	add	r3, sp, #96	; 0x60
 8007a2c:	9702      	str	r7, [sp, #8]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	4a8d      	ldr	r2, [pc, #564]	; (8007c68 <_strtod_l+0x2a0>)
 8007a32:	ab19      	add	r3, sp, #100	; 0x64
 8007a34:	a917      	add	r1, sp, #92	; 0x5c
 8007a36:	4620      	mov	r0, r4
 8007a38:	f001 fd38 	bl	80094ac <__gethex>
 8007a3c:	f010 0707 	ands.w	r7, r0, #7
 8007a40:	4605      	mov	r5, r0
 8007a42:	d005      	beq.n	8007a50 <_strtod_l+0x88>
 8007a44:	2f06      	cmp	r7, #6
 8007a46:	d12c      	bne.n	8007aa2 <_strtod_l+0xda>
 8007a48:	3601      	adds	r6, #1
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 8590 	bne.w	8008578 <_strtod_l+0xbb0>
 8007a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5a:	b1eb      	cbz	r3, 8007a98 <_strtod_l+0xd0>
 8007a5c:	4652      	mov	r2, sl
 8007a5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a62:	ec43 2b10 	vmov	d0, r2, r3
 8007a66:	b01d      	add	sp, #116	; 0x74
 8007a68:	ecbd 8b02 	vpop	{d8}
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	2a20      	cmp	r2, #32
 8007a72:	d1cc      	bne.n	8007a0e <_strtod_l+0x46>
 8007a74:	3301      	adds	r3, #1
 8007a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a78:	e7be      	b.n	80079f8 <_strtod_l+0x30>
 8007a7a:	2a2d      	cmp	r2, #45	; 0x2d
 8007a7c:	d1c7      	bne.n	8007a0e <_strtod_l+0x46>
 8007a7e:	2201      	movs	r2, #1
 8007a80:	920a      	str	r2, [sp, #40]	; 0x28
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1c2      	bne.n	8007a12 <_strtod_l+0x4a>
 8007a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f040 856e 	bne.w	8008574 <_strtod_l+0xbac>
 8007a98:	4652      	mov	r2, sl
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	e7e1      	b.n	8007a62 <_strtod_l+0x9a>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	e7ee      	b.n	8007a80 <_strtod_l+0xb8>
 8007aa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007aa4:	b13a      	cbz	r2, 8007ab6 <_strtod_l+0xee>
 8007aa6:	2135      	movs	r1, #53	; 0x35
 8007aa8:	a81a      	add	r0, sp, #104	; 0x68
 8007aaa:	f002 fcb0 	bl	800a40e <__copybits>
 8007aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f002 f86f 	bl	8009b94 <_Bfree>
 8007ab6:	3f01      	subs	r7, #1
 8007ab8:	2f04      	cmp	r7, #4
 8007aba:	d806      	bhi.n	8007aca <_strtod_l+0x102>
 8007abc:	e8df f007 	tbb	[pc, r7]
 8007ac0:	1714030a 	.word	0x1714030a
 8007ac4:	0a          	.byte	0x0a
 8007ac5:	00          	.byte	0x00
 8007ac6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007aca:	0728      	lsls	r0, r5, #28
 8007acc:	d5c0      	bpl.n	8007a50 <_strtod_l+0x88>
 8007ace:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007ad2:	e7bd      	b.n	8007a50 <_strtod_l+0x88>
 8007ad4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007ad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ade:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ae2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ae6:	e7f0      	b.n	8007aca <_strtod_l+0x102>
 8007ae8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007c6c <_strtod_l+0x2a4>
 8007aec:	e7ed      	b.n	8007aca <_strtod_l+0x102>
 8007aee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007af2:	f04f 3aff 	mov.w	sl, #4294967295
 8007af6:	e7e8      	b.n	8007aca <_strtod_l+0x102>
 8007af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007afe:	785b      	ldrb	r3, [r3, #1]
 8007b00:	2b30      	cmp	r3, #48	; 0x30
 8007b02:	d0f9      	beq.n	8007af8 <_strtod_l+0x130>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0a3      	beq.n	8007a50 <_strtod_l+0x88>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f04f 0900 	mov.w	r9, #0
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b12:	9308      	str	r3, [sp, #32]
 8007b14:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b18:	464f      	mov	r7, r9
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b1e:	7806      	ldrb	r6, [r0, #0]
 8007b20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b24:	b2d9      	uxtb	r1, r3
 8007b26:	2909      	cmp	r1, #9
 8007b28:	d92a      	bls.n	8007b80 <_strtod_l+0x1b8>
 8007b2a:	9905      	ldr	r1, [sp, #20]
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	f002 ff1f 	bl	800a970 <strncmp>
 8007b32:	b398      	cbz	r0, 8007b9c <_strtod_l+0x1d4>
 8007b34:	2000      	movs	r0, #0
 8007b36:	4632      	mov	r2, r6
 8007b38:	463d      	mov	r5, r7
 8007b3a:	9005      	str	r0, [sp, #20]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2a65      	cmp	r2, #101	; 0x65
 8007b40:	d001      	beq.n	8007b46 <_strtod_l+0x17e>
 8007b42:	2a45      	cmp	r2, #69	; 0x45
 8007b44:	d118      	bne.n	8007b78 <_strtod_l+0x1b0>
 8007b46:	b91d      	cbnz	r5, 8007b50 <_strtod_l+0x188>
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	4302      	orrs	r2, r0
 8007b4c:	d09e      	beq.n	8007a8c <_strtod_l+0xc4>
 8007b4e:	2500      	movs	r5, #0
 8007b50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007b54:	f108 0201 	add.w	r2, r8, #1
 8007b58:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007b5e:	2a2b      	cmp	r2, #43	; 0x2b
 8007b60:	d075      	beq.n	8007c4e <_strtod_l+0x286>
 8007b62:	2a2d      	cmp	r2, #45	; 0x2d
 8007b64:	d07b      	beq.n	8007c5e <_strtod_l+0x296>
 8007b66:	f04f 0c00 	mov.w	ip, #0
 8007b6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b6e:	2909      	cmp	r1, #9
 8007b70:	f240 8082 	bls.w	8007c78 <_strtod_l+0x2b0>
 8007b74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b78:	2600      	movs	r6, #0
 8007b7a:	e09d      	b.n	8007cb8 <_strtod_l+0x2f0>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e7c4      	b.n	8007b0a <_strtod_l+0x142>
 8007b80:	2f08      	cmp	r7, #8
 8007b82:	bfd8      	it	le
 8007b84:	9907      	ldrle	r1, [sp, #28]
 8007b86:	f100 0001 	add.w	r0, r0, #1
 8007b8a:	bfda      	itte	le
 8007b8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b90:	9307      	strle	r3, [sp, #28]
 8007b92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007b96:	3701      	adds	r7, #1
 8007b98:	9017      	str	r0, [sp, #92]	; 0x5c
 8007b9a:	e7bf      	b.n	8007b1c <_strtod_l+0x154>
 8007b9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b9e:	195a      	adds	r2, r3, r5
 8007ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ba2:	5d5a      	ldrb	r2, [r3, r5]
 8007ba4:	2f00      	cmp	r7, #0
 8007ba6:	d037      	beq.n	8007c18 <_strtod_l+0x250>
 8007ba8:	9005      	str	r0, [sp, #20]
 8007baa:	463d      	mov	r5, r7
 8007bac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d912      	bls.n	8007bda <_strtod_l+0x212>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e7c2      	b.n	8007b3e <_strtod_l+0x176>
 8007bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bbe:	785a      	ldrb	r2, [r3, #1]
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	2a30      	cmp	r2, #48	; 0x30
 8007bc4:	d0f8      	beq.n	8007bb8 <_strtod_l+0x1f0>
 8007bc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	f200 84d9 	bhi.w	8008582 <_strtod_l+0xbba>
 8007bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bd2:	9005      	str	r0, [sp, #20]
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	9308      	str	r3, [sp, #32]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	3a30      	subs	r2, #48	; 0x30
 8007bdc:	f100 0301 	add.w	r3, r0, #1
 8007be0:	d014      	beq.n	8007c0c <_strtod_l+0x244>
 8007be2:	9905      	ldr	r1, [sp, #20]
 8007be4:	4419      	add	r1, r3
 8007be6:	9105      	str	r1, [sp, #20]
 8007be8:	462b      	mov	r3, r5
 8007bea:	eb00 0e05 	add.w	lr, r0, r5
 8007bee:	210a      	movs	r1, #10
 8007bf0:	4573      	cmp	r3, lr
 8007bf2:	d113      	bne.n	8007c1c <_strtod_l+0x254>
 8007bf4:	182b      	adds	r3, r5, r0
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	f105 0501 	add.w	r5, r5, #1
 8007bfc:	4405      	add	r5, r0
 8007bfe:	dc1c      	bgt.n	8007c3a <_strtod_l+0x272>
 8007c00:	9907      	ldr	r1, [sp, #28]
 8007c02:	230a      	movs	r3, #10
 8007c04:	fb03 2301 	mla	r3, r3, r1, r2
 8007c08:	9307      	str	r3, [sp, #28]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c0e:	1c51      	adds	r1, r2, #1
 8007c10:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c12:	7852      	ldrb	r2, [r2, #1]
 8007c14:	4618      	mov	r0, r3
 8007c16:	e7c9      	b.n	8007bac <_strtod_l+0x1e4>
 8007c18:	4638      	mov	r0, r7
 8007c1a:	e7d2      	b.n	8007bc2 <_strtod_l+0x1fa>
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	dc04      	bgt.n	8007c2a <_strtod_l+0x262>
 8007c20:	9e07      	ldr	r6, [sp, #28]
 8007c22:	434e      	muls	r6, r1
 8007c24:	9607      	str	r6, [sp, #28]
 8007c26:	3301      	adds	r3, #1
 8007c28:	e7e2      	b.n	8007bf0 <_strtod_l+0x228>
 8007c2a:	f103 0c01 	add.w	ip, r3, #1
 8007c2e:	f1bc 0f10 	cmp.w	ip, #16
 8007c32:	bfd8      	it	le
 8007c34:	fb01 f909 	mulle.w	r9, r1, r9
 8007c38:	e7f5      	b.n	8007c26 <_strtod_l+0x25e>
 8007c3a:	2d10      	cmp	r5, #16
 8007c3c:	bfdc      	itt	le
 8007c3e:	230a      	movle	r3, #10
 8007c40:	fb03 2909 	mlale	r9, r3, r9, r2
 8007c44:	e7e1      	b.n	8007c0a <_strtod_l+0x242>
 8007c46:	2300      	movs	r3, #0
 8007c48:	9305      	str	r3, [sp, #20]
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e77c      	b.n	8007b48 <_strtod_l+0x180>
 8007c4e:	f04f 0c00 	mov.w	ip, #0
 8007c52:	f108 0202 	add.w	r2, r8, #2
 8007c56:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007c5c:	e785      	b.n	8007b6a <_strtod_l+0x1a2>
 8007c5e:	f04f 0c01 	mov.w	ip, #1
 8007c62:	e7f6      	b.n	8007c52 <_strtod_l+0x28a>
 8007c64:	0800ba80 	.word	0x0800ba80
 8007c68:	0800b838 	.word	0x0800b838
 8007c6c:	7ff00000 	.word	0x7ff00000
 8007c70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c72:	1c51      	adds	r1, r2, #1
 8007c74:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c76:	7852      	ldrb	r2, [r2, #1]
 8007c78:	2a30      	cmp	r2, #48	; 0x30
 8007c7a:	d0f9      	beq.n	8007c70 <_strtod_l+0x2a8>
 8007c7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c80:	2908      	cmp	r1, #8
 8007c82:	f63f af79 	bhi.w	8007b78 <_strtod_l+0x1b0>
 8007c86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007c8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c8c:	9206      	str	r2, [sp, #24]
 8007c8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c90:	1c51      	adds	r1, r2, #1
 8007c92:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c94:	7852      	ldrb	r2, [r2, #1]
 8007c96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007c9a:	2e09      	cmp	r6, #9
 8007c9c:	d937      	bls.n	8007d0e <_strtod_l+0x346>
 8007c9e:	9e06      	ldr	r6, [sp, #24]
 8007ca0:	1b89      	subs	r1, r1, r6
 8007ca2:	2908      	cmp	r1, #8
 8007ca4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007ca8:	dc02      	bgt.n	8007cb0 <_strtod_l+0x2e8>
 8007caa:	4576      	cmp	r6, lr
 8007cac:	bfa8      	it	ge
 8007cae:	4676      	movge	r6, lr
 8007cb0:	f1bc 0f00 	cmp.w	ip, #0
 8007cb4:	d000      	beq.n	8007cb8 <_strtod_l+0x2f0>
 8007cb6:	4276      	negs	r6, r6
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	d14d      	bne.n	8007d58 <_strtod_l+0x390>
 8007cbc:	9904      	ldr	r1, [sp, #16]
 8007cbe:	4301      	orrs	r1, r0
 8007cc0:	f47f aec6 	bne.w	8007a50 <_strtod_l+0x88>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f47f aee1 	bne.w	8007a8c <_strtod_l+0xc4>
 8007cca:	2a69      	cmp	r2, #105	; 0x69
 8007ccc:	d027      	beq.n	8007d1e <_strtod_l+0x356>
 8007cce:	dc24      	bgt.n	8007d1a <_strtod_l+0x352>
 8007cd0:	2a49      	cmp	r2, #73	; 0x49
 8007cd2:	d024      	beq.n	8007d1e <_strtod_l+0x356>
 8007cd4:	2a4e      	cmp	r2, #78	; 0x4e
 8007cd6:	f47f aed9 	bne.w	8007a8c <_strtod_l+0xc4>
 8007cda:	499f      	ldr	r1, [pc, #636]	; (8007f58 <_strtod_l+0x590>)
 8007cdc:	a817      	add	r0, sp, #92	; 0x5c
 8007cde:	f001 fe3d 	bl	800995c <__match>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	f43f aed2 	beq.w	8007a8c <_strtod_l+0xc4>
 8007ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b28      	cmp	r3, #40	; 0x28
 8007cee:	d12d      	bne.n	8007d4c <_strtod_l+0x384>
 8007cf0:	499a      	ldr	r1, [pc, #616]	; (8007f5c <_strtod_l+0x594>)
 8007cf2:	aa1a      	add	r2, sp, #104	; 0x68
 8007cf4:	a817      	add	r0, sp, #92	; 0x5c
 8007cf6:	f001 fe45 	bl	8009984 <__hexnan>
 8007cfa:	2805      	cmp	r0, #5
 8007cfc:	d126      	bne.n	8007d4c <_strtod_l+0x384>
 8007cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d0c:	e6a0      	b.n	8007a50 <_strtod_l+0x88>
 8007d0e:	210a      	movs	r1, #10
 8007d10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d18:	e7b9      	b.n	8007c8e <_strtod_l+0x2c6>
 8007d1a:	2a6e      	cmp	r2, #110	; 0x6e
 8007d1c:	e7db      	b.n	8007cd6 <_strtod_l+0x30e>
 8007d1e:	4990      	ldr	r1, [pc, #576]	; (8007f60 <_strtod_l+0x598>)
 8007d20:	a817      	add	r0, sp, #92	; 0x5c
 8007d22:	f001 fe1b 	bl	800995c <__match>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f aeb0 	beq.w	8007a8c <_strtod_l+0xc4>
 8007d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d2e:	498d      	ldr	r1, [pc, #564]	; (8007f64 <_strtod_l+0x59c>)
 8007d30:	3b01      	subs	r3, #1
 8007d32:	a817      	add	r0, sp, #92	; 0x5c
 8007d34:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d36:	f001 fe11 	bl	800995c <__match>
 8007d3a:	b910      	cbnz	r0, 8007d42 <_strtod_l+0x37a>
 8007d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d3e:	3301      	adds	r3, #1
 8007d40:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007f74 <_strtod_l+0x5ac>
 8007d46:	f04f 0a00 	mov.w	sl, #0
 8007d4a:	e681      	b.n	8007a50 <_strtod_l+0x88>
 8007d4c:	4886      	ldr	r0, [pc, #536]	; (8007f68 <_strtod_l+0x5a0>)
 8007d4e:	f002 fdf7 	bl	800a940 <nan>
 8007d52:	ec5b ab10 	vmov	sl, fp, d0
 8007d56:	e67b      	b.n	8007a50 <_strtod_l+0x88>
 8007d58:	9b05      	ldr	r3, [sp, #20]
 8007d5a:	9807      	ldr	r0, [sp, #28]
 8007d5c:	1af3      	subs	r3, r6, r3
 8007d5e:	2f00      	cmp	r7, #0
 8007d60:	bf08      	it	eq
 8007d62:	462f      	moveq	r7, r5
 8007d64:	2d10      	cmp	r5, #16
 8007d66:	9306      	str	r3, [sp, #24]
 8007d68:	46a8      	mov	r8, r5
 8007d6a:	bfa8      	it	ge
 8007d6c:	f04f 0810 	movge.w	r8, #16
 8007d70:	f7f8 fbc8 	bl	8000504 <__aeabi_ui2d>
 8007d74:	2d09      	cmp	r5, #9
 8007d76:	4682      	mov	sl, r0
 8007d78:	468b      	mov	fp, r1
 8007d7a:	dd13      	ble.n	8007da4 <_strtod_l+0x3dc>
 8007d7c:	4b7b      	ldr	r3, [pc, #492]	; (8007f6c <_strtod_l+0x5a4>)
 8007d7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	4682      	mov	sl, r0
 8007d8c:	4648      	mov	r0, r9
 8007d8e:	468b      	mov	fp, r1
 8007d90:	f7f8 fbb8 	bl	8000504 <__aeabi_ui2d>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4650      	mov	r0, sl
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	f7f8 fa76 	bl	800028c <__adddf3>
 8007da0:	4682      	mov	sl, r0
 8007da2:	468b      	mov	fp, r1
 8007da4:	2d0f      	cmp	r5, #15
 8007da6:	dc38      	bgt.n	8007e1a <_strtod_l+0x452>
 8007da8:	9b06      	ldr	r3, [sp, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f43f ae50 	beq.w	8007a50 <_strtod_l+0x88>
 8007db0:	dd24      	ble.n	8007dfc <_strtod_l+0x434>
 8007db2:	2b16      	cmp	r3, #22
 8007db4:	dc0b      	bgt.n	8007dce <_strtod_l+0x406>
 8007db6:	496d      	ldr	r1, [pc, #436]	; (8007f6c <_strtod_l+0x5a4>)
 8007db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	f7f8 fc18 	bl	80005f8 <__aeabi_dmul>
 8007dc8:	4682      	mov	sl, r0
 8007dca:	468b      	mov	fp, r1
 8007dcc:	e640      	b.n	8007a50 <_strtod_l+0x88>
 8007dce:	9a06      	ldr	r2, [sp, #24]
 8007dd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	db20      	blt.n	8007e1a <_strtod_l+0x452>
 8007dd8:	4c64      	ldr	r4, [pc, #400]	; (8007f6c <_strtod_l+0x5a4>)
 8007dda:	f1c5 050f 	rsb	r5, r5, #15
 8007dde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007de2:	4652      	mov	r2, sl
 8007de4:	465b      	mov	r3, fp
 8007de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dea:	f7f8 fc05 	bl	80005f8 <__aeabi_dmul>
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	1b5d      	subs	r5, r3, r5
 8007df2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007dfa:	e7e3      	b.n	8007dc4 <_strtod_l+0x3fc>
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	3316      	adds	r3, #22
 8007e00:	db0b      	blt.n	8007e1a <_strtod_l+0x452>
 8007e02:	9b05      	ldr	r3, [sp, #20]
 8007e04:	1b9e      	subs	r6, r3, r6
 8007e06:	4b59      	ldr	r3, [pc, #356]	; (8007f6c <_strtod_l+0x5a4>)
 8007e08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e10:	4650      	mov	r0, sl
 8007e12:	4659      	mov	r1, fp
 8007e14:	f7f8 fd1a 	bl	800084c <__aeabi_ddiv>
 8007e18:	e7d6      	b.n	8007dc8 <_strtod_l+0x400>
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	eba5 0808 	sub.w	r8, r5, r8
 8007e20:	4498      	add	r8, r3
 8007e22:	f1b8 0f00 	cmp.w	r8, #0
 8007e26:	dd74      	ble.n	8007f12 <_strtod_l+0x54a>
 8007e28:	f018 030f 	ands.w	r3, r8, #15
 8007e2c:	d00a      	beq.n	8007e44 <_strtod_l+0x47c>
 8007e2e:	494f      	ldr	r1, [pc, #316]	; (8007f6c <_strtod_l+0x5a4>)
 8007e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e34:	4652      	mov	r2, sl
 8007e36:	465b      	mov	r3, fp
 8007e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3c:	f7f8 fbdc 	bl	80005f8 <__aeabi_dmul>
 8007e40:	4682      	mov	sl, r0
 8007e42:	468b      	mov	fp, r1
 8007e44:	f038 080f 	bics.w	r8, r8, #15
 8007e48:	d04f      	beq.n	8007eea <_strtod_l+0x522>
 8007e4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e4e:	dd22      	ble.n	8007e96 <_strtod_l+0x4ce>
 8007e50:	2500      	movs	r5, #0
 8007e52:	462e      	mov	r6, r5
 8007e54:	9507      	str	r5, [sp, #28]
 8007e56:	9505      	str	r5, [sp, #20]
 8007e58:	2322      	movs	r3, #34	; 0x22
 8007e5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007f74 <_strtod_l+0x5ac>
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f43f adf2 	beq.w	8007a50 <_strtod_l+0x88>
 8007e6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f001 fe90 	bl	8009b94 <_Bfree>
 8007e74:	9905      	ldr	r1, [sp, #20]
 8007e76:	4620      	mov	r0, r4
 8007e78:	f001 fe8c 	bl	8009b94 <_Bfree>
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f001 fe88 	bl	8009b94 <_Bfree>
 8007e84:	9907      	ldr	r1, [sp, #28]
 8007e86:	4620      	mov	r0, r4
 8007e88:	f001 fe84 	bl	8009b94 <_Bfree>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f001 fe80 	bl	8009b94 <_Bfree>
 8007e94:	e5dc      	b.n	8007a50 <_strtod_l+0x88>
 8007e96:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <_strtod_l+0x5a8>)
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	4659      	mov	r1, fp
 8007ea4:	4699      	mov	r9, r3
 8007ea6:	f1b8 0f01 	cmp.w	r8, #1
 8007eaa:	dc21      	bgt.n	8007ef0 <_strtod_l+0x528>
 8007eac:	b10b      	cbz	r3, 8007eb2 <_strtod_l+0x4ea>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	468b      	mov	fp, r1
 8007eb2:	4b2f      	ldr	r3, [pc, #188]	; (8007f70 <_strtod_l+0x5a8>)
 8007eb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007eb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	465b      	mov	r3, fp
 8007ec0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007ec4:	f7f8 fb98 	bl	80005f8 <__aeabi_dmul>
 8007ec8:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <_strtod_l+0x5ac>)
 8007eca:	460a      	mov	r2, r1
 8007ecc:	400b      	ands	r3, r1
 8007ece:	492a      	ldr	r1, [pc, #168]	; (8007f78 <_strtod_l+0x5b0>)
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	4682      	mov	sl, r0
 8007ed4:	d8bc      	bhi.n	8007e50 <_strtod_l+0x488>
 8007ed6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007eda:	428b      	cmp	r3, r1
 8007edc:	bf86      	itte	hi
 8007ede:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007f7c <_strtod_l+0x5b4>
 8007ee2:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ee6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007eea:	2300      	movs	r3, #0
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	e084      	b.n	8007ffa <_strtod_l+0x632>
 8007ef0:	f018 0f01 	tst.w	r8, #1
 8007ef4:	d005      	beq.n	8007f02 <_strtod_l+0x53a>
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 fb7c 	bl	80005f8 <__aeabi_dmul>
 8007f00:	2301      	movs	r3, #1
 8007f02:	9a04      	ldr	r2, [sp, #16]
 8007f04:	3208      	adds	r2, #8
 8007f06:	f109 0901 	add.w	r9, r9, #1
 8007f0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f0e:	9204      	str	r2, [sp, #16]
 8007f10:	e7c9      	b.n	8007ea6 <_strtod_l+0x4de>
 8007f12:	d0ea      	beq.n	8007eea <_strtod_l+0x522>
 8007f14:	f1c8 0800 	rsb	r8, r8, #0
 8007f18:	f018 020f 	ands.w	r2, r8, #15
 8007f1c:	d00a      	beq.n	8007f34 <_strtod_l+0x56c>
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <_strtod_l+0x5a4>)
 8007f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f24:	4650      	mov	r0, sl
 8007f26:	4659      	mov	r1, fp
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 fc8e 	bl	800084c <__aeabi_ddiv>
 8007f30:	4682      	mov	sl, r0
 8007f32:	468b      	mov	fp, r1
 8007f34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f38:	d0d7      	beq.n	8007eea <_strtod_l+0x522>
 8007f3a:	f1b8 0f1f 	cmp.w	r8, #31
 8007f3e:	dd1f      	ble.n	8007f80 <_strtod_l+0x5b8>
 8007f40:	2500      	movs	r5, #0
 8007f42:	462e      	mov	r6, r5
 8007f44:	9507      	str	r5, [sp, #28]
 8007f46:	9505      	str	r5, [sp, #20]
 8007f48:	2322      	movs	r3, #34	; 0x22
 8007f4a:	f04f 0a00 	mov.w	sl, #0
 8007f4e:	f04f 0b00 	mov.w	fp, #0
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	e786      	b.n	8007e64 <_strtod_l+0x49c>
 8007f56:	bf00      	nop
 8007f58:	0800b809 	.word	0x0800b809
 8007f5c:	0800b84c 	.word	0x0800b84c
 8007f60:	0800b801 	.word	0x0800b801
 8007f64:	0800b98c 	.word	0x0800b98c
 8007f68:	0800bc38 	.word	0x0800bc38
 8007f6c:	0800bb18 	.word	0x0800bb18
 8007f70:	0800baf0 	.word	0x0800baf0
 8007f74:	7ff00000 	.word	0x7ff00000
 8007f78:	7ca00000 	.word	0x7ca00000
 8007f7c:	7fefffff 	.word	0x7fefffff
 8007f80:	f018 0310 	ands.w	r3, r8, #16
 8007f84:	bf18      	it	ne
 8007f86:	236a      	movne	r3, #106	; 0x6a
 8007f88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008338 <_strtod_l+0x970>
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	4650      	mov	r0, sl
 8007f90:	4659      	mov	r1, fp
 8007f92:	2300      	movs	r3, #0
 8007f94:	f018 0f01 	tst.w	r8, #1
 8007f98:	d004      	beq.n	8007fa4 <_strtod_l+0x5dc>
 8007f9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007f9e:	f7f8 fb2b 	bl	80005f8 <__aeabi_dmul>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007fa8:	f109 0908 	add.w	r9, r9, #8
 8007fac:	d1f2      	bne.n	8007f94 <_strtod_l+0x5cc>
 8007fae:	b10b      	cbz	r3, 8007fb4 <_strtod_l+0x5ec>
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	468b      	mov	fp, r1
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	b1c3      	cbz	r3, 8007fea <_strtod_l+0x622>
 8007fb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007fbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	4659      	mov	r1, fp
 8007fc4:	dd11      	ble.n	8007fea <_strtod_l+0x622>
 8007fc6:	2b1f      	cmp	r3, #31
 8007fc8:	f340 8124 	ble.w	8008214 <_strtod_l+0x84c>
 8007fcc:	2b34      	cmp	r3, #52	; 0x34
 8007fce:	bfde      	ittt	le
 8007fd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007fd4:	f04f 33ff 	movle.w	r3, #4294967295
 8007fd8:	fa03 f202 	lslle.w	r2, r3, r2
 8007fdc:	f04f 0a00 	mov.w	sl, #0
 8007fe0:	bfcc      	ite	gt
 8007fe2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007fe6:	ea02 0b01 	andle.w	fp, r2, r1
 8007fea:	2200      	movs	r2, #0
 8007fec:	2300      	movs	r3, #0
 8007fee:	4650      	mov	r0, sl
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	f7f8 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d1a2      	bne.n	8007f40 <_strtod_l+0x578>
 8007ffa:	9b07      	ldr	r3, [sp, #28]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	9908      	ldr	r1, [sp, #32]
 8008000:	462b      	mov	r3, r5
 8008002:	463a      	mov	r2, r7
 8008004:	4620      	mov	r0, r4
 8008006:	f001 fe2d 	bl	8009c64 <__s2b>
 800800a:	9007      	str	r0, [sp, #28]
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f af1f 	beq.w	8007e50 <_strtod_l+0x488>
 8008012:	9b05      	ldr	r3, [sp, #20]
 8008014:	1b9e      	subs	r6, r3, r6
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	bfb4      	ite	lt
 800801c:	4633      	movlt	r3, r6
 800801e:	2300      	movge	r3, #0
 8008020:	930c      	str	r3, [sp, #48]	; 0x30
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	2500      	movs	r5, #0
 8008026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800802a:	9312      	str	r3, [sp, #72]	; 0x48
 800802c:	462e      	mov	r6, r5
 800802e:	9b07      	ldr	r3, [sp, #28]
 8008030:	4620      	mov	r0, r4
 8008032:	6859      	ldr	r1, [r3, #4]
 8008034:	f001 fd6e 	bl	8009b14 <_Balloc>
 8008038:	9005      	str	r0, [sp, #20]
 800803a:	2800      	cmp	r0, #0
 800803c:	f43f af0c 	beq.w	8007e58 <_strtod_l+0x490>
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	3202      	adds	r2, #2
 8008046:	f103 010c 	add.w	r1, r3, #12
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	300c      	adds	r0, #12
 800804e:	f001 fd53 	bl	8009af8 <memcpy>
 8008052:	ec4b ab10 	vmov	d0, sl, fp
 8008056:	aa1a      	add	r2, sp, #104	; 0x68
 8008058:	a919      	add	r1, sp, #100	; 0x64
 800805a:	4620      	mov	r0, r4
 800805c:	f002 f948 	bl	800a2f0 <__d2b>
 8008060:	ec4b ab18 	vmov	d8, sl, fp
 8008064:	9018      	str	r0, [sp, #96]	; 0x60
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f aef6 	beq.w	8007e58 <_strtod_l+0x490>
 800806c:	2101      	movs	r1, #1
 800806e:	4620      	mov	r0, r4
 8008070:	f001 fe92 	bl	8009d98 <__i2b>
 8008074:	4606      	mov	r6, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f aeee 	beq.w	8007e58 <_strtod_l+0x490>
 800807c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800807e:	9904      	ldr	r1, [sp, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfab      	itete	ge
 8008084:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008086:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008088:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800808a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800808e:	bfac      	ite	ge
 8008090:	eb03 0902 	addge.w	r9, r3, r2
 8008094:	1ad7      	sublt	r7, r2, r3
 8008096:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008098:	eba3 0801 	sub.w	r8, r3, r1
 800809c:	4490      	add	r8, r2
 800809e:	4ba1      	ldr	r3, [pc, #644]	; (8008324 <_strtod_l+0x95c>)
 80080a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80080a4:	4598      	cmp	r8, r3
 80080a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080aa:	f280 80c7 	bge.w	800823c <_strtod_l+0x874>
 80080ae:	eba3 0308 	sub.w	r3, r3, r8
 80080b2:	2b1f      	cmp	r3, #31
 80080b4:	eba2 0203 	sub.w	r2, r2, r3
 80080b8:	f04f 0101 	mov.w	r1, #1
 80080bc:	f300 80b1 	bgt.w	8008222 <_strtod_l+0x85a>
 80080c0:	fa01 f303 	lsl.w	r3, r1, r3
 80080c4:	930d      	str	r3, [sp, #52]	; 0x34
 80080c6:	2300      	movs	r3, #0
 80080c8:	9308      	str	r3, [sp, #32]
 80080ca:	eb09 0802 	add.w	r8, r9, r2
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	45c1      	cmp	r9, r8
 80080d2:	4417      	add	r7, r2
 80080d4:	441f      	add	r7, r3
 80080d6:	464b      	mov	r3, r9
 80080d8:	bfa8      	it	ge
 80080da:	4643      	movge	r3, r8
 80080dc:	42bb      	cmp	r3, r7
 80080de:	bfa8      	it	ge
 80080e0:	463b      	movge	r3, r7
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bfc2      	ittt	gt
 80080e6:	eba8 0803 	subgt.w	r8, r8, r3
 80080ea:	1aff      	subgt	r7, r7, r3
 80080ec:	eba9 0903 	subgt.w	r9, r9, r3
 80080f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dd17      	ble.n	8008126 <_strtod_l+0x75e>
 80080f6:	4631      	mov	r1, r6
 80080f8:	461a      	mov	r2, r3
 80080fa:	4620      	mov	r0, r4
 80080fc:	f001 ff0c 	bl	8009f18 <__pow5mult>
 8008100:	4606      	mov	r6, r0
 8008102:	2800      	cmp	r0, #0
 8008104:	f43f aea8 	beq.w	8007e58 <_strtod_l+0x490>
 8008108:	4601      	mov	r1, r0
 800810a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800810c:	4620      	mov	r0, r4
 800810e:	f001 fe59 	bl	8009dc4 <__multiply>
 8008112:	900b      	str	r0, [sp, #44]	; 0x2c
 8008114:	2800      	cmp	r0, #0
 8008116:	f43f ae9f 	beq.w	8007e58 <_strtod_l+0x490>
 800811a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800811c:	4620      	mov	r0, r4
 800811e:	f001 fd39 	bl	8009b94 <_Bfree>
 8008122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008124:	9318      	str	r3, [sp, #96]	; 0x60
 8008126:	f1b8 0f00 	cmp.w	r8, #0
 800812a:	f300 808c 	bgt.w	8008246 <_strtod_l+0x87e>
 800812e:	9b06      	ldr	r3, [sp, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	dd08      	ble.n	8008146 <_strtod_l+0x77e>
 8008134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008136:	9905      	ldr	r1, [sp, #20]
 8008138:	4620      	mov	r0, r4
 800813a:	f001 feed 	bl	8009f18 <__pow5mult>
 800813e:	9005      	str	r0, [sp, #20]
 8008140:	2800      	cmp	r0, #0
 8008142:	f43f ae89 	beq.w	8007e58 <_strtod_l+0x490>
 8008146:	2f00      	cmp	r7, #0
 8008148:	dd08      	ble.n	800815c <_strtod_l+0x794>
 800814a:	9905      	ldr	r1, [sp, #20]
 800814c:	463a      	mov	r2, r7
 800814e:	4620      	mov	r0, r4
 8008150:	f001 ff3c 	bl	8009fcc <__lshift>
 8008154:	9005      	str	r0, [sp, #20]
 8008156:	2800      	cmp	r0, #0
 8008158:	f43f ae7e 	beq.w	8007e58 <_strtod_l+0x490>
 800815c:	f1b9 0f00 	cmp.w	r9, #0
 8008160:	dd08      	ble.n	8008174 <_strtod_l+0x7ac>
 8008162:	4631      	mov	r1, r6
 8008164:	464a      	mov	r2, r9
 8008166:	4620      	mov	r0, r4
 8008168:	f001 ff30 	bl	8009fcc <__lshift>
 800816c:	4606      	mov	r6, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	f43f ae72 	beq.w	8007e58 <_strtod_l+0x490>
 8008174:	9a05      	ldr	r2, [sp, #20]
 8008176:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008178:	4620      	mov	r0, r4
 800817a:	f001 ffb3 	bl	800a0e4 <__mdiff>
 800817e:	4605      	mov	r5, r0
 8008180:	2800      	cmp	r0, #0
 8008182:	f43f ae69 	beq.w	8007e58 <_strtod_l+0x490>
 8008186:	68c3      	ldr	r3, [r0, #12]
 8008188:	930b      	str	r3, [sp, #44]	; 0x2c
 800818a:	2300      	movs	r3, #0
 800818c:	60c3      	str	r3, [r0, #12]
 800818e:	4631      	mov	r1, r6
 8008190:	f001 ff8c 	bl	800a0ac <__mcmp>
 8008194:	2800      	cmp	r0, #0
 8008196:	da60      	bge.n	800825a <_strtod_l+0x892>
 8008198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800819a:	ea53 030a 	orrs.w	r3, r3, sl
 800819e:	f040 8082 	bne.w	80082a6 <_strtod_l+0x8de>
 80081a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d17d      	bne.n	80082a6 <_strtod_l+0x8de>
 80081aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081ae:	0d1b      	lsrs	r3, r3, #20
 80081b0:	051b      	lsls	r3, r3, #20
 80081b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081b6:	d976      	bls.n	80082a6 <_strtod_l+0x8de>
 80081b8:	696b      	ldr	r3, [r5, #20]
 80081ba:	b913      	cbnz	r3, 80081c2 <_strtod_l+0x7fa>
 80081bc:	692b      	ldr	r3, [r5, #16]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	dd71      	ble.n	80082a6 <_strtod_l+0x8de>
 80081c2:	4629      	mov	r1, r5
 80081c4:	2201      	movs	r2, #1
 80081c6:	4620      	mov	r0, r4
 80081c8:	f001 ff00 	bl	8009fcc <__lshift>
 80081cc:	4631      	mov	r1, r6
 80081ce:	4605      	mov	r5, r0
 80081d0:	f001 ff6c 	bl	800a0ac <__mcmp>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	dd66      	ble.n	80082a6 <_strtod_l+0x8de>
 80081d8:	9904      	ldr	r1, [sp, #16]
 80081da:	4a53      	ldr	r2, [pc, #332]	; (8008328 <_strtod_l+0x960>)
 80081dc:	465b      	mov	r3, fp
 80081de:	2900      	cmp	r1, #0
 80081e0:	f000 8081 	beq.w	80082e6 <_strtod_l+0x91e>
 80081e4:	ea02 010b 	and.w	r1, r2, fp
 80081e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081ec:	dc7b      	bgt.n	80082e6 <_strtod_l+0x91e>
 80081ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081f2:	f77f aea9 	ble.w	8007f48 <_strtod_l+0x580>
 80081f6:	4b4d      	ldr	r3, [pc, #308]	; (800832c <_strtod_l+0x964>)
 80081f8:	4650      	mov	r0, sl
 80081fa:	4659      	mov	r1, fp
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7f8 f9fb 	bl	80005f8 <__aeabi_dmul>
 8008202:	460b      	mov	r3, r1
 8008204:	4303      	orrs	r3, r0
 8008206:	bf08      	it	eq
 8008208:	2322      	moveq	r3, #34	; 0x22
 800820a:	4682      	mov	sl, r0
 800820c:	468b      	mov	fp, r1
 800820e:	bf08      	it	eq
 8008210:	6023      	streq	r3, [r4, #0]
 8008212:	e62b      	b.n	8007e6c <_strtod_l+0x4a4>
 8008214:	f04f 32ff 	mov.w	r2, #4294967295
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	ea03 0a0a 	and.w	sl, r3, sl
 8008220:	e6e3      	b.n	8007fea <_strtod_l+0x622>
 8008222:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008226:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800822a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800822e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008232:	fa01 f308 	lsl.w	r3, r1, r8
 8008236:	9308      	str	r3, [sp, #32]
 8008238:	910d      	str	r1, [sp, #52]	; 0x34
 800823a:	e746      	b.n	80080ca <_strtod_l+0x702>
 800823c:	2300      	movs	r3, #0
 800823e:	9308      	str	r3, [sp, #32]
 8008240:	2301      	movs	r3, #1
 8008242:	930d      	str	r3, [sp, #52]	; 0x34
 8008244:	e741      	b.n	80080ca <_strtod_l+0x702>
 8008246:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008248:	4642      	mov	r2, r8
 800824a:	4620      	mov	r0, r4
 800824c:	f001 febe 	bl	8009fcc <__lshift>
 8008250:	9018      	str	r0, [sp, #96]	; 0x60
 8008252:	2800      	cmp	r0, #0
 8008254:	f47f af6b 	bne.w	800812e <_strtod_l+0x766>
 8008258:	e5fe      	b.n	8007e58 <_strtod_l+0x490>
 800825a:	465f      	mov	r7, fp
 800825c:	d16e      	bne.n	800833c <_strtod_l+0x974>
 800825e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008264:	b342      	cbz	r2, 80082b8 <_strtod_l+0x8f0>
 8008266:	4a32      	ldr	r2, [pc, #200]	; (8008330 <_strtod_l+0x968>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d128      	bne.n	80082be <_strtod_l+0x8f6>
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	4651      	mov	r1, sl
 8008270:	b1eb      	cbz	r3, 80082ae <_strtod_l+0x8e6>
 8008272:	4b2d      	ldr	r3, [pc, #180]	; (8008328 <_strtod_l+0x960>)
 8008274:	403b      	ands	r3, r7
 8008276:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	d819      	bhi.n	80082b4 <_strtod_l+0x8ec>
 8008280:	0d1b      	lsrs	r3, r3, #20
 8008282:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	4299      	cmp	r1, r3
 800828c:	d117      	bne.n	80082be <_strtod_l+0x8f6>
 800828e:	4b29      	ldr	r3, [pc, #164]	; (8008334 <_strtod_l+0x96c>)
 8008290:	429f      	cmp	r7, r3
 8008292:	d102      	bne.n	800829a <_strtod_l+0x8d2>
 8008294:	3101      	adds	r1, #1
 8008296:	f43f addf 	beq.w	8007e58 <_strtod_l+0x490>
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <_strtod_l+0x960>)
 800829c:	403b      	ands	r3, r7
 800829e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80082a2:	f04f 0a00 	mov.w	sl, #0
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1a4      	bne.n	80081f6 <_strtod_l+0x82e>
 80082ac:	e5de      	b.n	8007e6c <_strtod_l+0x4a4>
 80082ae:	f04f 33ff 	mov.w	r3, #4294967295
 80082b2:	e7ea      	b.n	800828a <_strtod_l+0x8c2>
 80082b4:	4613      	mov	r3, r2
 80082b6:	e7e8      	b.n	800828a <_strtod_l+0x8c2>
 80082b8:	ea53 030a 	orrs.w	r3, r3, sl
 80082bc:	d08c      	beq.n	80081d8 <_strtod_l+0x810>
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	b1db      	cbz	r3, 80082fa <_strtod_l+0x932>
 80082c2:	423b      	tst	r3, r7
 80082c4:	d0ef      	beq.n	80082a6 <_strtod_l+0x8de>
 80082c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	4650      	mov	r0, sl
 80082cc:	4659      	mov	r1, fp
 80082ce:	b1c3      	cbz	r3, 8008302 <_strtod_l+0x93a>
 80082d0:	f7ff fb5e 	bl	8007990 <sulp>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	ec51 0b18 	vmov	r0, r1, d8
 80082dc:	f7f7 ffd6 	bl	800028c <__adddf3>
 80082e0:	4682      	mov	sl, r0
 80082e2:	468b      	mov	fp, r1
 80082e4:	e7df      	b.n	80082a6 <_strtod_l+0x8de>
 80082e6:	4013      	ands	r3, r2
 80082e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80082f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80082f4:	f04f 3aff 	mov.w	sl, #4294967295
 80082f8:	e7d5      	b.n	80082a6 <_strtod_l+0x8de>
 80082fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082fc:	ea13 0f0a 	tst.w	r3, sl
 8008300:	e7e0      	b.n	80082c4 <_strtod_l+0x8fc>
 8008302:	f7ff fb45 	bl	8007990 <sulp>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	ec51 0b18 	vmov	r0, r1, d8
 800830e:	f7f7 ffbb 	bl	8000288 <__aeabi_dsub>
 8008312:	2200      	movs	r2, #0
 8008314:	2300      	movs	r3, #0
 8008316:	4682      	mov	sl, r0
 8008318:	468b      	mov	fp, r1
 800831a:	f7f8 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800831e:	2800      	cmp	r0, #0
 8008320:	d0c1      	beq.n	80082a6 <_strtod_l+0x8de>
 8008322:	e611      	b.n	8007f48 <_strtod_l+0x580>
 8008324:	fffffc02 	.word	0xfffffc02
 8008328:	7ff00000 	.word	0x7ff00000
 800832c:	39500000 	.word	0x39500000
 8008330:	000fffff 	.word	0x000fffff
 8008334:	7fefffff 	.word	0x7fefffff
 8008338:	0800b860 	.word	0x0800b860
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	f002 f832 	bl	800a3a8 <__ratio>
 8008344:	ec59 8b10 	vmov	r8, r9, d0
 8008348:	ee10 0a10 	vmov	r0, s0
 800834c:	2200      	movs	r2, #0
 800834e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008352:	4649      	mov	r1, r9
 8008354:	f7f8 fbcc 	bl	8000af0 <__aeabi_dcmple>
 8008358:	2800      	cmp	r0, #0
 800835a:	d07a      	beq.n	8008452 <_strtod_l+0xa8a>
 800835c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d04a      	beq.n	80083f8 <_strtod_l+0xa30>
 8008362:	4b95      	ldr	r3, [pc, #596]	; (80085b8 <_strtod_l+0xbf0>)
 8008364:	2200      	movs	r2, #0
 8008366:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800836a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80085b8 <_strtod_l+0xbf0>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	4b92      	ldr	r3, [pc, #584]	; (80085bc <_strtod_l+0xbf4>)
 8008374:	403b      	ands	r3, r7
 8008376:	930d      	str	r3, [sp, #52]	; 0x34
 8008378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800837a:	4b91      	ldr	r3, [pc, #580]	; (80085c0 <_strtod_l+0xbf8>)
 800837c:	429a      	cmp	r2, r3
 800837e:	f040 80b0 	bne.w	80084e2 <_strtod_l+0xb1a>
 8008382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008386:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800838a:	ec4b ab10 	vmov	d0, sl, fp
 800838e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008392:	f001 ff31 	bl	800a1f8 <__ulp>
 8008396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800839a:	ec53 2b10 	vmov	r2, r3, d0
 800839e:	f7f8 f92b 	bl	80005f8 <__aeabi_dmul>
 80083a2:	4652      	mov	r2, sl
 80083a4:	465b      	mov	r3, fp
 80083a6:	f7f7 ff71 	bl	800028c <__adddf3>
 80083aa:	460b      	mov	r3, r1
 80083ac:	4983      	ldr	r1, [pc, #524]	; (80085bc <_strtod_l+0xbf4>)
 80083ae:	4a85      	ldr	r2, [pc, #532]	; (80085c4 <_strtod_l+0xbfc>)
 80083b0:	4019      	ands	r1, r3
 80083b2:	4291      	cmp	r1, r2
 80083b4:	4682      	mov	sl, r0
 80083b6:	d960      	bls.n	800847a <_strtod_l+0xab2>
 80083b8:	ee18 3a90 	vmov	r3, s17
 80083bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d104      	bne.n	80083ce <_strtod_l+0xa06>
 80083c4:	ee18 3a10 	vmov	r3, s16
 80083c8:	3301      	adds	r3, #1
 80083ca:	f43f ad45 	beq.w	8007e58 <_strtod_l+0x490>
 80083ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80085d0 <_strtod_l+0xc08>
 80083d2:	f04f 3aff 	mov.w	sl, #4294967295
 80083d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083d8:	4620      	mov	r0, r4
 80083da:	f001 fbdb 	bl	8009b94 <_Bfree>
 80083de:	9905      	ldr	r1, [sp, #20]
 80083e0:	4620      	mov	r0, r4
 80083e2:	f001 fbd7 	bl	8009b94 <_Bfree>
 80083e6:	4631      	mov	r1, r6
 80083e8:	4620      	mov	r0, r4
 80083ea:	f001 fbd3 	bl	8009b94 <_Bfree>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4620      	mov	r0, r4
 80083f2:	f001 fbcf 	bl	8009b94 <_Bfree>
 80083f6:	e61a      	b.n	800802e <_strtod_l+0x666>
 80083f8:	f1ba 0f00 	cmp.w	sl, #0
 80083fc:	d11b      	bne.n	8008436 <_strtod_l+0xa6e>
 80083fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008402:	b9f3      	cbnz	r3, 8008442 <_strtod_l+0xa7a>
 8008404:	4b6c      	ldr	r3, [pc, #432]	; (80085b8 <_strtod_l+0xbf0>)
 8008406:	2200      	movs	r2, #0
 8008408:	4640      	mov	r0, r8
 800840a:	4649      	mov	r1, r9
 800840c:	f7f8 fb66 	bl	8000adc <__aeabi_dcmplt>
 8008410:	b9d0      	cbnz	r0, 8008448 <_strtod_l+0xa80>
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	4b6c      	ldr	r3, [pc, #432]	; (80085c8 <_strtod_l+0xc00>)
 8008418:	2200      	movs	r2, #0
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	4680      	mov	r8, r0
 8008420:	4689      	mov	r9, r1
 8008422:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008426:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800842a:	9315      	str	r3, [sp, #84]	; 0x54
 800842c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008430:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008434:	e79d      	b.n	8008372 <_strtod_l+0x9aa>
 8008436:	f1ba 0f01 	cmp.w	sl, #1
 800843a:	d102      	bne.n	8008442 <_strtod_l+0xa7a>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f43f ad83 	beq.w	8007f48 <_strtod_l+0x580>
 8008442:	4b62      	ldr	r3, [pc, #392]	; (80085cc <_strtod_l+0xc04>)
 8008444:	2200      	movs	r2, #0
 8008446:	e78e      	b.n	8008366 <_strtod_l+0x99e>
 8008448:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80085c8 <_strtod_l+0xc00>
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	e7e7      	b.n	8008422 <_strtod_l+0xa5a>
 8008452:	4b5d      	ldr	r3, [pc, #372]	; (80085c8 <_strtod_l+0xc00>)
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	2200      	movs	r2, #0
 800845a:	f7f8 f8cd 	bl	80005f8 <__aeabi_dmul>
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	4680      	mov	r8, r0
 8008462:	4689      	mov	r9, r1
 8008464:	b933      	cbnz	r3, 8008474 <_strtod_l+0xaac>
 8008466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800846a:	900e      	str	r0, [sp, #56]	; 0x38
 800846c:	930f      	str	r3, [sp, #60]	; 0x3c
 800846e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008472:	e7dd      	b.n	8008430 <_strtod_l+0xa68>
 8008474:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008478:	e7f9      	b.n	800846e <_strtod_l+0xaa6>
 800847a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1a8      	bne.n	80083d6 <_strtod_l+0xa0e>
 8008484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800848a:	0d1b      	lsrs	r3, r3, #20
 800848c:	051b      	lsls	r3, r3, #20
 800848e:	429a      	cmp	r2, r3
 8008490:	d1a1      	bne.n	80083d6 <_strtod_l+0xa0e>
 8008492:	4640      	mov	r0, r8
 8008494:	4649      	mov	r1, r9
 8008496:	f7f8 fbf7 	bl	8000c88 <__aeabi_d2lz>
 800849a:	f7f8 f87f 	bl	800059c <__aeabi_l2d>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f7 feef 	bl	8000288 <__aeabi_dsub>
 80084aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084b0:	ea43 030a 	orr.w	r3, r3, sl
 80084b4:	4313      	orrs	r3, r2
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	d055      	beq.n	8008568 <_strtod_l+0xba0>
 80084bc:	a336      	add	r3, pc, #216	; (adr r3, 8008598 <_strtod_l+0xbd0>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f7f8 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f47f acd0 	bne.w	8007e6c <_strtod_l+0x4a4>
 80084cc:	a334      	add	r3, pc, #208	; (adr r3, 80085a0 <_strtod_l+0xbd8>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	4640      	mov	r0, r8
 80084d4:	4649      	mov	r1, r9
 80084d6:	f7f8 fb1f 	bl	8000b18 <__aeabi_dcmpgt>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f43f af7b 	beq.w	80083d6 <_strtod_l+0xa0e>
 80084e0:	e4c4      	b.n	8007e6c <_strtod_l+0x4a4>
 80084e2:	9b04      	ldr	r3, [sp, #16]
 80084e4:	b333      	cbz	r3, 8008534 <_strtod_l+0xb6c>
 80084e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084ec:	d822      	bhi.n	8008534 <_strtod_l+0xb6c>
 80084ee:	a32e      	add	r3, pc, #184	; (adr r3, 80085a8 <_strtod_l+0xbe0>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	4640      	mov	r0, r8
 80084f6:	4649      	mov	r1, r9
 80084f8:	f7f8 fafa 	bl	8000af0 <__aeabi_dcmple>
 80084fc:	b1a0      	cbz	r0, 8008528 <_strtod_l+0xb60>
 80084fe:	4649      	mov	r1, r9
 8008500:	4640      	mov	r0, r8
 8008502:	f7f8 fb51 	bl	8000ba8 <__aeabi_d2uiz>
 8008506:	2801      	cmp	r0, #1
 8008508:	bf38      	it	cc
 800850a:	2001      	movcc	r0, #1
 800850c:	f7f7 fffa 	bl	8000504 <__aeabi_ui2d>
 8008510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	bb23      	cbnz	r3, 8008562 <_strtod_l+0xb9a>
 8008518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851c:	9010      	str	r0, [sp, #64]	; 0x40
 800851e:	9311      	str	r3, [sp, #68]	; 0x44
 8008520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008524:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800852c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	9309      	str	r3, [sp, #36]	; 0x24
 8008534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008538:	eeb0 0a48 	vmov.f32	s0, s16
 800853c:	eef0 0a68 	vmov.f32	s1, s17
 8008540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008544:	f001 fe58 	bl	800a1f8 <__ulp>
 8008548:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800854c:	ec53 2b10 	vmov	r2, r3, d0
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	ec53 2b18 	vmov	r2, r3, d8
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4682      	mov	sl, r0
 800855e:	468b      	mov	fp, r1
 8008560:	e78d      	b.n	800847e <_strtod_l+0xab6>
 8008562:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008566:	e7db      	b.n	8008520 <_strtod_l+0xb58>
 8008568:	a311      	add	r3, pc, #68	; (adr r3, 80085b0 <_strtod_l+0xbe8>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 fab5 	bl	8000adc <__aeabi_dcmplt>
 8008572:	e7b2      	b.n	80084da <_strtod_l+0xb12>
 8008574:	2300      	movs	r3, #0
 8008576:	930a      	str	r3, [sp, #40]	; 0x28
 8008578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800857a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	f7ff ba6b 	b.w	8007a58 <_strtod_l+0x90>
 8008582:	2a65      	cmp	r2, #101	; 0x65
 8008584:	f43f ab5f 	beq.w	8007c46 <_strtod_l+0x27e>
 8008588:	2a45      	cmp	r2, #69	; 0x45
 800858a:	f43f ab5c 	beq.w	8007c46 <_strtod_l+0x27e>
 800858e:	2301      	movs	r3, #1
 8008590:	f7ff bb94 	b.w	8007cbc <_strtod_l+0x2f4>
 8008594:	f3af 8000 	nop.w
 8008598:	94a03595 	.word	0x94a03595
 800859c:	3fdfffff 	.word	0x3fdfffff
 80085a0:	35afe535 	.word	0x35afe535
 80085a4:	3fe00000 	.word	0x3fe00000
 80085a8:	ffc00000 	.word	0xffc00000
 80085ac:	41dfffff 	.word	0x41dfffff
 80085b0:	94a03595 	.word	0x94a03595
 80085b4:	3fcfffff 	.word	0x3fcfffff
 80085b8:	3ff00000 	.word	0x3ff00000
 80085bc:	7ff00000 	.word	0x7ff00000
 80085c0:	7fe00000 	.word	0x7fe00000
 80085c4:	7c9fffff 	.word	0x7c9fffff
 80085c8:	3fe00000 	.word	0x3fe00000
 80085cc:	bff00000 	.word	0xbff00000
 80085d0:	7fefffff 	.word	0x7fefffff

080085d4 <_strtod_r>:
 80085d4:	4b01      	ldr	r3, [pc, #4]	; (80085dc <_strtod_r+0x8>)
 80085d6:	f7ff b9f7 	b.w	80079c8 <_strtod_l>
 80085da:	bf00      	nop
 80085dc:	20000074 	.word	0x20000074

080085e0 <_strtol_l.constprop.0>:
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e6:	d001      	beq.n	80085ec <_strtol_l.constprop.0+0xc>
 80085e8:	2b24      	cmp	r3, #36	; 0x24
 80085ea:	d906      	bls.n	80085fa <_strtol_l.constprop.0+0x1a>
 80085ec:	f7fe faca 	bl	8006b84 <__errno>
 80085f0:	2316      	movs	r3, #22
 80085f2:	6003      	str	r3, [r0, #0]
 80085f4:	2000      	movs	r0, #0
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80086e0 <_strtol_l.constprop.0+0x100>
 80085fe:	460d      	mov	r5, r1
 8008600:	462e      	mov	r6, r5
 8008602:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008606:	f814 700c 	ldrb.w	r7, [r4, ip]
 800860a:	f017 0708 	ands.w	r7, r7, #8
 800860e:	d1f7      	bne.n	8008600 <_strtol_l.constprop.0+0x20>
 8008610:	2c2d      	cmp	r4, #45	; 0x2d
 8008612:	d132      	bne.n	800867a <_strtol_l.constprop.0+0x9a>
 8008614:	782c      	ldrb	r4, [r5, #0]
 8008616:	2701      	movs	r7, #1
 8008618:	1cb5      	adds	r5, r6, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d05b      	beq.n	80086d6 <_strtol_l.constprop.0+0xf6>
 800861e:	2b10      	cmp	r3, #16
 8008620:	d109      	bne.n	8008636 <_strtol_l.constprop.0+0x56>
 8008622:	2c30      	cmp	r4, #48	; 0x30
 8008624:	d107      	bne.n	8008636 <_strtol_l.constprop.0+0x56>
 8008626:	782c      	ldrb	r4, [r5, #0]
 8008628:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800862c:	2c58      	cmp	r4, #88	; 0x58
 800862e:	d14d      	bne.n	80086cc <_strtol_l.constprop.0+0xec>
 8008630:	786c      	ldrb	r4, [r5, #1]
 8008632:	2310      	movs	r3, #16
 8008634:	3502      	adds	r5, #2
 8008636:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800863a:	f108 38ff 	add.w	r8, r8, #4294967295
 800863e:	f04f 0c00 	mov.w	ip, #0
 8008642:	fbb8 f9f3 	udiv	r9, r8, r3
 8008646:	4666      	mov	r6, ip
 8008648:	fb03 8a19 	mls	sl, r3, r9, r8
 800864c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008650:	f1be 0f09 	cmp.w	lr, #9
 8008654:	d816      	bhi.n	8008684 <_strtol_l.constprop.0+0xa4>
 8008656:	4674      	mov	r4, lr
 8008658:	42a3      	cmp	r3, r4
 800865a:	dd24      	ble.n	80086a6 <_strtol_l.constprop.0+0xc6>
 800865c:	f1bc 0f00 	cmp.w	ip, #0
 8008660:	db1e      	blt.n	80086a0 <_strtol_l.constprop.0+0xc0>
 8008662:	45b1      	cmp	r9, r6
 8008664:	d31c      	bcc.n	80086a0 <_strtol_l.constprop.0+0xc0>
 8008666:	d101      	bne.n	800866c <_strtol_l.constprop.0+0x8c>
 8008668:	45a2      	cmp	sl, r4
 800866a:	db19      	blt.n	80086a0 <_strtol_l.constprop.0+0xc0>
 800866c:	fb06 4603 	mla	r6, r6, r3, r4
 8008670:	f04f 0c01 	mov.w	ip, #1
 8008674:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008678:	e7e8      	b.n	800864c <_strtol_l.constprop.0+0x6c>
 800867a:	2c2b      	cmp	r4, #43	; 0x2b
 800867c:	bf04      	itt	eq
 800867e:	782c      	ldrbeq	r4, [r5, #0]
 8008680:	1cb5      	addeq	r5, r6, #2
 8008682:	e7ca      	b.n	800861a <_strtol_l.constprop.0+0x3a>
 8008684:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008688:	f1be 0f19 	cmp.w	lr, #25
 800868c:	d801      	bhi.n	8008692 <_strtol_l.constprop.0+0xb2>
 800868e:	3c37      	subs	r4, #55	; 0x37
 8008690:	e7e2      	b.n	8008658 <_strtol_l.constprop.0+0x78>
 8008692:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008696:	f1be 0f19 	cmp.w	lr, #25
 800869a:	d804      	bhi.n	80086a6 <_strtol_l.constprop.0+0xc6>
 800869c:	3c57      	subs	r4, #87	; 0x57
 800869e:	e7db      	b.n	8008658 <_strtol_l.constprop.0+0x78>
 80086a0:	f04f 3cff 	mov.w	ip, #4294967295
 80086a4:	e7e6      	b.n	8008674 <_strtol_l.constprop.0+0x94>
 80086a6:	f1bc 0f00 	cmp.w	ip, #0
 80086aa:	da05      	bge.n	80086b8 <_strtol_l.constprop.0+0xd8>
 80086ac:	2322      	movs	r3, #34	; 0x22
 80086ae:	6003      	str	r3, [r0, #0]
 80086b0:	4646      	mov	r6, r8
 80086b2:	b942      	cbnz	r2, 80086c6 <_strtol_l.constprop.0+0xe6>
 80086b4:	4630      	mov	r0, r6
 80086b6:	e79e      	b.n	80085f6 <_strtol_l.constprop.0+0x16>
 80086b8:	b107      	cbz	r7, 80086bc <_strtol_l.constprop.0+0xdc>
 80086ba:	4276      	negs	r6, r6
 80086bc:	2a00      	cmp	r2, #0
 80086be:	d0f9      	beq.n	80086b4 <_strtol_l.constprop.0+0xd4>
 80086c0:	f1bc 0f00 	cmp.w	ip, #0
 80086c4:	d000      	beq.n	80086c8 <_strtol_l.constprop.0+0xe8>
 80086c6:	1e69      	subs	r1, r5, #1
 80086c8:	6011      	str	r1, [r2, #0]
 80086ca:	e7f3      	b.n	80086b4 <_strtol_l.constprop.0+0xd4>
 80086cc:	2430      	movs	r4, #48	; 0x30
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1b1      	bne.n	8008636 <_strtol_l.constprop.0+0x56>
 80086d2:	2308      	movs	r3, #8
 80086d4:	e7af      	b.n	8008636 <_strtol_l.constprop.0+0x56>
 80086d6:	2c30      	cmp	r4, #48	; 0x30
 80086d8:	d0a5      	beq.n	8008626 <_strtol_l.constprop.0+0x46>
 80086da:	230a      	movs	r3, #10
 80086dc:	e7ab      	b.n	8008636 <_strtol_l.constprop.0+0x56>
 80086de:	bf00      	nop
 80086e0:	0800b889 	.word	0x0800b889

080086e4 <_strtol_r>:
 80086e4:	f7ff bf7c 	b.w	80085e0 <_strtol_l.constprop.0>

080086e8 <quorem>:
 80086e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	6903      	ldr	r3, [r0, #16]
 80086ee:	690c      	ldr	r4, [r1, #16]
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	4607      	mov	r7, r0
 80086f4:	f2c0 8081 	blt.w	80087fa <quorem+0x112>
 80086f8:	3c01      	subs	r4, #1
 80086fa:	f101 0814 	add.w	r8, r1, #20
 80086fe:	f100 0514 	add.w	r5, r0, #20
 8008702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800870c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008710:	3301      	adds	r3, #1
 8008712:	429a      	cmp	r2, r3
 8008714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800871c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008720:	d331      	bcc.n	8008786 <quorem+0x9e>
 8008722:	f04f 0e00 	mov.w	lr, #0
 8008726:	4640      	mov	r0, r8
 8008728:	46ac      	mov	ip, r5
 800872a:	46f2      	mov	sl, lr
 800872c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008730:	b293      	uxth	r3, r2
 8008732:	fb06 e303 	mla	r3, r6, r3, lr
 8008736:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800873a:	b29b      	uxth	r3, r3
 800873c:	ebaa 0303 	sub.w	r3, sl, r3
 8008740:	f8dc a000 	ldr.w	sl, [ip]
 8008744:	0c12      	lsrs	r2, r2, #16
 8008746:	fa13 f38a 	uxtah	r3, r3, sl
 800874a:	fb06 e202 	mla	r2, r6, r2, lr
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008756:	b292      	uxth	r2, r2
 8008758:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800875c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008760:	f8bd 3000 	ldrh.w	r3, [sp]
 8008764:	4581      	cmp	r9, r0
 8008766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800876a:	f84c 3b04 	str.w	r3, [ip], #4
 800876e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008772:	d2db      	bcs.n	800872c <quorem+0x44>
 8008774:	f855 300b 	ldr.w	r3, [r5, fp]
 8008778:	b92b      	cbnz	r3, 8008786 <quorem+0x9e>
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	3b04      	subs	r3, #4
 800877e:	429d      	cmp	r5, r3
 8008780:	461a      	mov	r2, r3
 8008782:	d32e      	bcc.n	80087e2 <quorem+0xfa>
 8008784:	613c      	str	r4, [r7, #16]
 8008786:	4638      	mov	r0, r7
 8008788:	f001 fc90 	bl	800a0ac <__mcmp>
 800878c:	2800      	cmp	r0, #0
 800878e:	db24      	blt.n	80087da <quorem+0xf2>
 8008790:	3601      	adds	r6, #1
 8008792:	4628      	mov	r0, r5
 8008794:	f04f 0c00 	mov.w	ip, #0
 8008798:	f858 2b04 	ldr.w	r2, [r8], #4
 800879c:	f8d0 e000 	ldr.w	lr, [r0]
 80087a0:	b293      	uxth	r3, r2
 80087a2:	ebac 0303 	sub.w	r3, ip, r3
 80087a6:	0c12      	lsrs	r2, r2, #16
 80087a8:	fa13 f38e 	uxtah	r3, r3, lr
 80087ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ba:	45c1      	cmp	r9, r8
 80087bc:	f840 3b04 	str.w	r3, [r0], #4
 80087c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087c4:	d2e8      	bcs.n	8008798 <quorem+0xb0>
 80087c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ce:	b922      	cbnz	r2, 80087da <quorem+0xf2>
 80087d0:	3b04      	subs	r3, #4
 80087d2:	429d      	cmp	r5, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	d30a      	bcc.n	80087ee <quorem+0x106>
 80087d8:	613c      	str	r4, [r7, #16]
 80087da:	4630      	mov	r0, r6
 80087dc:	b003      	add	sp, #12
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	3b04      	subs	r3, #4
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d1cc      	bne.n	8008784 <quorem+0x9c>
 80087ea:	3c01      	subs	r4, #1
 80087ec:	e7c7      	b.n	800877e <quorem+0x96>
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	d1f0      	bne.n	80087d8 <quorem+0xf0>
 80087f6:	3c01      	subs	r4, #1
 80087f8:	e7eb      	b.n	80087d2 <quorem+0xea>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e7ee      	b.n	80087dc <quorem+0xf4>
	...

08008800 <_dtoa_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b04 	vpush	{d8-d9}
 8008808:	ec57 6b10 	vmov	r6, r7, d0
 800880c:	b093      	sub	sp, #76	; 0x4c
 800880e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008814:	9106      	str	r1, [sp, #24]
 8008816:	ee10 aa10 	vmov	sl, s0
 800881a:	4604      	mov	r4, r0
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	930c      	str	r3, [sp, #48]	; 0x30
 8008820:	46bb      	mov	fp, r7
 8008822:	b975      	cbnz	r5, 8008842 <_dtoa_r+0x42>
 8008824:	2010      	movs	r0, #16
 8008826:	f001 f94d 	bl	8009ac4 <malloc>
 800882a:	4602      	mov	r2, r0
 800882c:	6260      	str	r0, [r4, #36]	; 0x24
 800882e:	b920      	cbnz	r0, 800883a <_dtoa_r+0x3a>
 8008830:	4ba7      	ldr	r3, [pc, #668]	; (8008ad0 <_dtoa_r+0x2d0>)
 8008832:	21ea      	movs	r1, #234	; 0xea
 8008834:	48a7      	ldr	r0, [pc, #668]	; (8008ad4 <_dtoa_r+0x2d4>)
 8008836:	f002 f8bd 	bl	800a9b4 <__assert_func>
 800883a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800883e:	6005      	str	r5, [r0, #0]
 8008840:	60c5      	str	r5, [r0, #12]
 8008842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008844:	6819      	ldr	r1, [r3, #0]
 8008846:	b151      	cbz	r1, 800885e <_dtoa_r+0x5e>
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	604a      	str	r2, [r1, #4]
 800884c:	2301      	movs	r3, #1
 800884e:	4093      	lsls	r3, r2
 8008850:	608b      	str	r3, [r1, #8]
 8008852:	4620      	mov	r0, r4
 8008854:	f001 f99e 	bl	8009b94 <_Bfree>
 8008858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	1e3b      	subs	r3, r7, #0
 8008860:	bfaa      	itet	ge
 8008862:	2300      	movge	r3, #0
 8008864:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008868:	f8c8 3000 	strge.w	r3, [r8]
 800886c:	4b9a      	ldr	r3, [pc, #616]	; (8008ad8 <_dtoa_r+0x2d8>)
 800886e:	bfbc      	itt	lt
 8008870:	2201      	movlt	r2, #1
 8008872:	f8c8 2000 	strlt.w	r2, [r8]
 8008876:	ea33 030b 	bics.w	r3, r3, fp
 800887a:	d11b      	bne.n	80088b4 <_dtoa_r+0xb4>
 800887c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800887e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008888:	4333      	orrs	r3, r6
 800888a:	f000 8592 	beq.w	80093b2 <_dtoa_r+0xbb2>
 800888e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008890:	b963      	cbnz	r3, 80088ac <_dtoa_r+0xac>
 8008892:	4b92      	ldr	r3, [pc, #584]	; (8008adc <_dtoa_r+0x2dc>)
 8008894:	e022      	b.n	80088dc <_dtoa_r+0xdc>
 8008896:	4b92      	ldr	r3, [pc, #584]	; (8008ae0 <_dtoa_r+0x2e0>)
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	3308      	adds	r3, #8
 800889c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	b013      	add	sp, #76	; 0x4c
 80088a4:	ecbd 8b04 	vpop	{d8-d9}
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	4b8b      	ldr	r3, [pc, #556]	; (8008adc <_dtoa_r+0x2dc>)
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	3303      	adds	r3, #3
 80088b2:	e7f3      	b.n	800889c <_dtoa_r+0x9c>
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4650      	mov	r0, sl
 80088ba:	4659      	mov	r1, fp
 80088bc:	f7f8 f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c0:	ec4b ab19 	vmov	d9, sl, fp
 80088c4:	4680      	mov	r8, r0
 80088c6:	b158      	cbz	r0, 80088e0 <_dtoa_r+0xe0>
 80088c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ca:	2301      	movs	r3, #1
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 856b 	beq.w	80093ac <_dtoa_r+0xbac>
 80088d6:	4883      	ldr	r0, [pc, #524]	; (8008ae4 <_dtoa_r+0x2e4>)
 80088d8:	6018      	str	r0, [r3, #0]
 80088da:	1e43      	subs	r3, r0, #1
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	e7df      	b.n	80088a0 <_dtoa_r+0xa0>
 80088e0:	ec4b ab10 	vmov	d0, sl, fp
 80088e4:	aa10      	add	r2, sp, #64	; 0x40
 80088e6:	a911      	add	r1, sp, #68	; 0x44
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 fd01 	bl	800a2f0 <__d2b>
 80088ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80088f2:	ee08 0a10 	vmov	s16, r0
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	f000 8084 	beq.w	8008a04 <_dtoa_r+0x204>
 80088fc:	ee19 3a90 	vmov	r3, s19
 8008900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008904:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008908:	4656      	mov	r6, sl
 800890a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800890e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008912:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008916:	4b74      	ldr	r3, [pc, #464]	; (8008ae8 <_dtoa_r+0x2e8>)
 8008918:	2200      	movs	r2, #0
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 fcb3 	bl	8000288 <__aeabi_dsub>
 8008922:	a365      	add	r3, pc, #404	; (adr r3, 8008ab8 <_dtoa_r+0x2b8>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe66 	bl	80005f8 <__aeabi_dmul>
 800892c:	a364      	add	r3, pc, #400	; (adr r3, 8008ac0 <_dtoa_r+0x2c0>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fcab 	bl	800028c <__adddf3>
 8008936:	4606      	mov	r6, r0
 8008938:	4628      	mov	r0, r5
 800893a:	460f      	mov	r7, r1
 800893c:	f7f7 fdf2 	bl	8000524 <__aeabi_i2d>
 8008940:	a361      	add	r3, pc, #388	; (adr r3, 8008ac8 <_dtoa_r+0x2c8>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fe57 	bl	80005f8 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	f7f8 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800895e:	2200      	movs	r2, #0
 8008960:	9000      	str	r0, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f8 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800896c:	b150      	cbz	r0, 8008984 <_dtoa_r+0x184>
 800896e:	9800      	ldr	r0, [sp, #0]
 8008970:	f7f7 fdd8 	bl	8000524 <__aeabi_i2d>
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	f7f8 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800897c:	b910      	cbnz	r0, 8008984 <_dtoa_r+0x184>
 800897e:	9b00      	ldr	r3, [sp, #0]
 8008980:	3b01      	subs	r3, #1
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	9b00      	ldr	r3, [sp, #0]
 8008986:	2b16      	cmp	r3, #22
 8008988:	d85a      	bhi.n	8008a40 <_dtoa_r+0x240>
 800898a:	9a00      	ldr	r2, [sp, #0]
 800898c:	4b57      	ldr	r3, [pc, #348]	; (8008aec <_dtoa_r+0x2ec>)
 800898e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	ec51 0b19 	vmov	r0, r1, d9
 800899a:	f7f8 f89f 	bl	8000adc <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d050      	beq.n	8008a44 <_dtoa_r+0x244>
 80089a2:	9b00      	ldr	r3, [sp, #0]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2300      	movs	r3, #0
 80089aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089ae:	1b5d      	subs	r5, r3, r5
 80089b0:	1e6b      	subs	r3, r5, #1
 80089b2:	9305      	str	r3, [sp, #20]
 80089b4:	bf45      	ittet	mi
 80089b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80089ba:	9304      	strmi	r3, [sp, #16]
 80089bc:	2300      	movpl	r3, #0
 80089be:	2300      	movmi	r3, #0
 80089c0:	bf4c      	ite	mi
 80089c2:	9305      	strmi	r3, [sp, #20]
 80089c4:	9304      	strpl	r3, [sp, #16]
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	db3d      	blt.n	8008a48 <_dtoa_r+0x248>
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	9a00      	ldr	r2, [sp, #0]
 80089d0:	920a      	str	r2, [sp, #40]	; 0x28
 80089d2:	4413      	add	r3, r2
 80089d4:	9305      	str	r3, [sp, #20]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9307      	str	r3, [sp, #28]
 80089da:	9b06      	ldr	r3, [sp, #24]
 80089dc:	2b09      	cmp	r3, #9
 80089de:	f200 8089 	bhi.w	8008af4 <_dtoa_r+0x2f4>
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	bfc4      	itt	gt
 80089e6:	3b04      	subgt	r3, #4
 80089e8:	9306      	strgt	r3, [sp, #24]
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	f1a3 0302 	sub.w	r3, r3, #2
 80089f0:	bfcc      	ite	gt
 80089f2:	2500      	movgt	r5, #0
 80089f4:	2501      	movle	r5, #1
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	f200 8087 	bhi.w	8008b0a <_dtoa_r+0x30a>
 80089fc:	e8df f003 	tbb	[pc, r3]
 8008a00:	59383a2d 	.word	0x59383a2d
 8008a04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a08:	441d      	add	r5, r3
 8008a0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	bfc1      	itttt	gt
 8008a12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008a1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a22:	bfda      	itte	le
 8008a24:	f1c3 0320 	rsble	r3, r3, #32
 8008a28:	fa06 f003 	lslle.w	r0, r6, r3
 8008a2c:	4318      	orrgt	r0, r3
 8008a2e:	f7f7 fd69 	bl	8000504 <__aeabi_ui2d>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4606      	mov	r6, r0
 8008a36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a3a:	3d01      	subs	r5, #1
 8008a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a3e:	e76a      	b.n	8008916 <_dtoa_r+0x116>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7b2      	b.n	80089aa <_dtoa_r+0x1aa>
 8008a44:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a46:	e7b1      	b.n	80089ac <_dtoa_r+0x1ac>
 8008a48:	9b04      	ldr	r3, [sp, #16]
 8008a4a:	9a00      	ldr	r2, [sp, #0]
 8008a4c:	1a9b      	subs	r3, r3, r2
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	4253      	negs	r3, r2
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	2300      	movs	r3, #0
 8008a56:	930a      	str	r3, [sp, #40]	; 0x28
 8008a58:	e7bf      	b.n	80089da <_dtoa_r+0x1da>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9308      	str	r3, [sp, #32]
 8008a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dc55      	bgt.n	8008b10 <_dtoa_r+0x310>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a6e:	e00c      	b.n	8008a8a <_dtoa_r+0x28a>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e7f3      	b.n	8008a5c <_dtoa_r+0x25c>
 8008a74:	2300      	movs	r3, #0
 8008a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	9b00      	ldr	r3, [sp, #0]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	3301      	adds	r3, #1
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	bfb8      	it	lt
 8008a88:	2301      	movlt	r3, #1
 8008a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	6042      	str	r2, [r0, #4]
 8008a90:	2204      	movs	r2, #4
 8008a92:	f102 0614 	add.w	r6, r2, #20
 8008a96:	429e      	cmp	r6, r3
 8008a98:	6841      	ldr	r1, [r0, #4]
 8008a9a:	d93d      	bls.n	8008b18 <_dtoa_r+0x318>
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f001 f839 	bl	8009b14 <_Balloc>
 8008aa2:	9001      	str	r0, [sp, #4]
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d13b      	bne.n	8008b20 <_dtoa_r+0x320>
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <_dtoa_r+0x2f0>)
 8008aaa:	4602      	mov	r2, r0
 8008aac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ab0:	e6c0      	b.n	8008834 <_dtoa_r+0x34>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7df      	b.n	8008a76 <_dtoa_r+0x276>
 8008ab6:	bf00      	nop
 8008ab8:	636f4361 	.word	0x636f4361
 8008abc:	3fd287a7 	.word	0x3fd287a7
 8008ac0:	8b60c8b3 	.word	0x8b60c8b3
 8008ac4:	3fc68a28 	.word	0x3fc68a28
 8008ac8:	509f79fb 	.word	0x509f79fb
 8008acc:	3fd34413 	.word	0x3fd34413
 8008ad0:	0800b996 	.word	0x0800b996
 8008ad4:	0800b9ad 	.word	0x0800b9ad
 8008ad8:	7ff00000 	.word	0x7ff00000
 8008adc:	0800b992 	.word	0x0800b992
 8008ae0:	0800b989 	.word	0x0800b989
 8008ae4:	0800b80d 	.word	0x0800b80d
 8008ae8:	3ff80000 	.word	0x3ff80000
 8008aec:	0800bb18 	.word	0x0800bb18
 8008af0:	0800ba08 	.word	0x0800ba08
 8008af4:	2501      	movs	r5, #1
 8008af6:	2300      	movs	r3, #0
 8008af8:	9306      	str	r3, [sp, #24]
 8008afa:	9508      	str	r5, [sp, #32]
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295
 8008b00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2312      	movs	r3, #18
 8008b08:	e7b0      	b.n	8008a6c <_dtoa_r+0x26c>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	9308      	str	r3, [sp, #32]
 8008b0e:	e7f5      	b.n	8008afc <_dtoa_r+0x2fc>
 8008b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b16:	e7b8      	b.n	8008a8a <_dtoa_r+0x28a>
 8008b18:	3101      	adds	r1, #1
 8008b1a:	6041      	str	r1, [r0, #4]
 8008b1c:	0052      	lsls	r2, r2, #1
 8008b1e:	e7b8      	b.n	8008a92 <_dtoa_r+0x292>
 8008b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	2b0e      	cmp	r3, #14
 8008b2a:	f200 809d 	bhi.w	8008c68 <_dtoa_r+0x468>
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	f000 809a 	beq.w	8008c68 <_dtoa_r+0x468>
 8008b34:	9b00      	ldr	r3, [sp, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd32      	ble.n	8008ba0 <_dtoa_r+0x3a0>
 8008b3a:	4ab7      	ldr	r2, [pc, #732]	; (8008e18 <_dtoa_r+0x618>)
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	05d8      	lsls	r0, r3, #23
 8008b4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008b50:	d516      	bpl.n	8008b80 <_dtoa_r+0x380>
 8008b52:	4bb2      	ldr	r3, [pc, #712]	; (8008e1c <_dtoa_r+0x61c>)
 8008b54:	ec51 0b19 	vmov	r0, r1, d9
 8008b58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b5c:	f7f7 fe76 	bl	800084c <__aeabi_ddiv>
 8008b60:	f007 070f 	and.w	r7, r7, #15
 8008b64:	4682      	mov	sl, r0
 8008b66:	468b      	mov	fp, r1
 8008b68:	2503      	movs	r5, #3
 8008b6a:	4eac      	ldr	r6, [pc, #688]	; (8008e1c <_dtoa_r+0x61c>)
 8008b6c:	b957      	cbnz	r7, 8008b84 <_dtoa_r+0x384>
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	4650      	mov	r0, sl
 8008b74:	4659      	mov	r1, fp
 8008b76:	f7f7 fe69 	bl	800084c <__aeabi_ddiv>
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	468b      	mov	fp, r1
 8008b7e:	e028      	b.n	8008bd2 <_dtoa_r+0x3d2>
 8008b80:	2502      	movs	r5, #2
 8008b82:	e7f2      	b.n	8008b6a <_dtoa_r+0x36a>
 8008b84:	07f9      	lsls	r1, r7, #31
 8008b86:	d508      	bpl.n	8008b9a <_dtoa_r+0x39a>
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b90:	f7f7 fd32 	bl	80005f8 <__aeabi_dmul>
 8008b94:	3501      	adds	r5, #1
 8008b96:	4680      	mov	r8, r0
 8008b98:	4689      	mov	r9, r1
 8008b9a:	107f      	asrs	r7, r7, #1
 8008b9c:	3608      	adds	r6, #8
 8008b9e:	e7e5      	b.n	8008b6c <_dtoa_r+0x36c>
 8008ba0:	f000 809b 	beq.w	8008cda <_dtoa_r+0x4da>
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	4f9d      	ldr	r7, [pc, #628]	; (8008e1c <_dtoa_r+0x61c>)
 8008ba8:	425e      	negs	r6, r3
 8008baa:	4b9b      	ldr	r3, [pc, #620]	; (8008e18 <_dtoa_r+0x618>)
 8008bac:	f006 020f 	and.w	r2, r6, #15
 8008bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	ec51 0b19 	vmov	r0, r1, d9
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	1136      	asrs	r6, r6, #4
 8008bc2:	4682      	mov	sl, r0
 8008bc4:	468b      	mov	fp, r1
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2502      	movs	r5, #2
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d17a      	bne.n	8008cc4 <_dtoa_r+0x4c4>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1d3      	bne.n	8008b7a <_dtoa_r+0x37a>
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8082 	beq.w	8008cde <_dtoa_r+0x4de>
 8008bda:	4b91      	ldr	r3, [pc, #580]	; (8008e20 <_dtoa_r+0x620>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4650      	mov	r0, sl
 8008be0:	4659      	mov	r1, fp
 8008be2:	f7f7 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d079      	beq.n	8008cde <_dtoa_r+0x4de>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d076      	beq.n	8008cde <_dtoa_r+0x4de>
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd36      	ble.n	8008c64 <_dtoa_r+0x464>
 8008bf6:	9b00      	ldr	r3, [sp, #0]
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	4659      	mov	r1, fp
 8008bfc:	1e5f      	subs	r7, r3, #1
 8008bfe:	2200      	movs	r2, #0
 8008c00:	4b88      	ldr	r3, [pc, #544]	; (8008e24 <_dtoa_r+0x624>)
 8008c02:	f7f7 fcf9 	bl	80005f8 <__aeabi_dmul>
 8008c06:	9e02      	ldr	r6, [sp, #8]
 8008c08:	4682      	mov	sl, r0
 8008c0a:	468b      	mov	fp, r1
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7f7 fc88 	bl	8000524 <__aeabi_i2d>
 8008c14:	4652      	mov	r2, sl
 8008c16:	465b      	mov	r3, fp
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	4b82      	ldr	r3, [pc, #520]	; (8008e28 <_dtoa_r+0x628>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	46d0      	mov	r8, sl
 8008c26:	46d9      	mov	r9, fp
 8008c28:	4682      	mov	sl, r0
 8008c2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d158      	bne.n	8008ce4 <_dtoa_r+0x4e4>
 8008c32:	4b7e      	ldr	r3, [pc, #504]	; (8008e2c <_dtoa_r+0x62c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	f7f7 fb25 	bl	8000288 <__aeabi_dsub>
 8008c3e:	4652      	mov	r2, sl
 8008c40:	465b      	mov	r3, fp
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	f7f7 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f040 8295 	bne.w	800917a <_dtoa_r+0x97a>
 8008c50:	4652      	mov	r2, sl
 8008c52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c56:	4640      	mov	r0, r8
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f7f7 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f040 8289 	bne.w	8009176 <_dtoa_r+0x976>
 8008c64:	ec5b ab19 	vmov	sl, fp, d9
 8008c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f2c0 8148 	blt.w	8008f00 <_dtoa_r+0x700>
 8008c70:	9a00      	ldr	r2, [sp, #0]
 8008c72:	2a0e      	cmp	r2, #14
 8008c74:	f300 8144 	bgt.w	8008f00 <_dtoa_r+0x700>
 8008c78:	4b67      	ldr	r3, [pc, #412]	; (8008e18 <_dtoa_r+0x618>)
 8008c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f280 80d5 	bge.w	8008e34 <_dtoa_r+0x634>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f300 80d1 	bgt.w	8008e34 <_dtoa_r+0x634>
 8008c92:	f040 826f 	bne.w	8009174 <_dtoa_r+0x974>
 8008c96:	4b65      	ldr	r3, [pc, #404]	; (8008e2c <_dtoa_r+0x62c>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	f7f7 fcab 	bl	80005f8 <__aeabi_dmul>
 8008ca2:	4652      	mov	r2, sl
 8008ca4:	465b      	mov	r3, fp
 8008ca6:	f7f7 ff2d 	bl	8000b04 <__aeabi_dcmpge>
 8008caa:	9e03      	ldr	r6, [sp, #12]
 8008cac:	4637      	mov	r7, r6
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f040 8245 	bne.w	800913e <_dtoa_r+0x93e>
 8008cb4:	9d01      	ldr	r5, [sp, #4]
 8008cb6:	2331      	movs	r3, #49	; 0x31
 8008cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	e240      	b.n	8009146 <_dtoa_r+0x946>
 8008cc4:	07f2      	lsls	r2, r6, #31
 8008cc6:	d505      	bpl.n	8008cd4 <_dtoa_r+0x4d4>
 8008cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ccc:	f7f7 fc94 	bl	80005f8 <__aeabi_dmul>
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	1076      	asrs	r6, r6, #1
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	e777      	b.n	8008bca <_dtoa_r+0x3ca>
 8008cda:	2502      	movs	r5, #2
 8008cdc:	e779      	b.n	8008bd2 <_dtoa_r+0x3d2>
 8008cde:	9f00      	ldr	r7, [sp, #0]
 8008ce0:	9e03      	ldr	r6, [sp, #12]
 8008ce2:	e794      	b.n	8008c0e <_dtoa_r+0x40e>
 8008ce4:	9901      	ldr	r1, [sp, #4]
 8008ce6:	4b4c      	ldr	r3, [pc, #304]	; (8008e18 <_dtoa_r+0x618>)
 8008ce8:	4431      	add	r1, r6
 8008cea:	910d      	str	r1, [sp, #52]	; 0x34
 8008cec:	9908      	ldr	r1, [sp, #32]
 8008cee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d043      	beq.n	8008d82 <_dtoa_r+0x582>
 8008cfa:	494d      	ldr	r1, [pc, #308]	; (8008e30 <_dtoa_r+0x630>)
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f7f7 fda5 	bl	800084c <__aeabi_ddiv>
 8008d02:	4652      	mov	r2, sl
 8008d04:	465b      	mov	r3, fp
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	9d01      	ldr	r5, [sp, #4]
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	468b      	mov	fp, r1
 8008d10:	4649      	mov	r1, r9
 8008d12:	4640      	mov	r0, r8
 8008d14:	f7f7 ff20 	bl	8000b58 <__aeabi_d2iz>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f7f7 fc03 	bl	8000524 <__aeabi_i2d>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	3630      	adds	r6, #48	; 0x30
 8008d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d30:	4652      	mov	r2, sl
 8008d32:	465b      	mov	r3, fp
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	f7f7 fed0 	bl	8000adc <__aeabi_dcmplt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d163      	bne.n	8008e08 <_dtoa_r+0x608>
 8008d40:	4642      	mov	r2, r8
 8008d42:	464b      	mov	r3, r9
 8008d44:	4936      	ldr	r1, [pc, #216]	; (8008e20 <_dtoa_r+0x620>)
 8008d46:	2000      	movs	r0, #0
 8008d48:	f7f7 fa9e 	bl	8000288 <__aeabi_dsub>
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	465b      	mov	r3, fp
 8008d50:	f7f7 fec4 	bl	8000adc <__aeabi_dcmplt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f040 80b5 	bne.w	8008ec4 <_dtoa_r+0x6c4>
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5c:	429d      	cmp	r5, r3
 8008d5e:	d081      	beq.n	8008c64 <_dtoa_r+0x464>
 8008d60:	4b30      	ldr	r3, [pc, #192]	; (8008e24 <_dtoa_r+0x624>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	4650      	mov	r0, sl
 8008d66:	4659      	mov	r1, fp
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <_dtoa_r+0x624>)
 8008d6e:	4682      	mov	sl, r0
 8008d70:	468b      	mov	fp, r1
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	2200      	movs	r2, #0
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4689      	mov	r9, r1
 8008d80:	e7c6      	b.n	8008d10 <_dtoa_r+0x510>
 8008d82:	4650      	mov	r0, sl
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7f7 fc37 	bl	80005f8 <__aeabi_dmul>
 8008d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d8c:	9d01      	ldr	r5, [sp, #4]
 8008d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d90:	4682      	mov	sl, r0
 8008d92:	468b      	mov	fp, r1
 8008d94:	4649      	mov	r1, r9
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7f7 fede 	bl	8000b58 <__aeabi_d2iz>
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	f7f7 fbc1 	bl	8000524 <__aeabi_i2d>
 8008da2:	3630      	adds	r6, #48	; 0x30
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4640      	mov	r0, r8
 8008daa:	4649      	mov	r1, r9
 8008dac:	f7f7 fa6c 	bl	8000288 <__aeabi_dsub>
 8008db0:	f805 6b01 	strb.w	r6, [r5], #1
 8008db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db6:	429d      	cmp	r5, r3
 8008db8:	4680      	mov	r8, r0
 8008dba:	4689      	mov	r9, r1
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	d124      	bne.n	8008e0c <_dtoa_r+0x60c>
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <_dtoa_r+0x630>)
 8008dc4:	4650      	mov	r0, sl
 8008dc6:	4659      	mov	r1, fp
 8008dc8:	f7f7 fa60 	bl	800028c <__adddf3>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	f7f7 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d173      	bne.n	8008ec4 <_dtoa_r+0x6c4>
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	4913      	ldr	r1, [pc, #76]	; (8008e30 <_dtoa_r+0x630>)
 8008de2:	2000      	movs	r0, #0
 8008de4:	f7f7 fa50 	bl	8000288 <__aeabi_dsub>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4640      	mov	r0, r8
 8008dee:	4649      	mov	r1, r9
 8008df0:	f7f7 fe74 	bl	8000adc <__aeabi_dcmplt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f43f af35 	beq.w	8008c64 <_dtoa_r+0x464>
 8008dfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008dfc:	1e6b      	subs	r3, r5, #1
 8008dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e04:	2b30      	cmp	r3, #48	; 0x30
 8008e06:	d0f8      	beq.n	8008dfa <_dtoa_r+0x5fa>
 8008e08:	9700      	str	r7, [sp, #0]
 8008e0a:	e049      	b.n	8008ea0 <_dtoa_r+0x6a0>
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <_dtoa_r+0x624>)
 8008e0e:	f7f7 fbf3 	bl	80005f8 <__aeabi_dmul>
 8008e12:	4680      	mov	r8, r0
 8008e14:	4689      	mov	r9, r1
 8008e16:	e7bd      	b.n	8008d94 <_dtoa_r+0x594>
 8008e18:	0800bb18 	.word	0x0800bb18
 8008e1c:	0800baf0 	.word	0x0800baf0
 8008e20:	3ff00000 	.word	0x3ff00000
 8008e24:	40240000 	.word	0x40240000
 8008e28:	401c0000 	.word	0x401c0000
 8008e2c:	40140000 	.word	0x40140000
 8008e30:	3fe00000 	.word	0x3fe00000
 8008e34:	9d01      	ldr	r5, [sp, #4]
 8008e36:	4656      	mov	r6, sl
 8008e38:	465f      	mov	r7, fp
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	f7f7 fd03 	bl	800084c <__aeabi_ddiv>
 8008e46:	f7f7 fe87 	bl	8000b58 <__aeabi_d2iz>
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	f7f7 fb6a 	bl	8000524 <__aeabi_i2d>
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	f7f7 fbd0 	bl	80005f8 <__aeabi_dmul>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008e64:	f7f7 fa10 	bl	8000288 <__aeabi_dsub>
 8008e68:	f805 6b01 	strb.w	r6, [r5], #1
 8008e6c:	9e01      	ldr	r6, [sp, #4]
 8008e6e:	9f03      	ldr	r7, [sp, #12]
 8008e70:	1bae      	subs	r6, r5, r6
 8008e72:	42b7      	cmp	r7, r6
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	d135      	bne.n	8008ee6 <_dtoa_r+0x6e6>
 8008e7a:	f7f7 fa07 	bl	800028c <__adddf3>
 8008e7e:	4642      	mov	r2, r8
 8008e80:	464b      	mov	r3, r9
 8008e82:	4606      	mov	r6, r0
 8008e84:	460f      	mov	r7, r1
 8008e86:	f7f7 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8008e8a:	b9d0      	cbnz	r0, 8008ec2 <_dtoa_r+0x6c2>
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	464b      	mov	r3, r9
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e98:	b110      	cbz	r0, 8008ea0 <_dtoa_r+0x6a0>
 8008e9a:	f01a 0f01 	tst.w	sl, #1
 8008e9e:	d110      	bne.n	8008ec2 <_dtoa_r+0x6c2>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	ee18 1a10 	vmov	r1, s16
 8008ea6:	f000 fe75 	bl	8009b94 <_Bfree>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9800      	ldr	r0, [sp, #0]
 8008eae:	702b      	strb	r3, [r5, #0]
 8008eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	6018      	str	r0, [r3, #0]
 8008eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f43f acf1 	beq.w	80088a0 <_dtoa_r+0xa0>
 8008ebe:	601d      	str	r5, [r3, #0]
 8008ec0:	e4ee      	b.n	80088a0 <_dtoa_r+0xa0>
 8008ec2:	9f00      	ldr	r7, [sp, #0]
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ecc:	2a39      	cmp	r2, #57	; 0x39
 8008ece:	d106      	bne.n	8008ede <_dtoa_r+0x6de>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d1f7      	bne.n	8008ec6 <_dtoa_r+0x6c6>
 8008ed6:	9901      	ldr	r1, [sp, #4]
 8008ed8:	2230      	movs	r2, #48	; 0x30
 8008eda:	3701      	adds	r7, #1
 8008edc:	700a      	strb	r2, [r1, #0]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	e790      	b.n	8008e08 <_dtoa_r+0x608>
 8008ee6:	4ba6      	ldr	r3, [pc, #664]	; (8009180 <_dtoa_r+0x980>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7f7 fb85 	bl	80005f8 <__aeabi_dmul>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	f7f7 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d09d      	beq.n	8008e3a <_dtoa_r+0x63a>
 8008efe:	e7cf      	b.n	8008ea0 <_dtoa_r+0x6a0>
 8008f00:	9a08      	ldr	r2, [sp, #32]
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	f000 80d7 	beq.w	80090b6 <_dtoa_r+0x8b6>
 8008f08:	9a06      	ldr	r2, [sp, #24]
 8008f0a:	2a01      	cmp	r2, #1
 8008f0c:	f300 80ba 	bgt.w	8009084 <_dtoa_r+0x884>
 8008f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	f000 80b2 	beq.w	800907c <_dtoa_r+0x87c>
 8008f18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f1c:	9e07      	ldr	r6, [sp, #28]
 8008f1e:	9d04      	ldr	r5, [sp, #16]
 8008f20:	9a04      	ldr	r2, [sp, #16]
 8008f22:	441a      	add	r2, r3
 8008f24:	9204      	str	r2, [sp, #16]
 8008f26:	9a05      	ldr	r2, [sp, #20]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	441a      	add	r2, r3
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	9205      	str	r2, [sp, #20]
 8008f30:	f000 ff32 	bl	8009d98 <__i2b>
 8008f34:	4607      	mov	r7, r0
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	dd0c      	ble.n	8008f54 <_dtoa_r+0x754>
 8008f3a:	9b05      	ldr	r3, [sp, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dd09      	ble.n	8008f54 <_dtoa_r+0x754>
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	9a04      	ldr	r2, [sp, #16]
 8008f44:	bfa8      	it	ge
 8008f46:	462b      	movge	r3, r5
 8008f48:	1ad2      	subs	r2, r2, r3
 8008f4a:	9204      	str	r2, [sp, #16]
 8008f4c:	9a05      	ldr	r2, [sp, #20]
 8008f4e:	1aed      	subs	r5, r5, r3
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	b31b      	cbz	r3, 8008fa0 <_dtoa_r+0x7a0>
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80af 	beq.w	80090be <_dtoa_r+0x8be>
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	dd13      	ble.n	8008f8c <_dtoa_r+0x78c>
 8008f64:	4639      	mov	r1, r7
 8008f66:	4632      	mov	r2, r6
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 ffd5 	bl	8009f18 <__pow5mult>
 8008f6e:	ee18 2a10 	vmov	r2, s16
 8008f72:	4601      	mov	r1, r0
 8008f74:	4607      	mov	r7, r0
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 ff24 	bl	8009dc4 <__multiply>
 8008f7c:	ee18 1a10 	vmov	r1, s16
 8008f80:	4680      	mov	r8, r0
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fe06 	bl	8009b94 <_Bfree>
 8008f88:	ee08 8a10 	vmov	s16, r8
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	1b9a      	subs	r2, r3, r6
 8008f90:	d006      	beq.n	8008fa0 <_dtoa_r+0x7a0>
 8008f92:	ee18 1a10 	vmov	r1, s16
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 ffbe 	bl	8009f18 <__pow5mult>
 8008f9c:	ee08 0a10 	vmov	s16, r0
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fef8 	bl	8009d98 <__i2b>
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	4606      	mov	r6, r0
 8008fae:	f340 8088 	ble.w	80090c2 <_dtoa_r+0x8c2>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 ffae 	bl	8009f18 <__pow5mult>
 8008fbc:	9b06      	ldr	r3, [sp, #24]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	f340 8081 	ble.w	80090c8 <_dtoa_r+0x8c8>
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	6933      	ldr	r3, [r6, #16]
 8008fcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fd0:	6918      	ldr	r0, [r3, #16]
 8008fd2:	f000 fe91 	bl	8009cf8 <__hi0bits>
 8008fd6:	f1c0 0020 	rsb	r0, r0, #32
 8008fda:	9b05      	ldr	r3, [sp, #20]
 8008fdc:	4418      	add	r0, r3
 8008fde:	f010 001f 	ands.w	r0, r0, #31
 8008fe2:	f000 8092 	beq.w	800910a <_dtoa_r+0x90a>
 8008fe6:	f1c0 0320 	rsb	r3, r0, #32
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	f340 808a 	ble.w	8009104 <_dtoa_r+0x904>
 8008ff0:	f1c0 001c 	rsb	r0, r0, #28
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	4403      	add	r3, r0
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	4403      	add	r3, r0
 8008ffe:	4405      	add	r5, r0
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dd07      	ble.n	8009018 <_dtoa_r+0x818>
 8009008:	ee18 1a10 	vmov	r1, s16
 800900c:	461a      	mov	r2, r3
 800900e:	4620      	mov	r0, r4
 8009010:	f000 ffdc 	bl	8009fcc <__lshift>
 8009014:	ee08 0a10 	vmov	s16, r0
 8009018:	9b05      	ldr	r3, [sp, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd05      	ble.n	800902a <_dtoa_r+0x82a>
 800901e:	4631      	mov	r1, r6
 8009020:	461a      	mov	r2, r3
 8009022:	4620      	mov	r0, r4
 8009024:	f000 ffd2 	bl	8009fcc <__lshift>
 8009028:	4606      	mov	r6, r0
 800902a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d06e      	beq.n	800910e <_dtoa_r+0x90e>
 8009030:	ee18 0a10 	vmov	r0, s16
 8009034:	4631      	mov	r1, r6
 8009036:	f001 f839 	bl	800a0ac <__mcmp>
 800903a:	2800      	cmp	r0, #0
 800903c:	da67      	bge.n	800910e <_dtoa_r+0x90e>
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	3b01      	subs	r3, #1
 8009042:	ee18 1a10 	vmov	r1, s16
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	220a      	movs	r2, #10
 800904a:	2300      	movs	r3, #0
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fdc3 	bl	8009bd8 <__multadd>
 8009052:	9b08      	ldr	r3, [sp, #32]
 8009054:	ee08 0a10 	vmov	s16, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 81b1 	beq.w	80093c0 <_dtoa_r+0xbc0>
 800905e:	2300      	movs	r3, #0
 8009060:	4639      	mov	r1, r7
 8009062:	220a      	movs	r2, #10
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fdb7 	bl	8009bd8 <__multadd>
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	4607      	mov	r7, r0
 8009070:	f300 808e 	bgt.w	8009190 <_dtoa_r+0x990>
 8009074:	9b06      	ldr	r3, [sp, #24]
 8009076:	2b02      	cmp	r3, #2
 8009078:	dc51      	bgt.n	800911e <_dtoa_r+0x91e>
 800907a:	e089      	b.n	8009190 <_dtoa_r+0x990>
 800907c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800907e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009082:	e74b      	b.n	8008f1c <_dtoa_r+0x71c>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	1e5e      	subs	r6, r3, #1
 8009088:	9b07      	ldr	r3, [sp, #28]
 800908a:	42b3      	cmp	r3, r6
 800908c:	bfbf      	itttt	lt
 800908e:	9b07      	ldrlt	r3, [sp, #28]
 8009090:	9607      	strlt	r6, [sp, #28]
 8009092:	1af2      	sublt	r2, r6, r3
 8009094:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009096:	bfb6      	itet	lt
 8009098:	189b      	addlt	r3, r3, r2
 800909a:	1b9e      	subge	r6, r3, r6
 800909c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	bfb8      	it	lt
 80090a2:	2600      	movlt	r6, #0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfb7      	itett	lt
 80090a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80090ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80090b0:	1a9d      	sublt	r5, r3, r2
 80090b2:	2300      	movlt	r3, #0
 80090b4:	e734      	b.n	8008f20 <_dtoa_r+0x720>
 80090b6:	9e07      	ldr	r6, [sp, #28]
 80090b8:	9d04      	ldr	r5, [sp, #16]
 80090ba:	9f08      	ldr	r7, [sp, #32]
 80090bc:	e73b      	b.n	8008f36 <_dtoa_r+0x736>
 80090be:	9a07      	ldr	r2, [sp, #28]
 80090c0:	e767      	b.n	8008f92 <_dtoa_r+0x792>
 80090c2:	9b06      	ldr	r3, [sp, #24]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	dc18      	bgt.n	80090fa <_dtoa_r+0x8fa>
 80090c8:	f1ba 0f00 	cmp.w	sl, #0
 80090cc:	d115      	bne.n	80090fa <_dtoa_r+0x8fa>
 80090ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090d2:	b993      	cbnz	r3, 80090fa <_dtoa_r+0x8fa>
 80090d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090d8:	0d1b      	lsrs	r3, r3, #20
 80090da:	051b      	lsls	r3, r3, #20
 80090dc:	b183      	cbz	r3, 8009100 <_dtoa_r+0x900>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	3301      	adds	r3, #1
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	f04f 0801 	mov.w	r8, #1
 80090ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f af6a 	bne.w	8008fca <_dtoa_r+0x7ca>
 80090f6:	2001      	movs	r0, #1
 80090f8:	e76f      	b.n	8008fda <_dtoa_r+0x7da>
 80090fa:	f04f 0800 	mov.w	r8, #0
 80090fe:	e7f6      	b.n	80090ee <_dtoa_r+0x8ee>
 8009100:	4698      	mov	r8, r3
 8009102:	e7f4      	b.n	80090ee <_dtoa_r+0x8ee>
 8009104:	f43f af7d 	beq.w	8009002 <_dtoa_r+0x802>
 8009108:	4618      	mov	r0, r3
 800910a:	301c      	adds	r0, #28
 800910c:	e772      	b.n	8008ff4 <_dtoa_r+0x7f4>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc37      	bgt.n	8009184 <_dtoa_r+0x984>
 8009114:	9b06      	ldr	r3, [sp, #24]
 8009116:	2b02      	cmp	r3, #2
 8009118:	dd34      	ble.n	8009184 <_dtoa_r+0x984>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	9b02      	ldr	r3, [sp, #8]
 8009120:	b96b      	cbnz	r3, 800913e <_dtoa_r+0x93e>
 8009122:	4631      	mov	r1, r6
 8009124:	2205      	movs	r2, #5
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fd56 	bl	8009bd8 <__multadd>
 800912c:	4601      	mov	r1, r0
 800912e:	4606      	mov	r6, r0
 8009130:	ee18 0a10 	vmov	r0, s16
 8009134:	f000 ffba 	bl	800a0ac <__mcmp>
 8009138:	2800      	cmp	r0, #0
 800913a:	f73f adbb 	bgt.w	8008cb4 <_dtoa_r+0x4b4>
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	9d01      	ldr	r5, [sp, #4]
 8009142:	43db      	mvns	r3, r3
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	f04f 0800 	mov.w	r8, #0
 800914a:	4631      	mov	r1, r6
 800914c:	4620      	mov	r0, r4
 800914e:	f000 fd21 	bl	8009b94 <_Bfree>
 8009152:	2f00      	cmp	r7, #0
 8009154:	f43f aea4 	beq.w	8008ea0 <_dtoa_r+0x6a0>
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	d005      	beq.n	800916a <_dtoa_r+0x96a>
 800915e:	45b8      	cmp	r8, r7
 8009160:	d003      	beq.n	800916a <_dtoa_r+0x96a>
 8009162:	4641      	mov	r1, r8
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fd15 	bl	8009b94 <_Bfree>
 800916a:	4639      	mov	r1, r7
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fd11 	bl	8009b94 <_Bfree>
 8009172:	e695      	b.n	8008ea0 <_dtoa_r+0x6a0>
 8009174:	2600      	movs	r6, #0
 8009176:	4637      	mov	r7, r6
 8009178:	e7e1      	b.n	800913e <_dtoa_r+0x93e>
 800917a:	9700      	str	r7, [sp, #0]
 800917c:	4637      	mov	r7, r6
 800917e:	e599      	b.n	8008cb4 <_dtoa_r+0x4b4>
 8009180:	40240000 	.word	0x40240000
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80ca 	beq.w	8009320 <_dtoa_r+0xb20>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	2d00      	cmp	r5, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x9a0>
 8009194:	4639      	mov	r1, r7
 8009196:	462a      	mov	r2, r5
 8009198:	4620      	mov	r0, r4
 800919a:	f000 ff17 	bl	8009fcc <__lshift>
 800919e:	4607      	mov	r7, r0
 80091a0:	f1b8 0f00 	cmp.w	r8, #0
 80091a4:	d05b      	beq.n	800925e <_dtoa_r+0xa5e>
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fcb3 	bl	8009b14 <_Balloc>
 80091ae:	4605      	mov	r5, r0
 80091b0:	b928      	cbnz	r0, 80091be <_dtoa_r+0x9be>
 80091b2:	4b87      	ldr	r3, [pc, #540]	; (80093d0 <_dtoa_r+0xbd0>)
 80091b4:	4602      	mov	r2, r0
 80091b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ba:	f7ff bb3b 	b.w	8008834 <_dtoa_r+0x34>
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	3202      	adds	r2, #2
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	f107 010c 	add.w	r1, r7, #12
 80091c8:	300c      	adds	r0, #12
 80091ca:	f000 fc95 	bl	8009af8 <memcpy>
 80091ce:	2201      	movs	r2, #1
 80091d0:	4629      	mov	r1, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fefa 	bl	8009fcc <__lshift>
 80091d8:	9b01      	ldr	r3, [sp, #4]
 80091da:	f103 0901 	add.w	r9, r3, #1
 80091de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	f00a 0301 	and.w	r3, sl, #1
 80091ea:	46b8      	mov	r8, r7
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	4607      	mov	r7, r0
 80091f0:	4631      	mov	r1, r6
 80091f2:	ee18 0a10 	vmov	r0, s16
 80091f6:	f7ff fa77 	bl	80086e8 <quorem>
 80091fa:	4641      	mov	r1, r8
 80091fc:	9002      	str	r0, [sp, #8]
 80091fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009202:	ee18 0a10 	vmov	r0, s16
 8009206:	f000 ff51 	bl	800a0ac <__mcmp>
 800920a:	463a      	mov	r2, r7
 800920c:	9003      	str	r0, [sp, #12]
 800920e:	4631      	mov	r1, r6
 8009210:	4620      	mov	r0, r4
 8009212:	f000 ff67 	bl	800a0e4 <__mdiff>
 8009216:	68c2      	ldr	r2, [r0, #12]
 8009218:	f109 3bff 	add.w	fp, r9, #4294967295
 800921c:	4605      	mov	r5, r0
 800921e:	bb02      	cbnz	r2, 8009262 <_dtoa_r+0xa62>
 8009220:	4601      	mov	r1, r0
 8009222:	ee18 0a10 	vmov	r0, s16
 8009226:	f000 ff41 	bl	800a0ac <__mcmp>
 800922a:	4602      	mov	r2, r0
 800922c:	4629      	mov	r1, r5
 800922e:	4620      	mov	r0, r4
 8009230:	9207      	str	r2, [sp, #28]
 8009232:	f000 fcaf 	bl	8009b94 <_Bfree>
 8009236:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800923a:	ea43 0102 	orr.w	r1, r3, r2
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	430b      	orrs	r3, r1
 8009242:	464d      	mov	r5, r9
 8009244:	d10f      	bne.n	8009266 <_dtoa_r+0xa66>
 8009246:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800924a:	d02a      	beq.n	80092a2 <_dtoa_r+0xaa2>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	dd02      	ble.n	8009258 <_dtoa_r+0xa58>
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009258:	f88b a000 	strb.w	sl, [fp]
 800925c:	e775      	b.n	800914a <_dtoa_r+0x94a>
 800925e:	4638      	mov	r0, r7
 8009260:	e7ba      	b.n	80091d8 <_dtoa_r+0x9d8>
 8009262:	2201      	movs	r2, #1
 8009264:	e7e2      	b.n	800922c <_dtoa_r+0xa2c>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	db04      	blt.n	8009276 <_dtoa_r+0xa76>
 800926c:	9906      	ldr	r1, [sp, #24]
 800926e:	430b      	orrs	r3, r1
 8009270:	9904      	ldr	r1, [sp, #16]
 8009272:	430b      	orrs	r3, r1
 8009274:	d122      	bne.n	80092bc <_dtoa_r+0xabc>
 8009276:	2a00      	cmp	r2, #0
 8009278:	ddee      	ble.n	8009258 <_dtoa_r+0xa58>
 800927a:	ee18 1a10 	vmov	r1, s16
 800927e:	2201      	movs	r2, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fea3 	bl	8009fcc <__lshift>
 8009286:	4631      	mov	r1, r6
 8009288:	ee08 0a10 	vmov	s16, r0
 800928c:	f000 ff0e 	bl	800a0ac <__mcmp>
 8009290:	2800      	cmp	r0, #0
 8009292:	dc03      	bgt.n	800929c <_dtoa_r+0xa9c>
 8009294:	d1e0      	bne.n	8009258 <_dtoa_r+0xa58>
 8009296:	f01a 0f01 	tst.w	sl, #1
 800929a:	d0dd      	beq.n	8009258 <_dtoa_r+0xa58>
 800929c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092a0:	d1d7      	bne.n	8009252 <_dtoa_r+0xa52>
 80092a2:	2339      	movs	r3, #57	; 0x39
 80092a4:	f88b 3000 	strb.w	r3, [fp]
 80092a8:	462b      	mov	r3, r5
 80092aa:	461d      	mov	r5, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092b2:	2a39      	cmp	r2, #57	; 0x39
 80092b4:	d071      	beq.n	800939a <_dtoa_r+0xb9a>
 80092b6:	3201      	adds	r2, #1
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e746      	b.n	800914a <_dtoa_r+0x94a>
 80092bc:	2a00      	cmp	r2, #0
 80092be:	dd07      	ble.n	80092d0 <_dtoa_r+0xad0>
 80092c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092c4:	d0ed      	beq.n	80092a2 <_dtoa_r+0xaa2>
 80092c6:	f10a 0301 	add.w	r3, sl, #1
 80092ca:	f88b 3000 	strb.w	r3, [fp]
 80092ce:	e73c      	b.n	800914a <_dtoa_r+0x94a>
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80092d6:	4599      	cmp	r9, r3
 80092d8:	d047      	beq.n	800936a <_dtoa_r+0xb6a>
 80092da:	ee18 1a10 	vmov	r1, s16
 80092de:	2300      	movs	r3, #0
 80092e0:	220a      	movs	r2, #10
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fc78 	bl	8009bd8 <__multadd>
 80092e8:	45b8      	cmp	r8, r7
 80092ea:	ee08 0a10 	vmov	s16, r0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	f04f 020a 	mov.w	r2, #10
 80092f6:	4641      	mov	r1, r8
 80092f8:	4620      	mov	r0, r4
 80092fa:	d106      	bne.n	800930a <_dtoa_r+0xb0a>
 80092fc:	f000 fc6c 	bl	8009bd8 <__multadd>
 8009300:	4680      	mov	r8, r0
 8009302:	4607      	mov	r7, r0
 8009304:	f109 0901 	add.w	r9, r9, #1
 8009308:	e772      	b.n	80091f0 <_dtoa_r+0x9f0>
 800930a:	f000 fc65 	bl	8009bd8 <__multadd>
 800930e:	4639      	mov	r1, r7
 8009310:	4680      	mov	r8, r0
 8009312:	2300      	movs	r3, #0
 8009314:	220a      	movs	r2, #10
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fc5e 	bl	8009bd8 <__multadd>
 800931c:	4607      	mov	r7, r0
 800931e:	e7f1      	b.n	8009304 <_dtoa_r+0xb04>
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	9302      	str	r3, [sp, #8]
 8009324:	9d01      	ldr	r5, [sp, #4]
 8009326:	ee18 0a10 	vmov	r0, s16
 800932a:	4631      	mov	r1, r6
 800932c:	f7ff f9dc 	bl	80086e8 <quorem>
 8009330:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	f805 ab01 	strb.w	sl, [r5], #1
 800933a:	1aea      	subs	r2, r5, r3
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	4293      	cmp	r3, r2
 8009340:	dd09      	ble.n	8009356 <_dtoa_r+0xb56>
 8009342:	ee18 1a10 	vmov	r1, s16
 8009346:	2300      	movs	r3, #0
 8009348:	220a      	movs	r2, #10
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fc44 	bl	8009bd8 <__multadd>
 8009350:	ee08 0a10 	vmov	s16, r0
 8009354:	e7e7      	b.n	8009326 <_dtoa_r+0xb26>
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfc8      	it	gt
 800935c:	461d      	movgt	r5, r3
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	bfd8      	it	le
 8009362:	2501      	movle	r5, #1
 8009364:	441d      	add	r5, r3
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	ee18 1a10 	vmov	r1, s16
 800936e:	2201      	movs	r2, #1
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fe2b 	bl	8009fcc <__lshift>
 8009376:	4631      	mov	r1, r6
 8009378:	ee08 0a10 	vmov	s16, r0
 800937c:	f000 fe96 	bl	800a0ac <__mcmp>
 8009380:	2800      	cmp	r0, #0
 8009382:	dc91      	bgt.n	80092a8 <_dtoa_r+0xaa8>
 8009384:	d102      	bne.n	800938c <_dtoa_r+0xb8c>
 8009386:	f01a 0f01 	tst.w	sl, #1
 800938a:	d18d      	bne.n	80092a8 <_dtoa_r+0xaa8>
 800938c:	462b      	mov	r3, r5
 800938e:	461d      	mov	r5, r3
 8009390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009394:	2a30      	cmp	r2, #48	; 0x30
 8009396:	d0fa      	beq.n	800938e <_dtoa_r+0xb8e>
 8009398:	e6d7      	b.n	800914a <_dtoa_r+0x94a>
 800939a:	9a01      	ldr	r2, [sp, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d184      	bne.n	80092aa <_dtoa_r+0xaaa>
 80093a0:	9b00      	ldr	r3, [sp, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2331      	movs	r3, #49	; 0x31
 80093a8:	7013      	strb	r3, [r2, #0]
 80093aa:	e6ce      	b.n	800914a <_dtoa_r+0x94a>
 80093ac:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <_dtoa_r+0xbd4>)
 80093ae:	f7ff ba95 	b.w	80088dc <_dtoa_r+0xdc>
 80093b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f47f aa6e 	bne.w	8008896 <_dtoa_r+0x96>
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <_dtoa_r+0xbd8>)
 80093bc:	f7ff ba8e 	b.w	80088dc <_dtoa_r+0xdc>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dcae      	bgt.n	8009324 <_dtoa_r+0xb24>
 80093c6:	9b06      	ldr	r3, [sp, #24]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f73f aea8 	bgt.w	800911e <_dtoa_r+0x91e>
 80093ce:	e7a9      	b.n	8009324 <_dtoa_r+0xb24>
 80093d0:	0800ba08 	.word	0x0800ba08
 80093d4:	0800b80c 	.word	0x0800b80c
 80093d8:	0800b989 	.word	0x0800b989

080093dc <rshift>:
 80093dc:	6903      	ldr	r3, [r0, #16]
 80093de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093ea:	f100 0414 	add.w	r4, r0, #20
 80093ee:	dd45      	ble.n	800947c <rshift+0xa0>
 80093f0:	f011 011f 	ands.w	r1, r1, #31
 80093f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093fc:	d10c      	bne.n	8009418 <rshift+0x3c>
 80093fe:	f100 0710 	add.w	r7, r0, #16
 8009402:	4629      	mov	r1, r5
 8009404:	42b1      	cmp	r1, r6
 8009406:	d334      	bcc.n	8009472 <rshift+0x96>
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	1eea      	subs	r2, r5, #3
 800940e:	4296      	cmp	r6, r2
 8009410:	bf38      	it	cc
 8009412:	2300      	movcc	r3, #0
 8009414:	4423      	add	r3, r4
 8009416:	e015      	b.n	8009444 <rshift+0x68>
 8009418:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800941c:	f1c1 0820 	rsb	r8, r1, #32
 8009420:	40cf      	lsrs	r7, r1
 8009422:	f105 0e04 	add.w	lr, r5, #4
 8009426:	46a1      	mov	r9, r4
 8009428:	4576      	cmp	r6, lr
 800942a:	46f4      	mov	ip, lr
 800942c:	d815      	bhi.n	800945a <rshift+0x7e>
 800942e:	1a9a      	subs	r2, r3, r2
 8009430:	0092      	lsls	r2, r2, #2
 8009432:	3a04      	subs	r2, #4
 8009434:	3501      	adds	r5, #1
 8009436:	42ae      	cmp	r6, r5
 8009438:	bf38      	it	cc
 800943a:	2200      	movcc	r2, #0
 800943c:	18a3      	adds	r3, r4, r2
 800943e:	50a7      	str	r7, [r4, r2]
 8009440:	b107      	cbz	r7, 8009444 <rshift+0x68>
 8009442:	3304      	adds	r3, #4
 8009444:	1b1a      	subs	r2, r3, r4
 8009446:	42a3      	cmp	r3, r4
 8009448:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800944c:	bf08      	it	eq
 800944e:	2300      	moveq	r3, #0
 8009450:	6102      	str	r2, [r0, #16]
 8009452:	bf08      	it	eq
 8009454:	6143      	streq	r3, [r0, #20]
 8009456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800945a:	f8dc c000 	ldr.w	ip, [ip]
 800945e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009462:	ea4c 0707 	orr.w	r7, ip, r7
 8009466:	f849 7b04 	str.w	r7, [r9], #4
 800946a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800946e:	40cf      	lsrs	r7, r1
 8009470:	e7da      	b.n	8009428 <rshift+0x4c>
 8009472:	f851 cb04 	ldr.w	ip, [r1], #4
 8009476:	f847 cf04 	str.w	ip, [r7, #4]!
 800947a:	e7c3      	b.n	8009404 <rshift+0x28>
 800947c:	4623      	mov	r3, r4
 800947e:	e7e1      	b.n	8009444 <rshift+0x68>

08009480 <__hexdig_fun>:
 8009480:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009484:	2b09      	cmp	r3, #9
 8009486:	d802      	bhi.n	800948e <__hexdig_fun+0xe>
 8009488:	3820      	subs	r0, #32
 800948a:	b2c0      	uxtb	r0, r0
 800948c:	4770      	bx	lr
 800948e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009492:	2b05      	cmp	r3, #5
 8009494:	d801      	bhi.n	800949a <__hexdig_fun+0x1a>
 8009496:	3847      	subs	r0, #71	; 0x47
 8009498:	e7f7      	b.n	800948a <__hexdig_fun+0xa>
 800949a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d801      	bhi.n	80094a6 <__hexdig_fun+0x26>
 80094a2:	3827      	subs	r0, #39	; 0x27
 80094a4:	e7f1      	b.n	800948a <__hexdig_fun+0xa>
 80094a6:	2000      	movs	r0, #0
 80094a8:	4770      	bx	lr
	...

080094ac <__gethex>:
 80094ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	ed2d 8b02 	vpush	{d8}
 80094b4:	b089      	sub	sp, #36	; 0x24
 80094b6:	ee08 0a10 	vmov	s16, r0
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	4bb4      	ldr	r3, [pc, #720]	; (8009790 <__gethex+0x2e4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	4618      	mov	r0, r3
 80094c4:	468b      	mov	fp, r1
 80094c6:	4690      	mov	r8, r2
 80094c8:	f7f6 fe82 	bl	80001d0 <strlen>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	f8db 2000 	ldr.w	r2, [fp]
 80094d2:	4403      	add	r3, r0
 80094d4:	4682      	mov	sl, r0
 80094d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80094da:	9305      	str	r3, [sp, #20]
 80094dc:	1c93      	adds	r3, r2, #2
 80094de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094e6:	32fe      	adds	r2, #254	; 0xfe
 80094e8:	18d1      	adds	r1, r2, r3
 80094ea:	461f      	mov	r7, r3
 80094ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094f0:	9100      	str	r1, [sp, #0]
 80094f2:	2830      	cmp	r0, #48	; 0x30
 80094f4:	d0f8      	beq.n	80094e8 <__gethex+0x3c>
 80094f6:	f7ff ffc3 	bl	8009480 <__hexdig_fun>
 80094fa:	4604      	mov	r4, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d13a      	bne.n	8009576 <__gethex+0xca>
 8009500:	9901      	ldr	r1, [sp, #4]
 8009502:	4652      	mov	r2, sl
 8009504:	4638      	mov	r0, r7
 8009506:	f001 fa33 	bl	800a970 <strncmp>
 800950a:	4605      	mov	r5, r0
 800950c:	2800      	cmp	r0, #0
 800950e:	d168      	bne.n	80095e2 <__gethex+0x136>
 8009510:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009514:	eb07 060a 	add.w	r6, r7, sl
 8009518:	f7ff ffb2 	bl	8009480 <__hexdig_fun>
 800951c:	2800      	cmp	r0, #0
 800951e:	d062      	beq.n	80095e6 <__gethex+0x13a>
 8009520:	4633      	mov	r3, r6
 8009522:	7818      	ldrb	r0, [r3, #0]
 8009524:	2830      	cmp	r0, #48	; 0x30
 8009526:	461f      	mov	r7, r3
 8009528:	f103 0301 	add.w	r3, r3, #1
 800952c:	d0f9      	beq.n	8009522 <__gethex+0x76>
 800952e:	f7ff ffa7 	bl	8009480 <__hexdig_fun>
 8009532:	2301      	movs	r3, #1
 8009534:	fab0 f480 	clz	r4, r0
 8009538:	0964      	lsrs	r4, r4, #5
 800953a:	4635      	mov	r5, r6
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	463a      	mov	r2, r7
 8009540:	4616      	mov	r6, r2
 8009542:	3201      	adds	r2, #1
 8009544:	7830      	ldrb	r0, [r6, #0]
 8009546:	f7ff ff9b 	bl	8009480 <__hexdig_fun>
 800954a:	2800      	cmp	r0, #0
 800954c:	d1f8      	bne.n	8009540 <__gethex+0x94>
 800954e:	9901      	ldr	r1, [sp, #4]
 8009550:	4652      	mov	r2, sl
 8009552:	4630      	mov	r0, r6
 8009554:	f001 fa0c 	bl	800a970 <strncmp>
 8009558:	b980      	cbnz	r0, 800957c <__gethex+0xd0>
 800955a:	b94d      	cbnz	r5, 8009570 <__gethex+0xc4>
 800955c:	eb06 050a 	add.w	r5, r6, sl
 8009560:	462a      	mov	r2, r5
 8009562:	4616      	mov	r6, r2
 8009564:	3201      	adds	r2, #1
 8009566:	7830      	ldrb	r0, [r6, #0]
 8009568:	f7ff ff8a 	bl	8009480 <__hexdig_fun>
 800956c:	2800      	cmp	r0, #0
 800956e:	d1f8      	bne.n	8009562 <__gethex+0xb6>
 8009570:	1bad      	subs	r5, r5, r6
 8009572:	00ad      	lsls	r5, r5, #2
 8009574:	e004      	b.n	8009580 <__gethex+0xd4>
 8009576:	2400      	movs	r4, #0
 8009578:	4625      	mov	r5, r4
 800957a:	e7e0      	b.n	800953e <__gethex+0x92>
 800957c:	2d00      	cmp	r5, #0
 800957e:	d1f7      	bne.n	8009570 <__gethex+0xc4>
 8009580:	7833      	ldrb	r3, [r6, #0]
 8009582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009586:	2b50      	cmp	r3, #80	; 0x50
 8009588:	d13b      	bne.n	8009602 <__gethex+0x156>
 800958a:	7873      	ldrb	r3, [r6, #1]
 800958c:	2b2b      	cmp	r3, #43	; 0x2b
 800958e:	d02c      	beq.n	80095ea <__gethex+0x13e>
 8009590:	2b2d      	cmp	r3, #45	; 0x2d
 8009592:	d02e      	beq.n	80095f2 <__gethex+0x146>
 8009594:	1c71      	adds	r1, r6, #1
 8009596:	f04f 0900 	mov.w	r9, #0
 800959a:	7808      	ldrb	r0, [r1, #0]
 800959c:	f7ff ff70 	bl	8009480 <__hexdig_fun>
 80095a0:	1e43      	subs	r3, r0, #1
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b18      	cmp	r3, #24
 80095a6:	d82c      	bhi.n	8009602 <__gethex+0x156>
 80095a8:	f1a0 0210 	sub.w	r2, r0, #16
 80095ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095b0:	f7ff ff66 	bl	8009480 <__hexdig_fun>
 80095b4:	1e43      	subs	r3, r0, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b18      	cmp	r3, #24
 80095ba:	d91d      	bls.n	80095f8 <__gethex+0x14c>
 80095bc:	f1b9 0f00 	cmp.w	r9, #0
 80095c0:	d000      	beq.n	80095c4 <__gethex+0x118>
 80095c2:	4252      	negs	r2, r2
 80095c4:	4415      	add	r5, r2
 80095c6:	f8cb 1000 	str.w	r1, [fp]
 80095ca:	b1e4      	cbz	r4, 8009606 <__gethex+0x15a>
 80095cc:	9b00      	ldr	r3, [sp, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bf14      	ite	ne
 80095d2:	2700      	movne	r7, #0
 80095d4:	2706      	moveq	r7, #6
 80095d6:	4638      	mov	r0, r7
 80095d8:	b009      	add	sp, #36	; 0x24
 80095da:	ecbd 8b02 	vpop	{d8}
 80095de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e2:	463e      	mov	r6, r7
 80095e4:	4625      	mov	r5, r4
 80095e6:	2401      	movs	r4, #1
 80095e8:	e7ca      	b.n	8009580 <__gethex+0xd4>
 80095ea:	f04f 0900 	mov.w	r9, #0
 80095ee:	1cb1      	adds	r1, r6, #2
 80095f0:	e7d3      	b.n	800959a <__gethex+0xee>
 80095f2:	f04f 0901 	mov.w	r9, #1
 80095f6:	e7fa      	b.n	80095ee <__gethex+0x142>
 80095f8:	230a      	movs	r3, #10
 80095fa:	fb03 0202 	mla	r2, r3, r2, r0
 80095fe:	3a10      	subs	r2, #16
 8009600:	e7d4      	b.n	80095ac <__gethex+0x100>
 8009602:	4631      	mov	r1, r6
 8009604:	e7df      	b.n	80095c6 <__gethex+0x11a>
 8009606:	1bf3      	subs	r3, r6, r7
 8009608:	3b01      	subs	r3, #1
 800960a:	4621      	mov	r1, r4
 800960c:	2b07      	cmp	r3, #7
 800960e:	dc0b      	bgt.n	8009628 <__gethex+0x17c>
 8009610:	ee18 0a10 	vmov	r0, s16
 8009614:	f000 fa7e 	bl	8009b14 <_Balloc>
 8009618:	4604      	mov	r4, r0
 800961a:	b940      	cbnz	r0, 800962e <__gethex+0x182>
 800961c:	4b5d      	ldr	r3, [pc, #372]	; (8009794 <__gethex+0x2e8>)
 800961e:	4602      	mov	r2, r0
 8009620:	21de      	movs	r1, #222	; 0xde
 8009622:	485d      	ldr	r0, [pc, #372]	; (8009798 <__gethex+0x2ec>)
 8009624:	f001 f9c6 	bl	800a9b4 <__assert_func>
 8009628:	3101      	adds	r1, #1
 800962a:	105b      	asrs	r3, r3, #1
 800962c:	e7ee      	b.n	800960c <__gethex+0x160>
 800962e:	f100 0914 	add.w	r9, r0, #20
 8009632:	f04f 0b00 	mov.w	fp, #0
 8009636:	f1ca 0301 	rsb	r3, sl, #1
 800963a:	f8cd 9008 	str.w	r9, [sp, #8]
 800963e:	f8cd b000 	str.w	fp, [sp]
 8009642:	9306      	str	r3, [sp, #24]
 8009644:	42b7      	cmp	r7, r6
 8009646:	d340      	bcc.n	80096ca <__gethex+0x21e>
 8009648:	9802      	ldr	r0, [sp, #8]
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	f840 3b04 	str.w	r3, [r0], #4
 8009650:	eba0 0009 	sub.w	r0, r0, r9
 8009654:	1080      	asrs	r0, r0, #2
 8009656:	0146      	lsls	r6, r0, #5
 8009658:	6120      	str	r0, [r4, #16]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fb4c 	bl	8009cf8 <__hi0bits>
 8009660:	1a30      	subs	r0, r6, r0
 8009662:	f8d8 6000 	ldr.w	r6, [r8]
 8009666:	42b0      	cmp	r0, r6
 8009668:	dd63      	ble.n	8009732 <__gethex+0x286>
 800966a:	1b87      	subs	r7, r0, r6
 800966c:	4639      	mov	r1, r7
 800966e:	4620      	mov	r0, r4
 8009670:	f000 fef0 	bl	800a454 <__any_on>
 8009674:	4682      	mov	sl, r0
 8009676:	b1a8      	cbz	r0, 80096a4 <__gethex+0x1f8>
 8009678:	1e7b      	subs	r3, r7, #1
 800967a:	1159      	asrs	r1, r3, #5
 800967c:	f003 021f 	and.w	r2, r3, #31
 8009680:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009684:	f04f 0a01 	mov.w	sl, #1
 8009688:	fa0a f202 	lsl.w	r2, sl, r2
 800968c:	420a      	tst	r2, r1
 800968e:	d009      	beq.n	80096a4 <__gethex+0x1f8>
 8009690:	4553      	cmp	r3, sl
 8009692:	dd05      	ble.n	80096a0 <__gethex+0x1f4>
 8009694:	1eb9      	subs	r1, r7, #2
 8009696:	4620      	mov	r0, r4
 8009698:	f000 fedc 	bl	800a454 <__any_on>
 800969c:	2800      	cmp	r0, #0
 800969e:	d145      	bne.n	800972c <__gethex+0x280>
 80096a0:	f04f 0a02 	mov.w	sl, #2
 80096a4:	4639      	mov	r1, r7
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7ff fe98 	bl	80093dc <rshift>
 80096ac:	443d      	add	r5, r7
 80096ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096b2:	42ab      	cmp	r3, r5
 80096b4:	da4c      	bge.n	8009750 <__gethex+0x2a4>
 80096b6:	ee18 0a10 	vmov	r0, s16
 80096ba:	4621      	mov	r1, r4
 80096bc:	f000 fa6a 	bl	8009b94 <_Bfree>
 80096c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096c2:	2300      	movs	r3, #0
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	27a3      	movs	r7, #163	; 0xa3
 80096c8:	e785      	b.n	80095d6 <__gethex+0x12a>
 80096ca:	1e73      	subs	r3, r6, #1
 80096cc:	9a05      	ldr	r2, [sp, #20]
 80096ce:	9303      	str	r3, [sp, #12]
 80096d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d019      	beq.n	800970c <__gethex+0x260>
 80096d8:	f1bb 0f20 	cmp.w	fp, #32
 80096dc:	d107      	bne.n	80096ee <__gethex+0x242>
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	9a00      	ldr	r2, [sp, #0]
 80096e2:	f843 2b04 	str.w	r2, [r3], #4
 80096e6:	9302      	str	r3, [sp, #8]
 80096e8:	2300      	movs	r3, #0
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	469b      	mov	fp, r3
 80096ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096f2:	f7ff fec5 	bl	8009480 <__hexdig_fun>
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	f000 000f 	and.w	r0, r0, #15
 80096fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009700:	4303      	orrs	r3, r0
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	f10b 0b04 	add.w	fp, fp, #4
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	e00d      	b.n	8009728 <__gethex+0x27c>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	9a06      	ldr	r2, [sp, #24]
 8009710:	4413      	add	r3, r2
 8009712:	42bb      	cmp	r3, r7
 8009714:	d3e0      	bcc.n	80096d8 <__gethex+0x22c>
 8009716:	4618      	mov	r0, r3
 8009718:	9901      	ldr	r1, [sp, #4]
 800971a:	9307      	str	r3, [sp, #28]
 800971c:	4652      	mov	r2, sl
 800971e:	f001 f927 	bl	800a970 <strncmp>
 8009722:	9b07      	ldr	r3, [sp, #28]
 8009724:	2800      	cmp	r0, #0
 8009726:	d1d7      	bne.n	80096d8 <__gethex+0x22c>
 8009728:	461e      	mov	r6, r3
 800972a:	e78b      	b.n	8009644 <__gethex+0x198>
 800972c:	f04f 0a03 	mov.w	sl, #3
 8009730:	e7b8      	b.n	80096a4 <__gethex+0x1f8>
 8009732:	da0a      	bge.n	800974a <__gethex+0x29e>
 8009734:	1a37      	subs	r7, r6, r0
 8009736:	4621      	mov	r1, r4
 8009738:	ee18 0a10 	vmov	r0, s16
 800973c:	463a      	mov	r2, r7
 800973e:	f000 fc45 	bl	8009fcc <__lshift>
 8009742:	1bed      	subs	r5, r5, r7
 8009744:	4604      	mov	r4, r0
 8009746:	f100 0914 	add.w	r9, r0, #20
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	e7ae      	b.n	80096ae <__gethex+0x202>
 8009750:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009754:	42a8      	cmp	r0, r5
 8009756:	dd72      	ble.n	800983e <__gethex+0x392>
 8009758:	1b45      	subs	r5, r0, r5
 800975a:	42ae      	cmp	r6, r5
 800975c:	dc36      	bgt.n	80097cc <__gethex+0x320>
 800975e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009762:	2b02      	cmp	r3, #2
 8009764:	d02a      	beq.n	80097bc <__gethex+0x310>
 8009766:	2b03      	cmp	r3, #3
 8009768:	d02c      	beq.n	80097c4 <__gethex+0x318>
 800976a:	2b01      	cmp	r3, #1
 800976c:	d11c      	bne.n	80097a8 <__gethex+0x2fc>
 800976e:	42ae      	cmp	r6, r5
 8009770:	d11a      	bne.n	80097a8 <__gethex+0x2fc>
 8009772:	2e01      	cmp	r6, #1
 8009774:	d112      	bne.n	800979c <__gethex+0x2f0>
 8009776:	9a04      	ldr	r2, [sp, #16]
 8009778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	2301      	movs	r3, #1
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	f8c9 3000 	str.w	r3, [r9]
 8009786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009788:	2762      	movs	r7, #98	; 0x62
 800978a:	601c      	str	r4, [r3, #0]
 800978c:	e723      	b.n	80095d6 <__gethex+0x12a>
 800978e:	bf00      	nop
 8009790:	0800ba80 	.word	0x0800ba80
 8009794:	0800ba08 	.word	0x0800ba08
 8009798:	0800ba19 	.word	0x0800ba19
 800979c:	1e71      	subs	r1, r6, #1
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fe58 	bl	800a454 <__any_on>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d1e6      	bne.n	8009776 <__gethex+0x2ca>
 80097a8:	ee18 0a10 	vmov	r0, s16
 80097ac:	4621      	mov	r1, r4
 80097ae:	f000 f9f1 	bl	8009b94 <_Bfree>
 80097b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097b4:	2300      	movs	r3, #0
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	2750      	movs	r7, #80	; 0x50
 80097ba:	e70c      	b.n	80095d6 <__gethex+0x12a>
 80097bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f2      	bne.n	80097a8 <__gethex+0x2fc>
 80097c2:	e7d8      	b.n	8009776 <__gethex+0x2ca>
 80097c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1d5      	bne.n	8009776 <__gethex+0x2ca>
 80097ca:	e7ed      	b.n	80097a8 <__gethex+0x2fc>
 80097cc:	1e6f      	subs	r7, r5, #1
 80097ce:	f1ba 0f00 	cmp.w	sl, #0
 80097d2:	d131      	bne.n	8009838 <__gethex+0x38c>
 80097d4:	b127      	cbz	r7, 80097e0 <__gethex+0x334>
 80097d6:	4639      	mov	r1, r7
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fe3b 	bl	800a454 <__any_on>
 80097de:	4682      	mov	sl, r0
 80097e0:	117b      	asrs	r3, r7, #5
 80097e2:	2101      	movs	r1, #1
 80097e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80097e8:	f007 071f 	and.w	r7, r7, #31
 80097ec:	fa01 f707 	lsl.w	r7, r1, r7
 80097f0:	421f      	tst	r7, r3
 80097f2:	4629      	mov	r1, r5
 80097f4:	4620      	mov	r0, r4
 80097f6:	bf18      	it	ne
 80097f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80097fc:	1b76      	subs	r6, r6, r5
 80097fe:	f7ff fded 	bl	80093dc <rshift>
 8009802:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009806:	2702      	movs	r7, #2
 8009808:	f1ba 0f00 	cmp.w	sl, #0
 800980c:	d048      	beq.n	80098a0 <__gethex+0x3f4>
 800980e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009812:	2b02      	cmp	r3, #2
 8009814:	d015      	beq.n	8009842 <__gethex+0x396>
 8009816:	2b03      	cmp	r3, #3
 8009818:	d017      	beq.n	800984a <__gethex+0x39e>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d109      	bne.n	8009832 <__gethex+0x386>
 800981e:	f01a 0f02 	tst.w	sl, #2
 8009822:	d006      	beq.n	8009832 <__gethex+0x386>
 8009824:	f8d9 0000 	ldr.w	r0, [r9]
 8009828:	ea4a 0a00 	orr.w	sl, sl, r0
 800982c:	f01a 0f01 	tst.w	sl, #1
 8009830:	d10e      	bne.n	8009850 <__gethex+0x3a4>
 8009832:	f047 0710 	orr.w	r7, r7, #16
 8009836:	e033      	b.n	80098a0 <__gethex+0x3f4>
 8009838:	f04f 0a01 	mov.w	sl, #1
 800983c:	e7d0      	b.n	80097e0 <__gethex+0x334>
 800983e:	2701      	movs	r7, #1
 8009840:	e7e2      	b.n	8009808 <__gethex+0x35c>
 8009842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009844:	f1c3 0301 	rsb	r3, r3, #1
 8009848:	9315      	str	r3, [sp, #84]	; 0x54
 800984a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f0      	beq.n	8009832 <__gethex+0x386>
 8009850:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009854:	f104 0314 	add.w	r3, r4, #20
 8009858:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800985c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009860:	f04f 0c00 	mov.w	ip, #0
 8009864:	4618      	mov	r0, r3
 8009866:	f853 2b04 	ldr.w	r2, [r3], #4
 800986a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800986e:	d01c      	beq.n	80098aa <__gethex+0x3fe>
 8009870:	3201      	adds	r2, #1
 8009872:	6002      	str	r2, [r0, #0]
 8009874:	2f02      	cmp	r7, #2
 8009876:	f104 0314 	add.w	r3, r4, #20
 800987a:	d13f      	bne.n	80098fc <__gethex+0x450>
 800987c:	f8d8 2000 	ldr.w	r2, [r8]
 8009880:	3a01      	subs	r2, #1
 8009882:	42b2      	cmp	r2, r6
 8009884:	d10a      	bne.n	800989c <__gethex+0x3f0>
 8009886:	1171      	asrs	r1, r6, #5
 8009888:	2201      	movs	r2, #1
 800988a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800988e:	f006 061f 	and.w	r6, r6, #31
 8009892:	fa02 f606 	lsl.w	r6, r2, r6
 8009896:	421e      	tst	r6, r3
 8009898:	bf18      	it	ne
 800989a:	4617      	movne	r7, r2
 800989c:	f047 0720 	orr.w	r7, r7, #32
 80098a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098a2:	601c      	str	r4, [r3, #0]
 80098a4:	9b04      	ldr	r3, [sp, #16]
 80098a6:	601d      	str	r5, [r3, #0]
 80098a8:	e695      	b.n	80095d6 <__gethex+0x12a>
 80098aa:	4299      	cmp	r1, r3
 80098ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80098b0:	d8d8      	bhi.n	8009864 <__gethex+0x3b8>
 80098b2:	68a3      	ldr	r3, [r4, #8]
 80098b4:	459b      	cmp	fp, r3
 80098b6:	db19      	blt.n	80098ec <__gethex+0x440>
 80098b8:	6861      	ldr	r1, [r4, #4]
 80098ba:	ee18 0a10 	vmov	r0, s16
 80098be:	3101      	adds	r1, #1
 80098c0:	f000 f928 	bl	8009b14 <_Balloc>
 80098c4:	4681      	mov	r9, r0
 80098c6:	b918      	cbnz	r0, 80098d0 <__gethex+0x424>
 80098c8:	4b1a      	ldr	r3, [pc, #104]	; (8009934 <__gethex+0x488>)
 80098ca:	4602      	mov	r2, r0
 80098cc:	2184      	movs	r1, #132	; 0x84
 80098ce:	e6a8      	b.n	8009622 <__gethex+0x176>
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	3202      	adds	r2, #2
 80098d4:	f104 010c 	add.w	r1, r4, #12
 80098d8:	0092      	lsls	r2, r2, #2
 80098da:	300c      	adds	r0, #12
 80098dc:	f000 f90c 	bl	8009af8 <memcpy>
 80098e0:	4621      	mov	r1, r4
 80098e2:	ee18 0a10 	vmov	r0, s16
 80098e6:	f000 f955 	bl	8009b94 <_Bfree>
 80098ea:	464c      	mov	r4, r9
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098f4:	6122      	str	r2, [r4, #16]
 80098f6:	2201      	movs	r2, #1
 80098f8:	615a      	str	r2, [r3, #20]
 80098fa:	e7bb      	b.n	8009874 <__gethex+0x3c8>
 80098fc:	6922      	ldr	r2, [r4, #16]
 80098fe:	455a      	cmp	r2, fp
 8009900:	dd0b      	ble.n	800991a <__gethex+0x46e>
 8009902:	2101      	movs	r1, #1
 8009904:	4620      	mov	r0, r4
 8009906:	f7ff fd69 	bl	80093dc <rshift>
 800990a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800990e:	3501      	adds	r5, #1
 8009910:	42ab      	cmp	r3, r5
 8009912:	f6ff aed0 	blt.w	80096b6 <__gethex+0x20a>
 8009916:	2701      	movs	r7, #1
 8009918:	e7c0      	b.n	800989c <__gethex+0x3f0>
 800991a:	f016 061f 	ands.w	r6, r6, #31
 800991e:	d0fa      	beq.n	8009916 <__gethex+0x46a>
 8009920:	4453      	add	r3, sl
 8009922:	f1c6 0620 	rsb	r6, r6, #32
 8009926:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800992a:	f000 f9e5 	bl	8009cf8 <__hi0bits>
 800992e:	42b0      	cmp	r0, r6
 8009930:	dbe7      	blt.n	8009902 <__gethex+0x456>
 8009932:	e7f0      	b.n	8009916 <__gethex+0x46a>
 8009934:	0800ba08 	.word	0x0800ba08

08009938 <L_shift>:
 8009938:	f1c2 0208 	rsb	r2, r2, #8
 800993c:	0092      	lsls	r2, r2, #2
 800993e:	b570      	push	{r4, r5, r6, lr}
 8009940:	f1c2 0620 	rsb	r6, r2, #32
 8009944:	6843      	ldr	r3, [r0, #4]
 8009946:	6804      	ldr	r4, [r0, #0]
 8009948:	fa03 f506 	lsl.w	r5, r3, r6
 800994c:	432c      	orrs	r4, r5
 800994e:	40d3      	lsrs	r3, r2
 8009950:	6004      	str	r4, [r0, #0]
 8009952:	f840 3f04 	str.w	r3, [r0, #4]!
 8009956:	4288      	cmp	r0, r1
 8009958:	d3f4      	bcc.n	8009944 <L_shift+0xc>
 800995a:	bd70      	pop	{r4, r5, r6, pc}

0800995c <__match>:
 800995c:	b530      	push	{r4, r5, lr}
 800995e:	6803      	ldr	r3, [r0, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009966:	b914      	cbnz	r4, 800996e <__match+0x12>
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	2001      	movs	r0, #1
 800996c:	bd30      	pop	{r4, r5, pc}
 800996e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009972:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009976:	2d19      	cmp	r5, #25
 8009978:	bf98      	it	ls
 800997a:	3220      	addls	r2, #32
 800997c:	42a2      	cmp	r2, r4
 800997e:	d0f0      	beq.n	8009962 <__match+0x6>
 8009980:	2000      	movs	r0, #0
 8009982:	e7f3      	b.n	800996c <__match+0x10>

08009984 <__hexnan>:
 8009984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	680b      	ldr	r3, [r1, #0]
 800998a:	115e      	asrs	r6, r3, #5
 800998c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009990:	f013 031f 	ands.w	r3, r3, #31
 8009994:	b087      	sub	sp, #28
 8009996:	bf18      	it	ne
 8009998:	3604      	addne	r6, #4
 800999a:	2500      	movs	r5, #0
 800999c:	1f37      	subs	r7, r6, #4
 800999e:	4690      	mov	r8, r2
 80099a0:	6802      	ldr	r2, [r0, #0]
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	4682      	mov	sl, r0
 80099a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80099aa:	46b9      	mov	r9, r7
 80099ac:	463c      	mov	r4, r7
 80099ae:	9502      	str	r5, [sp, #8]
 80099b0:	46ab      	mov	fp, r5
 80099b2:	7851      	ldrb	r1, [r2, #1]
 80099b4:	1c53      	adds	r3, r2, #1
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	b341      	cbz	r1, 8009a0c <__hexnan+0x88>
 80099ba:	4608      	mov	r0, r1
 80099bc:	9205      	str	r2, [sp, #20]
 80099be:	9104      	str	r1, [sp, #16]
 80099c0:	f7ff fd5e 	bl	8009480 <__hexdig_fun>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d14f      	bne.n	8009a68 <__hexnan+0xe4>
 80099c8:	9904      	ldr	r1, [sp, #16]
 80099ca:	9a05      	ldr	r2, [sp, #20]
 80099cc:	2920      	cmp	r1, #32
 80099ce:	d818      	bhi.n	8009a02 <__hexnan+0x7e>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	459b      	cmp	fp, r3
 80099d4:	dd13      	ble.n	80099fe <__hexnan+0x7a>
 80099d6:	454c      	cmp	r4, r9
 80099d8:	d206      	bcs.n	80099e8 <__hexnan+0x64>
 80099da:	2d07      	cmp	r5, #7
 80099dc:	dc04      	bgt.n	80099e8 <__hexnan+0x64>
 80099de:	462a      	mov	r2, r5
 80099e0:	4649      	mov	r1, r9
 80099e2:	4620      	mov	r0, r4
 80099e4:	f7ff ffa8 	bl	8009938 <L_shift>
 80099e8:	4544      	cmp	r4, r8
 80099ea:	d950      	bls.n	8009a8e <__hexnan+0x10a>
 80099ec:	2300      	movs	r3, #0
 80099ee:	f1a4 0904 	sub.w	r9, r4, #4
 80099f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80099f6:	f8cd b008 	str.w	fp, [sp, #8]
 80099fa:	464c      	mov	r4, r9
 80099fc:	461d      	mov	r5, r3
 80099fe:	9a03      	ldr	r2, [sp, #12]
 8009a00:	e7d7      	b.n	80099b2 <__hexnan+0x2e>
 8009a02:	2929      	cmp	r1, #41	; 0x29
 8009a04:	d156      	bne.n	8009ab4 <__hexnan+0x130>
 8009a06:	3202      	adds	r2, #2
 8009a08:	f8ca 2000 	str.w	r2, [sl]
 8009a0c:	f1bb 0f00 	cmp.w	fp, #0
 8009a10:	d050      	beq.n	8009ab4 <__hexnan+0x130>
 8009a12:	454c      	cmp	r4, r9
 8009a14:	d206      	bcs.n	8009a24 <__hexnan+0xa0>
 8009a16:	2d07      	cmp	r5, #7
 8009a18:	dc04      	bgt.n	8009a24 <__hexnan+0xa0>
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7ff ff8a 	bl	8009938 <L_shift>
 8009a24:	4544      	cmp	r4, r8
 8009a26:	d934      	bls.n	8009a92 <__hexnan+0x10e>
 8009a28:	f1a8 0204 	sub.w	r2, r8, #4
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a32:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a36:	429f      	cmp	r7, r3
 8009a38:	d2f9      	bcs.n	8009a2e <__hexnan+0xaa>
 8009a3a:	1b3b      	subs	r3, r7, r4
 8009a3c:	f023 0303 	bic.w	r3, r3, #3
 8009a40:	3304      	adds	r3, #4
 8009a42:	3401      	adds	r4, #1
 8009a44:	3e03      	subs	r6, #3
 8009a46:	42b4      	cmp	r4, r6
 8009a48:	bf88      	it	hi
 8009a4a:	2304      	movhi	r3, #4
 8009a4c:	4443      	add	r3, r8
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f843 2b04 	str.w	r2, [r3], #4
 8009a54:	429f      	cmp	r7, r3
 8009a56:	d2fb      	bcs.n	8009a50 <__hexnan+0xcc>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	b91b      	cbnz	r3, 8009a64 <__hexnan+0xe0>
 8009a5c:	4547      	cmp	r7, r8
 8009a5e:	d127      	bne.n	8009ab0 <__hexnan+0x12c>
 8009a60:	2301      	movs	r3, #1
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	2005      	movs	r0, #5
 8009a66:	e026      	b.n	8009ab6 <__hexnan+0x132>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	2d08      	cmp	r5, #8
 8009a6c:	f10b 0b01 	add.w	fp, fp, #1
 8009a70:	dd06      	ble.n	8009a80 <__hexnan+0xfc>
 8009a72:	4544      	cmp	r4, r8
 8009a74:	d9c3      	bls.n	80099fe <__hexnan+0x7a>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a7c:	2501      	movs	r5, #1
 8009a7e:	3c04      	subs	r4, #4
 8009a80:	6822      	ldr	r2, [r4, #0]
 8009a82:	f000 000f 	and.w	r0, r0, #15
 8009a86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a8a:	6022      	str	r2, [r4, #0]
 8009a8c:	e7b7      	b.n	80099fe <__hexnan+0x7a>
 8009a8e:	2508      	movs	r5, #8
 8009a90:	e7b5      	b.n	80099fe <__hexnan+0x7a>
 8009a92:	9b01      	ldr	r3, [sp, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0df      	beq.n	8009a58 <__hexnan+0xd4>
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	f1c3 0320 	rsb	r3, r3, #32
 8009aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009aa8:	401a      	ands	r2, r3
 8009aaa:	f846 2c04 	str.w	r2, [r6, #-4]
 8009aae:	e7d3      	b.n	8009a58 <__hexnan+0xd4>
 8009ab0:	3f04      	subs	r7, #4
 8009ab2:	e7d1      	b.n	8009a58 <__hexnan+0xd4>
 8009ab4:	2004      	movs	r0, #4
 8009ab6:	b007      	add	sp, #28
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009abc <_localeconv_r>:
 8009abc:	4800      	ldr	r0, [pc, #0]	; (8009ac0 <_localeconv_r+0x4>)
 8009abe:	4770      	bx	lr
 8009ac0:	20000164 	.word	0x20000164

08009ac4 <malloc>:
 8009ac4:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <malloc+0xc>)
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	f000 bd67 	b.w	800a59c <_malloc_r>
 8009ace:	bf00      	nop
 8009ad0:	2000000c 	.word	0x2000000c

08009ad4 <__ascii_mbtowc>:
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	b901      	cbnz	r1, 8009ada <__ascii_mbtowc+0x6>
 8009ad8:	a901      	add	r1, sp, #4
 8009ada:	b142      	cbz	r2, 8009aee <__ascii_mbtowc+0x1a>
 8009adc:	b14b      	cbz	r3, 8009af2 <__ascii_mbtowc+0x1e>
 8009ade:	7813      	ldrb	r3, [r2, #0]
 8009ae0:	600b      	str	r3, [r1, #0]
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	1e10      	subs	r0, r2, #0
 8009ae6:	bf18      	it	ne
 8009ae8:	2001      	movne	r0, #1
 8009aea:	b002      	add	sp, #8
 8009aec:	4770      	bx	lr
 8009aee:	4610      	mov	r0, r2
 8009af0:	e7fb      	b.n	8009aea <__ascii_mbtowc+0x16>
 8009af2:	f06f 0001 	mvn.w	r0, #1
 8009af6:	e7f8      	b.n	8009aea <__ascii_mbtowc+0x16>

08009af8 <memcpy>:
 8009af8:	440a      	add	r2, r1
 8009afa:	4291      	cmp	r1, r2
 8009afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b00:	d100      	bne.n	8009b04 <memcpy+0xc>
 8009b02:	4770      	bx	lr
 8009b04:	b510      	push	{r4, lr}
 8009b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	d1f9      	bne.n	8009b06 <memcpy+0xe>
 8009b12:	bd10      	pop	{r4, pc}

08009b14 <_Balloc>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	b976      	cbnz	r6, 8009b3c <_Balloc+0x28>
 8009b1e:	2010      	movs	r0, #16
 8009b20:	f7ff ffd0 	bl	8009ac4 <malloc>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6260      	str	r0, [r4, #36]	; 0x24
 8009b28:	b920      	cbnz	r0, 8009b34 <_Balloc+0x20>
 8009b2a:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <_Balloc+0x78>)
 8009b2c:	4818      	ldr	r0, [pc, #96]	; (8009b90 <_Balloc+0x7c>)
 8009b2e:	2166      	movs	r1, #102	; 0x66
 8009b30:	f000 ff40 	bl	800a9b4 <__assert_func>
 8009b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b38:	6006      	str	r6, [r0, #0]
 8009b3a:	60c6      	str	r6, [r0, #12]
 8009b3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b3e:	68f3      	ldr	r3, [r6, #12]
 8009b40:	b183      	cbz	r3, 8009b64 <_Balloc+0x50>
 8009b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b4a:	b9b8      	cbnz	r0, 8009b7c <_Balloc+0x68>
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b52:	1d72      	adds	r2, r6, #5
 8009b54:	0092      	lsls	r2, r2, #2
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 fc9d 	bl	800a496 <_calloc_r>
 8009b5c:	b160      	cbz	r0, 8009b78 <_Balloc+0x64>
 8009b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b62:	e00e      	b.n	8009b82 <_Balloc+0x6e>
 8009b64:	2221      	movs	r2, #33	; 0x21
 8009b66:	2104      	movs	r1, #4
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 fc94 	bl	800a496 <_calloc_r>
 8009b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b70:	60f0      	str	r0, [r6, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e4      	bne.n	8009b42 <_Balloc+0x2e>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	6802      	ldr	r2, [r0, #0]
 8009b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b82:	2300      	movs	r3, #0
 8009b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b88:	e7f7      	b.n	8009b7a <_Balloc+0x66>
 8009b8a:	bf00      	nop
 8009b8c:	0800b996 	.word	0x0800b996
 8009b90:	0800ba94 	.word	0x0800ba94

08009b94 <_Bfree>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b98:	4605      	mov	r5, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	b976      	cbnz	r6, 8009bbc <_Bfree+0x28>
 8009b9e:	2010      	movs	r0, #16
 8009ba0:	f7ff ff90 	bl	8009ac4 <malloc>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ba8:	b920      	cbnz	r0, 8009bb4 <_Bfree+0x20>
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <_Bfree+0x3c>)
 8009bac:	4809      	ldr	r0, [pc, #36]	; (8009bd4 <_Bfree+0x40>)
 8009bae:	218a      	movs	r1, #138	; 0x8a
 8009bb0:	f000 ff00 	bl	800a9b4 <__assert_func>
 8009bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb8:	6006      	str	r6, [r0, #0]
 8009bba:	60c6      	str	r6, [r0, #12]
 8009bbc:	b13c      	cbz	r4, 8009bce <_Bfree+0x3a>
 8009bbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bc0:	6862      	ldr	r2, [r4, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc8:	6021      	str	r1, [r4, #0]
 8009bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	0800b996 	.word	0x0800b996
 8009bd4:	0800ba94 	.word	0x0800ba94

08009bd8 <__multadd>:
 8009bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bdc:	690d      	ldr	r5, [r1, #16]
 8009bde:	4607      	mov	r7, r0
 8009be0:	460c      	mov	r4, r1
 8009be2:	461e      	mov	r6, r3
 8009be4:	f101 0c14 	add.w	ip, r1, #20
 8009be8:	2000      	movs	r0, #0
 8009bea:	f8dc 3000 	ldr.w	r3, [ip]
 8009bee:	b299      	uxth	r1, r3
 8009bf0:	fb02 6101 	mla	r1, r2, r1, r6
 8009bf4:	0c1e      	lsrs	r6, r3, #16
 8009bf6:	0c0b      	lsrs	r3, r1, #16
 8009bf8:	fb02 3306 	mla	r3, r2, r6, r3
 8009bfc:	b289      	uxth	r1, r1
 8009bfe:	3001      	adds	r0, #1
 8009c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c04:	4285      	cmp	r5, r0
 8009c06:	f84c 1b04 	str.w	r1, [ip], #4
 8009c0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c0e:	dcec      	bgt.n	8009bea <__multadd+0x12>
 8009c10:	b30e      	cbz	r6, 8009c56 <__multadd+0x7e>
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	42ab      	cmp	r3, r5
 8009c16:	dc19      	bgt.n	8009c4c <__multadd+0x74>
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f7ff ff79 	bl	8009b14 <_Balloc>
 8009c22:	4680      	mov	r8, r0
 8009c24:	b928      	cbnz	r0, 8009c32 <__multadd+0x5a>
 8009c26:	4602      	mov	r2, r0
 8009c28:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <__multadd+0x84>)
 8009c2a:	480d      	ldr	r0, [pc, #52]	; (8009c60 <__multadd+0x88>)
 8009c2c:	21b5      	movs	r1, #181	; 0xb5
 8009c2e:	f000 fec1 	bl	800a9b4 <__assert_func>
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	3202      	adds	r2, #2
 8009c36:	f104 010c 	add.w	r1, r4, #12
 8009c3a:	0092      	lsls	r2, r2, #2
 8009c3c:	300c      	adds	r0, #12
 8009c3e:	f7ff ff5b 	bl	8009af8 <memcpy>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff ffa5 	bl	8009b94 <_Bfree>
 8009c4a:	4644      	mov	r4, r8
 8009c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c50:	3501      	adds	r5, #1
 8009c52:	615e      	str	r6, [r3, #20]
 8009c54:	6125      	str	r5, [r4, #16]
 8009c56:	4620      	mov	r0, r4
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5c:	0800ba08 	.word	0x0800ba08
 8009c60:	0800ba94 	.word	0x0800ba94

08009c64 <__s2b>:
 8009c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c68:	460c      	mov	r4, r1
 8009c6a:	4615      	mov	r5, r2
 8009c6c:	461f      	mov	r7, r3
 8009c6e:	2209      	movs	r2, #9
 8009c70:	3308      	adds	r3, #8
 8009c72:	4606      	mov	r6, r0
 8009c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	db09      	blt.n	8009c94 <__s2b+0x30>
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7ff ff47 	bl	8009b14 <_Balloc>
 8009c86:	b940      	cbnz	r0, 8009c9a <__s2b+0x36>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	4b19      	ldr	r3, [pc, #100]	; (8009cf0 <__s2b+0x8c>)
 8009c8c:	4819      	ldr	r0, [pc, #100]	; (8009cf4 <__s2b+0x90>)
 8009c8e:	21ce      	movs	r1, #206	; 0xce
 8009c90:	f000 fe90 	bl	800a9b4 <__assert_func>
 8009c94:	0052      	lsls	r2, r2, #1
 8009c96:	3101      	adds	r1, #1
 8009c98:	e7f0      	b.n	8009c7c <__s2b+0x18>
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	6143      	str	r3, [r0, #20]
 8009c9e:	2d09      	cmp	r5, #9
 8009ca0:	f04f 0301 	mov.w	r3, #1
 8009ca4:	6103      	str	r3, [r0, #16]
 8009ca6:	dd16      	ble.n	8009cd6 <__s2b+0x72>
 8009ca8:	f104 0909 	add.w	r9, r4, #9
 8009cac:	46c8      	mov	r8, r9
 8009cae:	442c      	add	r4, r5
 8009cb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	3b30      	subs	r3, #48	; 0x30
 8009cb8:	220a      	movs	r2, #10
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7ff ff8c 	bl	8009bd8 <__multadd>
 8009cc0:	45a0      	cmp	r8, r4
 8009cc2:	d1f5      	bne.n	8009cb0 <__s2b+0x4c>
 8009cc4:	f1a5 0408 	sub.w	r4, r5, #8
 8009cc8:	444c      	add	r4, r9
 8009cca:	1b2d      	subs	r5, r5, r4
 8009ccc:	1963      	adds	r3, r4, r5
 8009cce:	42bb      	cmp	r3, r7
 8009cd0:	db04      	blt.n	8009cdc <__s2b+0x78>
 8009cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd6:	340a      	adds	r4, #10
 8009cd8:	2509      	movs	r5, #9
 8009cda:	e7f6      	b.n	8009cca <__s2b+0x66>
 8009cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	3b30      	subs	r3, #48	; 0x30
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff76 	bl	8009bd8 <__multadd>
 8009cec:	e7ee      	b.n	8009ccc <__s2b+0x68>
 8009cee:	bf00      	nop
 8009cf0:	0800ba08 	.word	0x0800ba08
 8009cf4:	0800ba94 	.word	0x0800ba94

08009cf8 <__hi0bits>:
 8009cf8:	0c03      	lsrs	r3, r0, #16
 8009cfa:	041b      	lsls	r3, r3, #16
 8009cfc:	b9d3      	cbnz	r3, 8009d34 <__hi0bits+0x3c>
 8009cfe:	0400      	lsls	r0, r0, #16
 8009d00:	2310      	movs	r3, #16
 8009d02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d06:	bf04      	itt	eq
 8009d08:	0200      	lsleq	r0, r0, #8
 8009d0a:	3308      	addeq	r3, #8
 8009d0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d10:	bf04      	itt	eq
 8009d12:	0100      	lsleq	r0, r0, #4
 8009d14:	3304      	addeq	r3, #4
 8009d16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d1a:	bf04      	itt	eq
 8009d1c:	0080      	lsleq	r0, r0, #2
 8009d1e:	3302      	addeq	r3, #2
 8009d20:	2800      	cmp	r0, #0
 8009d22:	db05      	blt.n	8009d30 <__hi0bits+0x38>
 8009d24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d28:	f103 0301 	add.w	r3, r3, #1
 8009d2c:	bf08      	it	eq
 8009d2e:	2320      	moveq	r3, #32
 8009d30:	4618      	mov	r0, r3
 8009d32:	4770      	bx	lr
 8009d34:	2300      	movs	r3, #0
 8009d36:	e7e4      	b.n	8009d02 <__hi0bits+0xa>

08009d38 <__lo0bits>:
 8009d38:	6803      	ldr	r3, [r0, #0]
 8009d3a:	f013 0207 	ands.w	r2, r3, #7
 8009d3e:	4601      	mov	r1, r0
 8009d40:	d00b      	beq.n	8009d5a <__lo0bits+0x22>
 8009d42:	07da      	lsls	r2, r3, #31
 8009d44:	d423      	bmi.n	8009d8e <__lo0bits+0x56>
 8009d46:	0798      	lsls	r0, r3, #30
 8009d48:	bf49      	itett	mi
 8009d4a:	085b      	lsrmi	r3, r3, #1
 8009d4c:	089b      	lsrpl	r3, r3, #2
 8009d4e:	2001      	movmi	r0, #1
 8009d50:	600b      	strmi	r3, [r1, #0]
 8009d52:	bf5c      	itt	pl
 8009d54:	600b      	strpl	r3, [r1, #0]
 8009d56:	2002      	movpl	r0, #2
 8009d58:	4770      	bx	lr
 8009d5a:	b298      	uxth	r0, r3
 8009d5c:	b9a8      	cbnz	r0, 8009d8a <__lo0bits+0x52>
 8009d5e:	0c1b      	lsrs	r3, r3, #16
 8009d60:	2010      	movs	r0, #16
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	b90a      	cbnz	r2, 8009d6a <__lo0bits+0x32>
 8009d66:	3008      	adds	r0, #8
 8009d68:	0a1b      	lsrs	r3, r3, #8
 8009d6a:	071a      	lsls	r2, r3, #28
 8009d6c:	bf04      	itt	eq
 8009d6e:	091b      	lsreq	r3, r3, #4
 8009d70:	3004      	addeq	r0, #4
 8009d72:	079a      	lsls	r2, r3, #30
 8009d74:	bf04      	itt	eq
 8009d76:	089b      	lsreq	r3, r3, #2
 8009d78:	3002      	addeq	r0, #2
 8009d7a:	07da      	lsls	r2, r3, #31
 8009d7c:	d403      	bmi.n	8009d86 <__lo0bits+0x4e>
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	f100 0001 	add.w	r0, r0, #1
 8009d84:	d005      	beq.n	8009d92 <__lo0bits+0x5a>
 8009d86:	600b      	str	r3, [r1, #0]
 8009d88:	4770      	bx	lr
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	e7e9      	b.n	8009d62 <__lo0bits+0x2a>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	4770      	bx	lr
 8009d92:	2020      	movs	r0, #32
 8009d94:	4770      	bx	lr
	...

08009d98 <__i2b>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	f7ff feb9 	bl	8009b14 <_Balloc>
 8009da2:	4602      	mov	r2, r0
 8009da4:	b928      	cbnz	r0, 8009db2 <__i2b+0x1a>
 8009da6:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <__i2b+0x24>)
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <__i2b+0x28>)
 8009daa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dae:	f000 fe01 	bl	800a9b4 <__assert_func>
 8009db2:	2301      	movs	r3, #1
 8009db4:	6144      	str	r4, [r0, #20]
 8009db6:	6103      	str	r3, [r0, #16]
 8009db8:	bd10      	pop	{r4, pc}
 8009dba:	bf00      	nop
 8009dbc:	0800ba08 	.word	0x0800ba08
 8009dc0:	0800ba94 	.word	0x0800ba94

08009dc4 <__multiply>:
 8009dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	4691      	mov	r9, r2
 8009dca:	690a      	ldr	r2, [r1, #16]
 8009dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	bfb8      	it	lt
 8009dd4:	460b      	movlt	r3, r1
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	bfbc      	itt	lt
 8009dda:	464c      	movlt	r4, r9
 8009ddc:	4699      	movlt	r9, r3
 8009dde:	6927      	ldr	r7, [r4, #16]
 8009de0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009de4:	68a3      	ldr	r3, [r4, #8]
 8009de6:	6861      	ldr	r1, [r4, #4]
 8009de8:	eb07 060a 	add.w	r6, r7, sl
 8009dec:	42b3      	cmp	r3, r6
 8009dee:	b085      	sub	sp, #20
 8009df0:	bfb8      	it	lt
 8009df2:	3101      	addlt	r1, #1
 8009df4:	f7ff fe8e 	bl	8009b14 <_Balloc>
 8009df8:	b930      	cbnz	r0, 8009e08 <__multiply+0x44>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b44      	ldr	r3, [pc, #272]	; (8009f10 <__multiply+0x14c>)
 8009dfe:	4845      	ldr	r0, [pc, #276]	; (8009f14 <__multiply+0x150>)
 8009e00:	f240 115d 	movw	r1, #349	; 0x15d
 8009e04:	f000 fdd6 	bl	800a9b4 <__assert_func>
 8009e08:	f100 0514 	add.w	r5, r0, #20
 8009e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e10:	462b      	mov	r3, r5
 8009e12:	2200      	movs	r2, #0
 8009e14:	4543      	cmp	r3, r8
 8009e16:	d321      	bcc.n	8009e5c <__multiply+0x98>
 8009e18:	f104 0314 	add.w	r3, r4, #20
 8009e1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e20:	f109 0314 	add.w	r3, r9, #20
 8009e24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e28:	9202      	str	r2, [sp, #8]
 8009e2a:	1b3a      	subs	r2, r7, r4
 8009e2c:	3a15      	subs	r2, #21
 8009e2e:	f022 0203 	bic.w	r2, r2, #3
 8009e32:	3204      	adds	r2, #4
 8009e34:	f104 0115 	add.w	r1, r4, #21
 8009e38:	428f      	cmp	r7, r1
 8009e3a:	bf38      	it	cc
 8009e3c:	2204      	movcc	r2, #4
 8009e3e:	9201      	str	r2, [sp, #4]
 8009e40:	9a02      	ldr	r2, [sp, #8]
 8009e42:	9303      	str	r3, [sp, #12]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d80c      	bhi.n	8009e62 <__multiply+0x9e>
 8009e48:	2e00      	cmp	r6, #0
 8009e4a:	dd03      	ble.n	8009e54 <__multiply+0x90>
 8009e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d05a      	beq.n	8009f0a <__multiply+0x146>
 8009e54:	6106      	str	r6, [r0, #16]
 8009e56:	b005      	add	sp, #20
 8009e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5c:	f843 2b04 	str.w	r2, [r3], #4
 8009e60:	e7d8      	b.n	8009e14 <__multiply+0x50>
 8009e62:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e66:	f1ba 0f00 	cmp.w	sl, #0
 8009e6a:	d024      	beq.n	8009eb6 <__multiply+0xf2>
 8009e6c:	f104 0e14 	add.w	lr, r4, #20
 8009e70:	46a9      	mov	r9, r5
 8009e72:	f04f 0c00 	mov.w	ip, #0
 8009e76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e7a:	f8d9 1000 	ldr.w	r1, [r9]
 8009e7e:	fa1f fb82 	uxth.w	fp, r2
 8009e82:	b289      	uxth	r1, r1
 8009e84:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e90:	4461      	add	r1, ip
 8009e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e96:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e9e:	b289      	uxth	r1, r1
 8009ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ea4:	4577      	cmp	r7, lr
 8009ea6:	f849 1b04 	str.w	r1, [r9], #4
 8009eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eae:	d8e2      	bhi.n	8009e76 <__multiply+0xb2>
 8009eb0:	9a01      	ldr	r2, [sp, #4]
 8009eb2:	f845 c002 	str.w	ip, [r5, r2]
 8009eb6:	9a03      	ldr	r2, [sp, #12]
 8009eb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	f1b9 0f00 	cmp.w	r9, #0
 8009ec2:	d020      	beq.n	8009f06 <__multiply+0x142>
 8009ec4:	6829      	ldr	r1, [r5, #0]
 8009ec6:	f104 0c14 	add.w	ip, r4, #20
 8009eca:	46ae      	mov	lr, r5
 8009ecc:	f04f 0a00 	mov.w	sl, #0
 8009ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8009ed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ed8:	fb09 220b 	mla	r2, r9, fp, r2
 8009edc:	4492      	add	sl, r2
 8009ede:	b289      	uxth	r1, r1
 8009ee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ee4:	f84e 1b04 	str.w	r1, [lr], #4
 8009ee8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009eec:	f8be 1000 	ldrh.w	r1, [lr]
 8009ef0:	0c12      	lsrs	r2, r2, #16
 8009ef2:	fb09 1102 	mla	r1, r9, r2, r1
 8009ef6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009efa:	4567      	cmp	r7, ip
 8009efc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f00:	d8e6      	bhi.n	8009ed0 <__multiply+0x10c>
 8009f02:	9a01      	ldr	r2, [sp, #4]
 8009f04:	50a9      	str	r1, [r5, r2]
 8009f06:	3504      	adds	r5, #4
 8009f08:	e79a      	b.n	8009e40 <__multiply+0x7c>
 8009f0a:	3e01      	subs	r6, #1
 8009f0c:	e79c      	b.n	8009e48 <__multiply+0x84>
 8009f0e:	bf00      	nop
 8009f10:	0800ba08 	.word	0x0800ba08
 8009f14:	0800ba94 	.word	0x0800ba94

08009f18 <__pow5mult>:
 8009f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f1c:	4615      	mov	r5, r2
 8009f1e:	f012 0203 	ands.w	r2, r2, #3
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	d007      	beq.n	8009f38 <__pow5mult+0x20>
 8009f28:	4c25      	ldr	r4, [pc, #148]	; (8009fc0 <__pow5mult+0xa8>)
 8009f2a:	3a01      	subs	r2, #1
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f32:	f7ff fe51 	bl	8009bd8 <__multadd>
 8009f36:	4607      	mov	r7, r0
 8009f38:	10ad      	asrs	r5, r5, #2
 8009f3a:	d03d      	beq.n	8009fb8 <__pow5mult+0xa0>
 8009f3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f3e:	b97c      	cbnz	r4, 8009f60 <__pow5mult+0x48>
 8009f40:	2010      	movs	r0, #16
 8009f42:	f7ff fdbf 	bl	8009ac4 <malloc>
 8009f46:	4602      	mov	r2, r0
 8009f48:	6270      	str	r0, [r6, #36]	; 0x24
 8009f4a:	b928      	cbnz	r0, 8009f58 <__pow5mult+0x40>
 8009f4c:	4b1d      	ldr	r3, [pc, #116]	; (8009fc4 <__pow5mult+0xac>)
 8009f4e:	481e      	ldr	r0, [pc, #120]	; (8009fc8 <__pow5mult+0xb0>)
 8009f50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f54:	f000 fd2e 	bl	800a9b4 <__assert_func>
 8009f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f5c:	6004      	str	r4, [r0, #0]
 8009f5e:	60c4      	str	r4, [r0, #12]
 8009f60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f68:	b94c      	cbnz	r4, 8009f7e <__pow5mult+0x66>
 8009f6a:	f240 2171 	movw	r1, #625	; 0x271
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7ff ff12 	bl	8009d98 <__i2b>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	f04f 0900 	mov.w	r9, #0
 8009f82:	07eb      	lsls	r3, r5, #31
 8009f84:	d50a      	bpl.n	8009f9c <__pow5mult+0x84>
 8009f86:	4639      	mov	r1, r7
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7ff ff1a 	bl	8009dc4 <__multiply>
 8009f90:	4639      	mov	r1, r7
 8009f92:	4680      	mov	r8, r0
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff fdfd 	bl	8009b94 <_Bfree>
 8009f9a:	4647      	mov	r7, r8
 8009f9c:	106d      	asrs	r5, r5, #1
 8009f9e:	d00b      	beq.n	8009fb8 <__pow5mult+0xa0>
 8009fa0:	6820      	ldr	r0, [r4, #0]
 8009fa2:	b938      	cbnz	r0, 8009fb4 <__pow5mult+0x9c>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ff0b 	bl	8009dc4 <__multiply>
 8009fae:	6020      	str	r0, [r4, #0]
 8009fb0:	f8c0 9000 	str.w	r9, [r0]
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	e7e4      	b.n	8009f82 <__pow5mult+0x6a>
 8009fb8:	4638      	mov	r0, r7
 8009fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fbe:	bf00      	nop
 8009fc0:	0800bbe0 	.word	0x0800bbe0
 8009fc4:	0800b996 	.word	0x0800b996
 8009fc8:	0800ba94 	.word	0x0800ba94

08009fcc <__lshift>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	6849      	ldr	r1, [r1, #4]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	4607      	mov	r7, r0
 8009fde:	4691      	mov	r9, r2
 8009fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fe4:	f108 0601 	add.w	r6, r8, #1
 8009fe8:	42b3      	cmp	r3, r6
 8009fea:	db0b      	blt.n	800a004 <__lshift+0x38>
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff fd91 	bl	8009b14 <_Balloc>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	b948      	cbnz	r0, 800a00a <__lshift+0x3e>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <__lshift+0xd8>)
 8009ffa:	482b      	ldr	r0, [pc, #172]	; (800a0a8 <__lshift+0xdc>)
 8009ffc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a000:	f000 fcd8 	bl	800a9b4 <__assert_func>
 800a004:	3101      	adds	r1, #1
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	e7ee      	b.n	8009fe8 <__lshift+0x1c>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f100 0114 	add.w	r1, r0, #20
 800a010:	f100 0210 	add.w	r2, r0, #16
 800a014:	4618      	mov	r0, r3
 800a016:	4553      	cmp	r3, sl
 800a018:	db37      	blt.n	800a08a <__lshift+0xbe>
 800a01a:	6920      	ldr	r0, [r4, #16]
 800a01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a020:	f104 0314 	add.w	r3, r4, #20
 800a024:	f019 091f 	ands.w	r9, r9, #31
 800a028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a02c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a030:	d02f      	beq.n	800a092 <__lshift+0xc6>
 800a032:	f1c9 0e20 	rsb	lr, r9, #32
 800a036:	468a      	mov	sl, r1
 800a038:	f04f 0c00 	mov.w	ip, #0
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	fa02 f209 	lsl.w	r2, r2, r9
 800a042:	ea42 020c 	orr.w	r2, r2, ip
 800a046:	f84a 2b04 	str.w	r2, [sl], #4
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	4298      	cmp	r0, r3
 800a050:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a054:	d8f2      	bhi.n	800a03c <__lshift+0x70>
 800a056:	1b03      	subs	r3, r0, r4
 800a058:	3b15      	subs	r3, #21
 800a05a:	f023 0303 	bic.w	r3, r3, #3
 800a05e:	3304      	adds	r3, #4
 800a060:	f104 0215 	add.w	r2, r4, #21
 800a064:	4290      	cmp	r0, r2
 800a066:	bf38      	it	cc
 800a068:	2304      	movcc	r3, #4
 800a06a:	f841 c003 	str.w	ip, [r1, r3]
 800a06e:	f1bc 0f00 	cmp.w	ip, #0
 800a072:	d001      	beq.n	800a078 <__lshift+0xac>
 800a074:	f108 0602 	add.w	r6, r8, #2
 800a078:	3e01      	subs	r6, #1
 800a07a:	4638      	mov	r0, r7
 800a07c:	612e      	str	r6, [r5, #16]
 800a07e:	4621      	mov	r1, r4
 800a080:	f7ff fd88 	bl	8009b94 <_Bfree>
 800a084:	4628      	mov	r0, r5
 800a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a08e:	3301      	adds	r3, #1
 800a090:	e7c1      	b.n	800a016 <__lshift+0x4a>
 800a092:	3904      	subs	r1, #4
 800a094:	f853 2b04 	ldr.w	r2, [r3], #4
 800a098:	f841 2f04 	str.w	r2, [r1, #4]!
 800a09c:	4298      	cmp	r0, r3
 800a09e:	d8f9      	bhi.n	800a094 <__lshift+0xc8>
 800a0a0:	e7ea      	b.n	800a078 <__lshift+0xac>
 800a0a2:	bf00      	nop
 800a0a4:	0800ba08 	.word	0x0800ba08
 800a0a8:	0800ba94 	.word	0x0800ba94

0800a0ac <__mcmp>:
 800a0ac:	b530      	push	{r4, r5, lr}
 800a0ae:	6902      	ldr	r2, [r0, #16]
 800a0b0:	690c      	ldr	r4, [r1, #16]
 800a0b2:	1b12      	subs	r2, r2, r4
 800a0b4:	d10e      	bne.n	800a0d4 <__mcmp+0x28>
 800a0b6:	f100 0314 	add.w	r3, r0, #20
 800a0ba:	3114      	adds	r1, #20
 800a0bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0cc:	42a5      	cmp	r5, r4
 800a0ce:	d003      	beq.n	800a0d8 <__mcmp+0x2c>
 800a0d0:	d305      	bcc.n	800a0de <__mcmp+0x32>
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	bd30      	pop	{r4, r5, pc}
 800a0d8:	4283      	cmp	r3, r0
 800a0da:	d3f3      	bcc.n	800a0c4 <__mcmp+0x18>
 800a0dc:	e7fa      	b.n	800a0d4 <__mcmp+0x28>
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	e7f7      	b.n	800a0d4 <__mcmp+0x28>

0800a0e4 <__mdiff>:
 800a0e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4690      	mov	r8, r2
 800a0f2:	f7ff ffdb 	bl	800a0ac <__mcmp>
 800a0f6:	1e05      	subs	r5, r0, #0
 800a0f8:	d110      	bne.n	800a11c <__mdiff+0x38>
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff fd09 	bl	8009b14 <_Balloc>
 800a102:	b930      	cbnz	r0, 800a112 <__mdiff+0x2e>
 800a104:	4b3a      	ldr	r3, [pc, #232]	; (800a1f0 <__mdiff+0x10c>)
 800a106:	4602      	mov	r2, r0
 800a108:	f240 2132 	movw	r1, #562	; 0x232
 800a10c:	4839      	ldr	r0, [pc, #228]	; (800a1f4 <__mdiff+0x110>)
 800a10e:	f000 fc51 	bl	800a9b4 <__assert_func>
 800a112:	2301      	movs	r3, #1
 800a114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	bfa4      	itt	ge
 800a11e:	4643      	movge	r3, r8
 800a120:	46a0      	movge	r8, r4
 800a122:	4630      	mov	r0, r6
 800a124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a128:	bfa6      	itte	ge
 800a12a:	461c      	movge	r4, r3
 800a12c:	2500      	movge	r5, #0
 800a12e:	2501      	movlt	r5, #1
 800a130:	f7ff fcf0 	bl	8009b14 <_Balloc>
 800a134:	b920      	cbnz	r0, 800a140 <__mdiff+0x5c>
 800a136:	4b2e      	ldr	r3, [pc, #184]	; (800a1f0 <__mdiff+0x10c>)
 800a138:	4602      	mov	r2, r0
 800a13a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a13e:	e7e5      	b.n	800a10c <__mdiff+0x28>
 800a140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a144:	6926      	ldr	r6, [r4, #16]
 800a146:	60c5      	str	r5, [r0, #12]
 800a148:	f104 0914 	add.w	r9, r4, #20
 800a14c:	f108 0514 	add.w	r5, r8, #20
 800a150:	f100 0e14 	add.w	lr, r0, #20
 800a154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a15c:	f108 0210 	add.w	r2, r8, #16
 800a160:	46f2      	mov	sl, lr
 800a162:	2100      	movs	r1, #0
 800a164:	f859 3b04 	ldr.w	r3, [r9], #4
 800a168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a16c:	fa1f f883 	uxth.w	r8, r3
 800a170:	fa11 f18b 	uxtah	r1, r1, fp
 800a174:	0c1b      	lsrs	r3, r3, #16
 800a176:	eba1 0808 	sub.w	r8, r1, r8
 800a17a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a17e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a182:	fa1f f888 	uxth.w	r8, r8
 800a186:	1419      	asrs	r1, r3, #16
 800a188:	454e      	cmp	r6, r9
 800a18a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a18e:	f84a 3b04 	str.w	r3, [sl], #4
 800a192:	d8e7      	bhi.n	800a164 <__mdiff+0x80>
 800a194:	1b33      	subs	r3, r6, r4
 800a196:	3b15      	subs	r3, #21
 800a198:	f023 0303 	bic.w	r3, r3, #3
 800a19c:	3304      	adds	r3, #4
 800a19e:	3415      	adds	r4, #21
 800a1a0:	42a6      	cmp	r6, r4
 800a1a2:	bf38      	it	cc
 800a1a4:	2304      	movcc	r3, #4
 800a1a6:	441d      	add	r5, r3
 800a1a8:	4473      	add	r3, lr
 800a1aa:	469e      	mov	lr, r3
 800a1ac:	462e      	mov	r6, r5
 800a1ae:	4566      	cmp	r6, ip
 800a1b0:	d30e      	bcc.n	800a1d0 <__mdiff+0xec>
 800a1b2:	f10c 0203 	add.w	r2, ip, #3
 800a1b6:	1b52      	subs	r2, r2, r5
 800a1b8:	f022 0203 	bic.w	r2, r2, #3
 800a1bc:	3d03      	subs	r5, #3
 800a1be:	45ac      	cmp	ip, r5
 800a1c0:	bf38      	it	cc
 800a1c2:	2200      	movcc	r2, #0
 800a1c4:	441a      	add	r2, r3
 800a1c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1ca:	b17b      	cbz	r3, 800a1ec <__mdiff+0x108>
 800a1cc:	6107      	str	r7, [r0, #16]
 800a1ce:	e7a3      	b.n	800a118 <__mdiff+0x34>
 800a1d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1d4:	fa11 f288 	uxtah	r2, r1, r8
 800a1d8:	1414      	asrs	r4, r2, #16
 800a1da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1e4:	f84e 2b04 	str.w	r2, [lr], #4
 800a1e8:	1421      	asrs	r1, r4, #16
 800a1ea:	e7e0      	b.n	800a1ae <__mdiff+0xca>
 800a1ec:	3f01      	subs	r7, #1
 800a1ee:	e7ea      	b.n	800a1c6 <__mdiff+0xe2>
 800a1f0:	0800ba08 	.word	0x0800ba08
 800a1f4:	0800ba94 	.word	0x0800ba94

0800a1f8 <__ulp>:
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	ed8d 0b00 	vstr	d0, [sp]
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	4912      	ldr	r1, [pc, #72]	; (800a24c <__ulp+0x54>)
 800a202:	4019      	ands	r1, r3
 800a204:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a208:	2900      	cmp	r1, #0
 800a20a:	dd05      	ble.n	800a218 <__ulp+0x20>
 800a20c:	2200      	movs	r2, #0
 800a20e:	460b      	mov	r3, r1
 800a210:	ec43 2b10 	vmov	d0, r2, r3
 800a214:	b002      	add	sp, #8
 800a216:	4770      	bx	lr
 800a218:	4249      	negs	r1, r1
 800a21a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a21e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a222:	f04f 0200 	mov.w	r2, #0
 800a226:	f04f 0300 	mov.w	r3, #0
 800a22a:	da04      	bge.n	800a236 <__ulp+0x3e>
 800a22c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a230:	fa41 f300 	asr.w	r3, r1, r0
 800a234:	e7ec      	b.n	800a210 <__ulp+0x18>
 800a236:	f1a0 0114 	sub.w	r1, r0, #20
 800a23a:	291e      	cmp	r1, #30
 800a23c:	bfda      	itte	le
 800a23e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a242:	fa20 f101 	lsrle.w	r1, r0, r1
 800a246:	2101      	movgt	r1, #1
 800a248:	460a      	mov	r2, r1
 800a24a:	e7e1      	b.n	800a210 <__ulp+0x18>
 800a24c:	7ff00000 	.word	0x7ff00000

0800a250 <__b2d>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	6905      	ldr	r5, [r0, #16]
 800a254:	f100 0714 	add.w	r7, r0, #20
 800a258:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a25c:	1f2e      	subs	r6, r5, #4
 800a25e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff fd48 	bl	8009cf8 <__hi0bits>
 800a268:	f1c0 0320 	rsb	r3, r0, #32
 800a26c:	280a      	cmp	r0, #10
 800a26e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a2ec <__b2d+0x9c>
 800a272:	600b      	str	r3, [r1, #0]
 800a274:	dc14      	bgt.n	800a2a0 <__b2d+0x50>
 800a276:	f1c0 0e0b 	rsb	lr, r0, #11
 800a27a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a27e:	42b7      	cmp	r7, r6
 800a280:	ea41 030c 	orr.w	r3, r1, ip
 800a284:	bf34      	ite	cc
 800a286:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a28a:	2100      	movcs	r1, #0
 800a28c:	3015      	adds	r0, #21
 800a28e:	fa04 f000 	lsl.w	r0, r4, r0
 800a292:	fa21 f10e 	lsr.w	r1, r1, lr
 800a296:	ea40 0201 	orr.w	r2, r0, r1
 800a29a:	ec43 2b10 	vmov	d0, r2, r3
 800a29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a0:	42b7      	cmp	r7, r6
 800a2a2:	bf3a      	itte	cc
 800a2a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a2ac:	2100      	movcs	r1, #0
 800a2ae:	380b      	subs	r0, #11
 800a2b0:	d017      	beq.n	800a2e2 <__b2d+0x92>
 800a2b2:	f1c0 0c20 	rsb	ip, r0, #32
 800a2b6:	fa04 f500 	lsl.w	r5, r4, r0
 800a2ba:	42be      	cmp	r6, r7
 800a2bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800a2c0:	ea45 0504 	orr.w	r5, r5, r4
 800a2c4:	bf8c      	ite	hi
 800a2c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a2ca:	2400      	movls	r4, #0
 800a2cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a2d0:	fa01 f000 	lsl.w	r0, r1, r0
 800a2d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a2d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2dc:	ea40 0204 	orr.w	r2, r0, r4
 800a2e0:	e7db      	b.n	800a29a <__b2d+0x4a>
 800a2e2:	ea44 030c 	orr.w	r3, r4, ip
 800a2e6:	460a      	mov	r2, r1
 800a2e8:	e7d7      	b.n	800a29a <__b2d+0x4a>
 800a2ea:	bf00      	nop
 800a2ec:	3ff00000 	.word	0x3ff00000

0800a2f0 <__d2b>:
 800a2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4689      	mov	r9, r1
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	ec57 6b10 	vmov	r6, r7, d0
 800a2fc:	4690      	mov	r8, r2
 800a2fe:	f7ff fc09 	bl	8009b14 <_Balloc>
 800a302:	4604      	mov	r4, r0
 800a304:	b930      	cbnz	r0, 800a314 <__d2b+0x24>
 800a306:	4602      	mov	r2, r0
 800a308:	4b25      	ldr	r3, [pc, #148]	; (800a3a0 <__d2b+0xb0>)
 800a30a:	4826      	ldr	r0, [pc, #152]	; (800a3a4 <__d2b+0xb4>)
 800a30c:	f240 310a 	movw	r1, #778	; 0x30a
 800a310:	f000 fb50 	bl	800a9b4 <__assert_func>
 800a314:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a31c:	bb35      	cbnz	r5, 800a36c <__d2b+0x7c>
 800a31e:	2e00      	cmp	r6, #0
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	d028      	beq.n	800a376 <__d2b+0x86>
 800a324:	4668      	mov	r0, sp
 800a326:	9600      	str	r6, [sp, #0]
 800a328:	f7ff fd06 	bl	8009d38 <__lo0bits>
 800a32c:	9900      	ldr	r1, [sp, #0]
 800a32e:	b300      	cbz	r0, 800a372 <__d2b+0x82>
 800a330:	9a01      	ldr	r2, [sp, #4]
 800a332:	f1c0 0320 	rsb	r3, r0, #32
 800a336:	fa02 f303 	lsl.w	r3, r2, r3
 800a33a:	430b      	orrs	r3, r1
 800a33c:	40c2      	lsrs	r2, r0
 800a33e:	6163      	str	r3, [r4, #20]
 800a340:	9201      	str	r2, [sp, #4]
 800a342:	9b01      	ldr	r3, [sp, #4]
 800a344:	61a3      	str	r3, [r4, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	bf14      	ite	ne
 800a34a:	2202      	movne	r2, #2
 800a34c:	2201      	moveq	r2, #1
 800a34e:	6122      	str	r2, [r4, #16]
 800a350:	b1d5      	cbz	r5, 800a388 <__d2b+0x98>
 800a352:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a356:	4405      	add	r5, r0
 800a358:	f8c9 5000 	str.w	r5, [r9]
 800a35c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a360:	f8c8 0000 	str.w	r0, [r8]
 800a364:	4620      	mov	r0, r4
 800a366:	b003      	add	sp, #12
 800a368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a36c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a370:	e7d5      	b.n	800a31e <__d2b+0x2e>
 800a372:	6161      	str	r1, [r4, #20]
 800a374:	e7e5      	b.n	800a342 <__d2b+0x52>
 800a376:	a801      	add	r0, sp, #4
 800a378:	f7ff fcde 	bl	8009d38 <__lo0bits>
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	6163      	str	r3, [r4, #20]
 800a380:	2201      	movs	r2, #1
 800a382:	6122      	str	r2, [r4, #16]
 800a384:	3020      	adds	r0, #32
 800a386:	e7e3      	b.n	800a350 <__d2b+0x60>
 800a388:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a38c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a390:	f8c9 0000 	str.w	r0, [r9]
 800a394:	6918      	ldr	r0, [r3, #16]
 800a396:	f7ff fcaf 	bl	8009cf8 <__hi0bits>
 800a39a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a39e:	e7df      	b.n	800a360 <__d2b+0x70>
 800a3a0:	0800ba08 	.word	0x0800ba08
 800a3a4:	0800ba94 	.word	0x0800ba94

0800a3a8 <__ratio>:
 800a3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	4688      	mov	r8, r1
 800a3ae:	4669      	mov	r1, sp
 800a3b0:	4681      	mov	r9, r0
 800a3b2:	f7ff ff4d 	bl	800a250 <__b2d>
 800a3b6:	a901      	add	r1, sp, #4
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	ec55 4b10 	vmov	r4, r5, d0
 800a3be:	f7ff ff47 	bl	800a250 <__b2d>
 800a3c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3ca:	eba3 0c02 	sub.w	ip, r3, r2
 800a3ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3d2:	1a9b      	subs	r3, r3, r2
 800a3d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3d8:	ec51 0b10 	vmov	r0, r1, d0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bfd6      	itet	le
 800a3e0:	460a      	movle	r2, r1
 800a3e2:	462a      	movgt	r2, r5
 800a3e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	462f      	mov	r7, r5
 800a3ec:	bfd4      	ite	le
 800a3ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	ee10 2a10 	vmov	r2, s0
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f6 fa24 	bl	800084c <__aeabi_ddiv>
 800a404:	ec41 0b10 	vmov	d0, r0, r1
 800a408:	b003      	add	sp, #12
 800a40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a40e <__copybits>:
 800a40e:	3901      	subs	r1, #1
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	1149      	asrs	r1, r1, #5
 800a414:	6914      	ldr	r4, [r2, #16]
 800a416:	3101      	adds	r1, #1
 800a418:	f102 0314 	add.w	r3, r2, #20
 800a41c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a420:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a424:	1f05      	subs	r5, r0, #4
 800a426:	42a3      	cmp	r3, r4
 800a428:	d30c      	bcc.n	800a444 <__copybits+0x36>
 800a42a:	1aa3      	subs	r3, r4, r2
 800a42c:	3b11      	subs	r3, #17
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	3211      	adds	r2, #17
 800a434:	42a2      	cmp	r2, r4
 800a436:	bf88      	it	hi
 800a438:	2300      	movhi	r3, #0
 800a43a:	4418      	add	r0, r3
 800a43c:	2300      	movs	r3, #0
 800a43e:	4288      	cmp	r0, r1
 800a440:	d305      	bcc.n	800a44e <__copybits+0x40>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	f853 6b04 	ldr.w	r6, [r3], #4
 800a448:	f845 6f04 	str.w	r6, [r5, #4]!
 800a44c:	e7eb      	b.n	800a426 <__copybits+0x18>
 800a44e:	f840 3b04 	str.w	r3, [r0], #4
 800a452:	e7f4      	b.n	800a43e <__copybits+0x30>

0800a454 <__any_on>:
 800a454:	f100 0214 	add.w	r2, r0, #20
 800a458:	6900      	ldr	r0, [r0, #16]
 800a45a:	114b      	asrs	r3, r1, #5
 800a45c:	4298      	cmp	r0, r3
 800a45e:	b510      	push	{r4, lr}
 800a460:	db11      	blt.n	800a486 <__any_on+0x32>
 800a462:	dd0a      	ble.n	800a47a <__any_on+0x26>
 800a464:	f011 011f 	ands.w	r1, r1, #31
 800a468:	d007      	beq.n	800a47a <__any_on+0x26>
 800a46a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a46e:	fa24 f001 	lsr.w	r0, r4, r1
 800a472:	fa00 f101 	lsl.w	r1, r0, r1
 800a476:	428c      	cmp	r4, r1
 800a478:	d10b      	bne.n	800a492 <__any_on+0x3e>
 800a47a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a47e:	4293      	cmp	r3, r2
 800a480:	d803      	bhi.n	800a48a <__any_on+0x36>
 800a482:	2000      	movs	r0, #0
 800a484:	bd10      	pop	{r4, pc}
 800a486:	4603      	mov	r3, r0
 800a488:	e7f7      	b.n	800a47a <__any_on+0x26>
 800a48a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a48e:	2900      	cmp	r1, #0
 800a490:	d0f5      	beq.n	800a47e <__any_on+0x2a>
 800a492:	2001      	movs	r0, #1
 800a494:	e7f6      	b.n	800a484 <__any_on+0x30>

0800a496 <_calloc_r>:
 800a496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a498:	fba1 2402 	umull	r2, r4, r1, r2
 800a49c:	b94c      	cbnz	r4, 800a4b2 <_calloc_r+0x1c>
 800a49e:	4611      	mov	r1, r2
 800a4a0:	9201      	str	r2, [sp, #4]
 800a4a2:	f000 f87b 	bl	800a59c <_malloc_r>
 800a4a6:	9a01      	ldr	r2, [sp, #4]
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	b930      	cbnz	r0, 800a4ba <_calloc_r+0x24>
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	b003      	add	sp, #12
 800a4b0:	bd30      	pop	{r4, r5, pc}
 800a4b2:	220c      	movs	r2, #12
 800a4b4:	6002      	str	r2, [r0, #0]
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	e7f8      	b.n	800a4ac <_calloc_r+0x16>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	f7fc fb8c 	bl	8006bd8 <memset>
 800a4c0:	e7f4      	b.n	800a4ac <_calloc_r+0x16>
	...

0800a4c4 <_free_r>:
 800a4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4c6:	2900      	cmp	r1, #0
 800a4c8:	d044      	beq.n	800a554 <_free_r+0x90>
 800a4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ce:	9001      	str	r0, [sp, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4d6:	bfb8      	it	lt
 800a4d8:	18e4      	addlt	r4, r4, r3
 800a4da:	f000 fab5 	bl	800aa48 <__malloc_lock>
 800a4de:	4a1e      	ldr	r2, [pc, #120]	; (800a558 <_free_r+0x94>)
 800a4e0:	9801      	ldr	r0, [sp, #4]
 800a4e2:	6813      	ldr	r3, [r2, #0]
 800a4e4:	b933      	cbnz	r3, 800a4f4 <_free_r+0x30>
 800a4e6:	6063      	str	r3, [r4, #4]
 800a4e8:	6014      	str	r4, [r2, #0]
 800a4ea:	b003      	add	sp, #12
 800a4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4f0:	f000 bab0 	b.w	800aa54 <__malloc_unlock>
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	d908      	bls.n	800a50a <_free_r+0x46>
 800a4f8:	6825      	ldr	r5, [r4, #0]
 800a4fa:	1961      	adds	r1, r4, r5
 800a4fc:	428b      	cmp	r3, r1
 800a4fe:	bf01      	itttt	eq
 800a500:	6819      	ldreq	r1, [r3, #0]
 800a502:	685b      	ldreq	r3, [r3, #4]
 800a504:	1949      	addeq	r1, r1, r5
 800a506:	6021      	streq	r1, [r4, #0]
 800a508:	e7ed      	b.n	800a4e6 <_free_r+0x22>
 800a50a:	461a      	mov	r2, r3
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	b10b      	cbz	r3, 800a514 <_free_r+0x50>
 800a510:	42a3      	cmp	r3, r4
 800a512:	d9fa      	bls.n	800a50a <_free_r+0x46>
 800a514:	6811      	ldr	r1, [r2, #0]
 800a516:	1855      	adds	r5, r2, r1
 800a518:	42a5      	cmp	r5, r4
 800a51a:	d10b      	bne.n	800a534 <_free_r+0x70>
 800a51c:	6824      	ldr	r4, [r4, #0]
 800a51e:	4421      	add	r1, r4
 800a520:	1854      	adds	r4, r2, r1
 800a522:	42a3      	cmp	r3, r4
 800a524:	6011      	str	r1, [r2, #0]
 800a526:	d1e0      	bne.n	800a4ea <_free_r+0x26>
 800a528:	681c      	ldr	r4, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	6053      	str	r3, [r2, #4]
 800a52e:	4421      	add	r1, r4
 800a530:	6011      	str	r1, [r2, #0]
 800a532:	e7da      	b.n	800a4ea <_free_r+0x26>
 800a534:	d902      	bls.n	800a53c <_free_r+0x78>
 800a536:	230c      	movs	r3, #12
 800a538:	6003      	str	r3, [r0, #0]
 800a53a:	e7d6      	b.n	800a4ea <_free_r+0x26>
 800a53c:	6825      	ldr	r5, [r4, #0]
 800a53e:	1961      	adds	r1, r4, r5
 800a540:	428b      	cmp	r3, r1
 800a542:	bf04      	itt	eq
 800a544:	6819      	ldreq	r1, [r3, #0]
 800a546:	685b      	ldreq	r3, [r3, #4]
 800a548:	6063      	str	r3, [r4, #4]
 800a54a:	bf04      	itt	eq
 800a54c:	1949      	addeq	r1, r1, r5
 800a54e:	6021      	streq	r1, [r4, #0]
 800a550:	6054      	str	r4, [r2, #4]
 800a552:	e7ca      	b.n	800a4ea <_free_r+0x26>
 800a554:	b003      	add	sp, #12
 800a556:	bd30      	pop	{r4, r5, pc}
 800a558:	200003b8 	.word	0x200003b8

0800a55c <sbrk_aligned>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	4e0e      	ldr	r6, [pc, #56]	; (800a598 <sbrk_aligned+0x3c>)
 800a560:	460c      	mov	r4, r1
 800a562:	6831      	ldr	r1, [r6, #0]
 800a564:	4605      	mov	r5, r0
 800a566:	b911      	cbnz	r1, 800a56e <sbrk_aligned+0x12>
 800a568:	f000 f9f2 	bl	800a950 <_sbrk_r>
 800a56c:	6030      	str	r0, [r6, #0]
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	f000 f9ed 	bl	800a950 <_sbrk_r>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d00a      	beq.n	800a590 <sbrk_aligned+0x34>
 800a57a:	1cc4      	adds	r4, r0, #3
 800a57c:	f024 0403 	bic.w	r4, r4, #3
 800a580:	42a0      	cmp	r0, r4
 800a582:	d007      	beq.n	800a594 <sbrk_aligned+0x38>
 800a584:	1a21      	subs	r1, r4, r0
 800a586:	4628      	mov	r0, r5
 800a588:	f000 f9e2 	bl	800a950 <_sbrk_r>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d101      	bne.n	800a594 <sbrk_aligned+0x38>
 800a590:	f04f 34ff 	mov.w	r4, #4294967295
 800a594:	4620      	mov	r0, r4
 800a596:	bd70      	pop	{r4, r5, r6, pc}
 800a598:	200003bc 	.word	0x200003bc

0800a59c <_malloc_r>:
 800a59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a0:	1ccd      	adds	r5, r1, #3
 800a5a2:	f025 0503 	bic.w	r5, r5, #3
 800a5a6:	3508      	adds	r5, #8
 800a5a8:	2d0c      	cmp	r5, #12
 800a5aa:	bf38      	it	cc
 800a5ac:	250c      	movcc	r5, #12
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	db01      	blt.n	800a5b8 <_malloc_r+0x1c>
 800a5b4:	42a9      	cmp	r1, r5
 800a5b6:	d905      	bls.n	800a5c4 <_malloc_r+0x28>
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	2600      	movs	r6, #0
 800a5be:	4630      	mov	r0, r6
 800a5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c4:	4e2e      	ldr	r6, [pc, #184]	; (800a680 <_malloc_r+0xe4>)
 800a5c6:	f000 fa3f 	bl	800aa48 <__malloc_lock>
 800a5ca:	6833      	ldr	r3, [r6, #0]
 800a5cc:	461c      	mov	r4, r3
 800a5ce:	bb34      	cbnz	r4, 800a61e <_malloc_r+0x82>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f7ff ffc2 	bl	800a55c <sbrk_aligned>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	4604      	mov	r4, r0
 800a5dc:	d14d      	bne.n	800a67a <_malloc_r+0xde>
 800a5de:	6834      	ldr	r4, [r6, #0]
 800a5e0:	4626      	mov	r6, r4
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	d140      	bne.n	800a668 <_malloc_r+0xcc>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	eb04 0803 	add.w	r8, r4, r3
 800a5f0:	f000 f9ae 	bl	800a950 <_sbrk_r>
 800a5f4:	4580      	cmp	r8, r0
 800a5f6:	d13a      	bne.n	800a66e <_malloc_r+0xd2>
 800a5f8:	6821      	ldr	r1, [r4, #0]
 800a5fa:	3503      	adds	r5, #3
 800a5fc:	1a6d      	subs	r5, r5, r1
 800a5fe:	f025 0503 	bic.w	r5, r5, #3
 800a602:	3508      	adds	r5, #8
 800a604:	2d0c      	cmp	r5, #12
 800a606:	bf38      	it	cc
 800a608:	250c      	movcc	r5, #12
 800a60a:	4629      	mov	r1, r5
 800a60c:	4638      	mov	r0, r7
 800a60e:	f7ff ffa5 	bl	800a55c <sbrk_aligned>
 800a612:	3001      	adds	r0, #1
 800a614:	d02b      	beq.n	800a66e <_malloc_r+0xd2>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	442b      	add	r3, r5
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	e00e      	b.n	800a63c <_malloc_r+0xa0>
 800a61e:	6822      	ldr	r2, [r4, #0]
 800a620:	1b52      	subs	r2, r2, r5
 800a622:	d41e      	bmi.n	800a662 <_malloc_r+0xc6>
 800a624:	2a0b      	cmp	r2, #11
 800a626:	d916      	bls.n	800a656 <_malloc_r+0xba>
 800a628:	1961      	adds	r1, r4, r5
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	6025      	str	r5, [r4, #0]
 800a62e:	bf18      	it	ne
 800a630:	6059      	strne	r1, [r3, #4]
 800a632:	6863      	ldr	r3, [r4, #4]
 800a634:	bf08      	it	eq
 800a636:	6031      	streq	r1, [r6, #0]
 800a638:	5162      	str	r2, [r4, r5]
 800a63a:	604b      	str	r3, [r1, #4]
 800a63c:	4638      	mov	r0, r7
 800a63e:	f104 060b 	add.w	r6, r4, #11
 800a642:	f000 fa07 	bl	800aa54 <__malloc_unlock>
 800a646:	f026 0607 	bic.w	r6, r6, #7
 800a64a:	1d23      	adds	r3, r4, #4
 800a64c:	1af2      	subs	r2, r6, r3
 800a64e:	d0b6      	beq.n	800a5be <_malloc_r+0x22>
 800a650:	1b9b      	subs	r3, r3, r6
 800a652:	50a3      	str	r3, [r4, r2]
 800a654:	e7b3      	b.n	800a5be <_malloc_r+0x22>
 800a656:	6862      	ldr	r2, [r4, #4]
 800a658:	42a3      	cmp	r3, r4
 800a65a:	bf0c      	ite	eq
 800a65c:	6032      	streq	r2, [r6, #0]
 800a65e:	605a      	strne	r2, [r3, #4]
 800a660:	e7ec      	b.n	800a63c <_malloc_r+0xa0>
 800a662:	4623      	mov	r3, r4
 800a664:	6864      	ldr	r4, [r4, #4]
 800a666:	e7b2      	b.n	800a5ce <_malloc_r+0x32>
 800a668:	4634      	mov	r4, r6
 800a66a:	6876      	ldr	r6, [r6, #4]
 800a66c:	e7b9      	b.n	800a5e2 <_malloc_r+0x46>
 800a66e:	230c      	movs	r3, #12
 800a670:	603b      	str	r3, [r7, #0]
 800a672:	4638      	mov	r0, r7
 800a674:	f000 f9ee 	bl	800aa54 <__malloc_unlock>
 800a678:	e7a1      	b.n	800a5be <_malloc_r+0x22>
 800a67a:	6025      	str	r5, [r4, #0]
 800a67c:	e7de      	b.n	800a63c <_malloc_r+0xa0>
 800a67e:	bf00      	nop
 800a680:	200003b8 	.word	0x200003b8

0800a684 <__ssputs_r>:
 800a684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a688:	688e      	ldr	r6, [r1, #8]
 800a68a:	429e      	cmp	r6, r3
 800a68c:	4682      	mov	sl, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	4690      	mov	r8, r2
 800a692:	461f      	mov	r7, r3
 800a694:	d838      	bhi.n	800a708 <__ssputs_r+0x84>
 800a696:	898a      	ldrh	r2, [r1, #12]
 800a698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a69c:	d032      	beq.n	800a704 <__ssputs_r+0x80>
 800a69e:	6825      	ldr	r5, [r4, #0]
 800a6a0:	6909      	ldr	r1, [r1, #16]
 800a6a2:	eba5 0901 	sub.w	r9, r5, r1
 800a6a6:	6965      	ldr	r5, [r4, #20]
 800a6a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	444b      	add	r3, r9
 800a6b4:	106d      	asrs	r5, r5, #1
 800a6b6:	429d      	cmp	r5, r3
 800a6b8:	bf38      	it	cc
 800a6ba:	461d      	movcc	r5, r3
 800a6bc:	0553      	lsls	r3, r2, #21
 800a6be:	d531      	bpl.n	800a724 <__ssputs_r+0xa0>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7ff ff6b 	bl	800a59c <_malloc_r>
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	b950      	cbnz	r0, 800a6e0 <__ssputs_r+0x5c>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	f8ca 3000 	str.w	r3, [sl]
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e0:	6921      	ldr	r1, [r4, #16]
 800a6e2:	464a      	mov	r2, r9
 800a6e4:	f7ff fa08 	bl	8009af8 <memcpy>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f2:	81a3      	strh	r3, [r4, #12]
 800a6f4:	6126      	str	r6, [r4, #16]
 800a6f6:	6165      	str	r5, [r4, #20]
 800a6f8:	444e      	add	r6, r9
 800a6fa:	eba5 0509 	sub.w	r5, r5, r9
 800a6fe:	6026      	str	r6, [r4, #0]
 800a700:	60a5      	str	r5, [r4, #8]
 800a702:	463e      	mov	r6, r7
 800a704:	42be      	cmp	r6, r7
 800a706:	d900      	bls.n	800a70a <__ssputs_r+0x86>
 800a708:	463e      	mov	r6, r7
 800a70a:	6820      	ldr	r0, [r4, #0]
 800a70c:	4632      	mov	r2, r6
 800a70e:	4641      	mov	r1, r8
 800a710:	f000 f980 	bl	800aa14 <memmove>
 800a714:	68a3      	ldr	r3, [r4, #8]
 800a716:	1b9b      	subs	r3, r3, r6
 800a718:	60a3      	str	r3, [r4, #8]
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	4433      	add	r3, r6
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	2000      	movs	r0, #0
 800a722:	e7db      	b.n	800a6dc <__ssputs_r+0x58>
 800a724:	462a      	mov	r2, r5
 800a726:	f000 f99b 	bl	800aa60 <_realloc_r>
 800a72a:	4606      	mov	r6, r0
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d1e1      	bne.n	800a6f4 <__ssputs_r+0x70>
 800a730:	6921      	ldr	r1, [r4, #16]
 800a732:	4650      	mov	r0, sl
 800a734:	f7ff fec6 	bl	800a4c4 <_free_r>
 800a738:	e7c7      	b.n	800a6ca <__ssputs_r+0x46>
	...

0800a73c <_svfiprintf_r>:
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	4698      	mov	r8, r3
 800a742:	898b      	ldrh	r3, [r1, #12]
 800a744:	061b      	lsls	r3, r3, #24
 800a746:	b09d      	sub	sp, #116	; 0x74
 800a748:	4607      	mov	r7, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	4614      	mov	r4, r2
 800a74e:	d50e      	bpl.n	800a76e <_svfiprintf_r+0x32>
 800a750:	690b      	ldr	r3, [r1, #16]
 800a752:	b963      	cbnz	r3, 800a76e <_svfiprintf_r+0x32>
 800a754:	2140      	movs	r1, #64	; 0x40
 800a756:	f7ff ff21 	bl	800a59c <_malloc_r>
 800a75a:	6028      	str	r0, [r5, #0]
 800a75c:	6128      	str	r0, [r5, #16]
 800a75e:	b920      	cbnz	r0, 800a76a <_svfiprintf_r+0x2e>
 800a760:	230c      	movs	r3, #12
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e0d1      	b.n	800a90e <_svfiprintf_r+0x1d2>
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	616b      	str	r3, [r5, #20]
 800a76e:	2300      	movs	r3, #0
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	2320      	movs	r3, #32
 800a774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a778:	f8cd 800c 	str.w	r8, [sp, #12]
 800a77c:	2330      	movs	r3, #48	; 0x30
 800a77e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a928 <_svfiprintf_r+0x1ec>
 800a782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a786:	f04f 0901 	mov.w	r9, #1
 800a78a:	4623      	mov	r3, r4
 800a78c:	469a      	mov	sl, r3
 800a78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a792:	b10a      	cbz	r2, 800a798 <_svfiprintf_r+0x5c>
 800a794:	2a25      	cmp	r2, #37	; 0x25
 800a796:	d1f9      	bne.n	800a78c <_svfiprintf_r+0x50>
 800a798:	ebba 0b04 	subs.w	fp, sl, r4
 800a79c:	d00b      	beq.n	800a7b6 <_svfiprintf_r+0x7a>
 800a79e:	465b      	mov	r3, fp
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	f7ff ff6d 	bl	800a684 <__ssputs_r>
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f000 80aa 	beq.w	800a904 <_svfiprintf_r+0x1c8>
 800a7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7b2:	445a      	add	r2, fp
 800a7b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 80a2 	beq.w	800a904 <_svfiprintf_r+0x1c8>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ca:	f10a 0a01 	add.w	sl, sl, #1
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a7d8:	4654      	mov	r4, sl
 800a7da:	2205      	movs	r2, #5
 800a7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e0:	4851      	ldr	r0, [pc, #324]	; (800a928 <_svfiprintf_r+0x1ec>)
 800a7e2:	f7f5 fcfd 	bl	80001e0 <memchr>
 800a7e6:	9a04      	ldr	r2, [sp, #16]
 800a7e8:	b9d8      	cbnz	r0, 800a822 <_svfiprintf_r+0xe6>
 800a7ea:	06d0      	lsls	r0, r2, #27
 800a7ec:	bf44      	itt	mi
 800a7ee:	2320      	movmi	r3, #32
 800a7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f4:	0711      	lsls	r1, r2, #28
 800a7f6:	bf44      	itt	mi
 800a7f8:	232b      	movmi	r3, #43	; 0x2b
 800a7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a802:	2b2a      	cmp	r3, #42	; 0x2a
 800a804:	d015      	beq.n	800a832 <_svfiprintf_r+0xf6>
 800a806:	9a07      	ldr	r2, [sp, #28]
 800a808:	4654      	mov	r4, sl
 800a80a:	2000      	movs	r0, #0
 800a80c:	f04f 0c0a 	mov.w	ip, #10
 800a810:	4621      	mov	r1, r4
 800a812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a816:	3b30      	subs	r3, #48	; 0x30
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d94e      	bls.n	800a8ba <_svfiprintf_r+0x17e>
 800a81c:	b1b0      	cbz	r0, 800a84c <_svfiprintf_r+0x110>
 800a81e:	9207      	str	r2, [sp, #28]
 800a820:	e014      	b.n	800a84c <_svfiprintf_r+0x110>
 800a822:	eba0 0308 	sub.w	r3, r0, r8
 800a826:	fa09 f303 	lsl.w	r3, r9, r3
 800a82a:	4313      	orrs	r3, r2
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	46a2      	mov	sl, r4
 800a830:	e7d2      	b.n	800a7d8 <_svfiprintf_r+0x9c>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	1d19      	adds	r1, r3, #4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	9103      	str	r1, [sp, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfbb      	ittet	lt
 800a83e:	425b      	neglt	r3, r3
 800a840:	f042 0202 	orrlt.w	r2, r2, #2
 800a844:	9307      	strge	r3, [sp, #28]
 800a846:	9307      	strlt	r3, [sp, #28]
 800a848:	bfb8      	it	lt
 800a84a:	9204      	strlt	r2, [sp, #16]
 800a84c:	7823      	ldrb	r3, [r4, #0]
 800a84e:	2b2e      	cmp	r3, #46	; 0x2e
 800a850:	d10c      	bne.n	800a86c <_svfiprintf_r+0x130>
 800a852:	7863      	ldrb	r3, [r4, #1]
 800a854:	2b2a      	cmp	r3, #42	; 0x2a
 800a856:	d135      	bne.n	800a8c4 <_svfiprintf_r+0x188>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	9203      	str	r2, [sp, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfb8      	it	lt
 800a864:	f04f 33ff 	movlt.w	r3, #4294967295
 800a868:	3402      	adds	r4, #2
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a938 <_svfiprintf_r+0x1fc>
 800a870:	7821      	ldrb	r1, [r4, #0]
 800a872:	2203      	movs	r2, #3
 800a874:	4650      	mov	r0, sl
 800a876:	f7f5 fcb3 	bl	80001e0 <memchr>
 800a87a:	b140      	cbz	r0, 800a88e <_svfiprintf_r+0x152>
 800a87c:	2340      	movs	r3, #64	; 0x40
 800a87e:	eba0 000a 	sub.w	r0, r0, sl
 800a882:	fa03 f000 	lsl.w	r0, r3, r0
 800a886:	9b04      	ldr	r3, [sp, #16]
 800a888:	4303      	orrs	r3, r0
 800a88a:	3401      	adds	r4, #1
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a892:	4826      	ldr	r0, [pc, #152]	; (800a92c <_svfiprintf_r+0x1f0>)
 800a894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a898:	2206      	movs	r2, #6
 800a89a:	f7f5 fca1 	bl	80001e0 <memchr>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d038      	beq.n	800a914 <_svfiprintf_r+0x1d8>
 800a8a2:	4b23      	ldr	r3, [pc, #140]	; (800a930 <_svfiprintf_r+0x1f4>)
 800a8a4:	bb1b      	cbnz	r3, 800a8ee <_svfiprintf_r+0x1b2>
 800a8a6:	9b03      	ldr	r3, [sp, #12]
 800a8a8:	3307      	adds	r3, #7
 800a8aa:	f023 0307 	bic.w	r3, r3, #7
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	9303      	str	r3, [sp, #12]
 800a8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b4:	4433      	add	r3, r6
 800a8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b8:	e767      	b.n	800a78a <_svfiprintf_r+0x4e>
 800a8ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8be:	460c      	mov	r4, r1
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	e7a5      	b.n	800a810 <_svfiprintf_r+0xd4>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	3401      	adds	r4, #1
 800a8c8:	9305      	str	r3, [sp, #20]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f04f 0c0a 	mov.w	ip, #10
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8d6:	3a30      	subs	r2, #48	; 0x30
 800a8d8:	2a09      	cmp	r2, #9
 800a8da:	d903      	bls.n	800a8e4 <_svfiprintf_r+0x1a8>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d0c5      	beq.n	800a86c <_svfiprintf_r+0x130>
 800a8e0:	9105      	str	r1, [sp, #20]
 800a8e2:	e7c3      	b.n	800a86c <_svfiprintf_r+0x130>
 800a8e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e7f0      	b.n	800a8d0 <_svfiprintf_r+0x194>
 800a8ee:	ab03      	add	r3, sp, #12
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	462a      	mov	r2, r5
 800a8f4:	4b0f      	ldr	r3, [pc, #60]	; (800a934 <_svfiprintf_r+0x1f8>)
 800a8f6:	a904      	add	r1, sp, #16
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7fc fa15 	bl	8006d28 <_printf_float>
 800a8fe:	1c42      	adds	r2, r0, #1
 800a900:	4606      	mov	r6, r0
 800a902:	d1d6      	bne.n	800a8b2 <_svfiprintf_r+0x176>
 800a904:	89ab      	ldrh	r3, [r5, #12]
 800a906:	065b      	lsls	r3, r3, #25
 800a908:	f53f af2c 	bmi.w	800a764 <_svfiprintf_r+0x28>
 800a90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a90e:	b01d      	add	sp, #116	; 0x74
 800a910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a914:	ab03      	add	r3, sp, #12
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	462a      	mov	r2, r5
 800a91a:	4b06      	ldr	r3, [pc, #24]	; (800a934 <_svfiprintf_r+0x1f8>)
 800a91c:	a904      	add	r1, sp, #16
 800a91e:	4638      	mov	r0, r7
 800a920:	f7fc fca6 	bl	8007270 <_printf_i>
 800a924:	e7eb      	b.n	800a8fe <_svfiprintf_r+0x1c2>
 800a926:	bf00      	nop
 800a928:	0800bbec 	.word	0x0800bbec
 800a92c:	0800bbf6 	.word	0x0800bbf6
 800a930:	08006d29 	.word	0x08006d29
 800a934:	0800a685 	.word	0x0800a685
 800a938:	0800bbf2 	.word	0x0800bbf2
 800a93c:	00000000 	.word	0x00000000

0800a940 <nan>:
 800a940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a948 <nan+0x8>
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	00000000 	.word	0x00000000
 800a94c:	7ff80000 	.word	0x7ff80000

0800a950 <_sbrk_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d06      	ldr	r5, [pc, #24]	; (800a96c <_sbrk_r+0x1c>)
 800a954:	2300      	movs	r3, #0
 800a956:	4604      	mov	r4, r0
 800a958:	4608      	mov	r0, r1
 800a95a:	602b      	str	r3, [r5, #0]
 800a95c:	f7f6 fea6 	bl	80016ac <_sbrk>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_sbrk_r+0x1a>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_sbrk_r+0x1a>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	200003c0 	.word	0x200003c0

0800a970 <strncmp>:
 800a970:	b510      	push	{r4, lr}
 800a972:	b17a      	cbz	r2, 800a994 <strncmp+0x24>
 800a974:	4603      	mov	r3, r0
 800a976:	3901      	subs	r1, #1
 800a978:	1884      	adds	r4, r0, r2
 800a97a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a97e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a982:	4290      	cmp	r0, r2
 800a984:	d101      	bne.n	800a98a <strncmp+0x1a>
 800a986:	42a3      	cmp	r3, r4
 800a988:	d101      	bne.n	800a98e <strncmp+0x1e>
 800a98a:	1a80      	subs	r0, r0, r2
 800a98c:	bd10      	pop	{r4, pc}
 800a98e:	2800      	cmp	r0, #0
 800a990:	d1f3      	bne.n	800a97a <strncmp+0xa>
 800a992:	e7fa      	b.n	800a98a <strncmp+0x1a>
 800a994:	4610      	mov	r0, r2
 800a996:	e7f9      	b.n	800a98c <strncmp+0x1c>

0800a998 <__ascii_wctomb>:
 800a998:	b149      	cbz	r1, 800a9ae <__ascii_wctomb+0x16>
 800a99a:	2aff      	cmp	r2, #255	; 0xff
 800a99c:	bf85      	ittet	hi
 800a99e:	238a      	movhi	r3, #138	; 0x8a
 800a9a0:	6003      	strhi	r3, [r0, #0]
 800a9a2:	700a      	strbls	r2, [r1, #0]
 800a9a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9a8:	bf98      	it	ls
 800a9aa:	2001      	movls	r0, #1
 800a9ac:	4770      	bx	lr
 800a9ae:	4608      	mov	r0, r1
 800a9b0:	4770      	bx	lr
	...

0800a9b4 <__assert_func>:
 800a9b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <__assert_func+0x2c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4605      	mov	r5, r0
 800a9c0:	68d8      	ldr	r0, [r3, #12]
 800a9c2:	b14c      	cbz	r4, 800a9d8 <__assert_func+0x24>
 800a9c4:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <__assert_func+0x30>)
 800a9c6:	9100      	str	r1, [sp, #0]
 800a9c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9cc:	4906      	ldr	r1, [pc, #24]	; (800a9e8 <__assert_func+0x34>)
 800a9ce:	462b      	mov	r3, r5
 800a9d0:	f000 f80e 	bl	800a9f0 <fiprintf>
 800a9d4:	f000 fa8c 	bl	800aef0 <abort>
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <__assert_func+0x38>)
 800a9da:	461c      	mov	r4, r3
 800a9dc:	e7f3      	b.n	800a9c6 <__assert_func+0x12>
 800a9de:	bf00      	nop
 800a9e0:	2000000c 	.word	0x2000000c
 800a9e4:	0800bbfd 	.word	0x0800bbfd
 800a9e8:	0800bc0a 	.word	0x0800bc0a
 800a9ec:	0800bc38 	.word	0x0800bc38

0800a9f0 <fiprintf>:
 800a9f0:	b40e      	push	{r1, r2, r3}
 800a9f2:	b503      	push	{r0, r1, lr}
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	4805      	ldr	r0, [pc, #20]	; (800aa10 <fiprintf+0x20>)
 800a9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fe:	6800      	ldr	r0, [r0, #0]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	f000 f885 	bl	800ab10 <_vfiprintf_r>
 800aa06:	b002      	add	sp, #8
 800aa08:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa0c:	b003      	add	sp, #12
 800aa0e:	4770      	bx	lr
 800aa10:	2000000c 	.word	0x2000000c

0800aa14 <memmove>:
 800aa14:	4288      	cmp	r0, r1
 800aa16:	b510      	push	{r4, lr}
 800aa18:	eb01 0402 	add.w	r4, r1, r2
 800aa1c:	d902      	bls.n	800aa24 <memmove+0x10>
 800aa1e:	4284      	cmp	r4, r0
 800aa20:	4623      	mov	r3, r4
 800aa22:	d807      	bhi.n	800aa34 <memmove+0x20>
 800aa24:	1e43      	subs	r3, r0, #1
 800aa26:	42a1      	cmp	r1, r4
 800aa28:	d008      	beq.n	800aa3c <memmove+0x28>
 800aa2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa32:	e7f8      	b.n	800aa26 <memmove+0x12>
 800aa34:	4402      	add	r2, r0
 800aa36:	4601      	mov	r1, r0
 800aa38:	428a      	cmp	r2, r1
 800aa3a:	d100      	bne.n	800aa3e <memmove+0x2a>
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa46:	e7f7      	b.n	800aa38 <memmove+0x24>

0800aa48 <__malloc_lock>:
 800aa48:	4801      	ldr	r0, [pc, #4]	; (800aa50 <__malloc_lock+0x8>)
 800aa4a:	f000 bc11 	b.w	800b270 <__retarget_lock_acquire_recursive>
 800aa4e:	bf00      	nop
 800aa50:	200003c4 	.word	0x200003c4

0800aa54 <__malloc_unlock>:
 800aa54:	4801      	ldr	r0, [pc, #4]	; (800aa5c <__malloc_unlock+0x8>)
 800aa56:	f000 bc0c 	b.w	800b272 <__retarget_lock_release_recursive>
 800aa5a:	bf00      	nop
 800aa5c:	200003c4 	.word	0x200003c4

0800aa60 <_realloc_r>:
 800aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa64:	4680      	mov	r8, r0
 800aa66:	4614      	mov	r4, r2
 800aa68:	460e      	mov	r6, r1
 800aa6a:	b921      	cbnz	r1, 800aa76 <_realloc_r+0x16>
 800aa6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa70:	4611      	mov	r1, r2
 800aa72:	f7ff bd93 	b.w	800a59c <_malloc_r>
 800aa76:	b92a      	cbnz	r2, 800aa84 <_realloc_r+0x24>
 800aa78:	f7ff fd24 	bl	800a4c4 <_free_r>
 800aa7c:	4625      	mov	r5, r4
 800aa7e:	4628      	mov	r0, r5
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa84:	f000 fc5c 	bl	800b340 <_malloc_usable_size_r>
 800aa88:	4284      	cmp	r4, r0
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	d802      	bhi.n	800aa94 <_realloc_r+0x34>
 800aa8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa92:	d812      	bhi.n	800aaba <_realloc_r+0x5a>
 800aa94:	4621      	mov	r1, r4
 800aa96:	4640      	mov	r0, r8
 800aa98:	f7ff fd80 	bl	800a59c <_malloc_r>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d0ed      	beq.n	800aa7e <_realloc_r+0x1e>
 800aaa2:	42bc      	cmp	r4, r7
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	bf28      	it	cs
 800aaaa:	463a      	movcs	r2, r7
 800aaac:	f7ff f824 	bl	8009af8 <memcpy>
 800aab0:	4631      	mov	r1, r6
 800aab2:	4640      	mov	r0, r8
 800aab4:	f7ff fd06 	bl	800a4c4 <_free_r>
 800aab8:	e7e1      	b.n	800aa7e <_realloc_r+0x1e>
 800aaba:	4635      	mov	r5, r6
 800aabc:	e7df      	b.n	800aa7e <_realloc_r+0x1e>

0800aabe <__sfputc_r>:
 800aabe:	6893      	ldr	r3, [r2, #8]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	b410      	push	{r4}
 800aac6:	6093      	str	r3, [r2, #8]
 800aac8:	da08      	bge.n	800aadc <__sfputc_r+0x1e>
 800aaca:	6994      	ldr	r4, [r2, #24]
 800aacc:	42a3      	cmp	r3, r4
 800aace:	db01      	blt.n	800aad4 <__sfputc_r+0x16>
 800aad0:	290a      	cmp	r1, #10
 800aad2:	d103      	bne.n	800aadc <__sfputc_r+0x1e>
 800aad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad8:	f000 b94a 	b.w	800ad70 <__swbuf_r>
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	1c58      	adds	r0, r3, #1
 800aae0:	6010      	str	r0, [r2, #0]
 800aae2:	7019      	strb	r1, [r3, #0]
 800aae4:	4608      	mov	r0, r1
 800aae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <__sfputs_r>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	18d5      	adds	r5, r2, r3
 800aaf6:	42ac      	cmp	r4, r5
 800aaf8:	d101      	bne.n	800aafe <__sfputs_r+0x12>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e007      	b.n	800ab0e <__sfputs_r+0x22>
 800aafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab02:	463a      	mov	r2, r7
 800ab04:	4630      	mov	r0, r6
 800ab06:	f7ff ffda 	bl	800aabe <__sfputc_r>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d1f3      	bne.n	800aaf6 <__sfputs_r+0xa>
 800ab0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab10 <_vfiprintf_r>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	460d      	mov	r5, r1
 800ab16:	b09d      	sub	sp, #116	; 0x74
 800ab18:	4614      	mov	r4, r2
 800ab1a:	4698      	mov	r8, r3
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	b118      	cbz	r0, 800ab28 <_vfiprintf_r+0x18>
 800ab20:	6983      	ldr	r3, [r0, #24]
 800ab22:	b90b      	cbnz	r3, 800ab28 <_vfiprintf_r+0x18>
 800ab24:	f000 fb06 	bl	800b134 <__sinit>
 800ab28:	4b89      	ldr	r3, [pc, #548]	; (800ad50 <_vfiprintf_r+0x240>)
 800ab2a:	429d      	cmp	r5, r3
 800ab2c:	d11b      	bne.n	800ab66 <_vfiprintf_r+0x56>
 800ab2e:	6875      	ldr	r5, [r6, #4]
 800ab30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab32:	07d9      	lsls	r1, r3, #31
 800ab34:	d405      	bmi.n	800ab42 <_vfiprintf_r+0x32>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	059a      	lsls	r2, r3, #22
 800ab3a:	d402      	bmi.n	800ab42 <_vfiprintf_r+0x32>
 800ab3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab3e:	f000 fb97 	bl	800b270 <__retarget_lock_acquire_recursive>
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	071b      	lsls	r3, r3, #28
 800ab46:	d501      	bpl.n	800ab4c <_vfiprintf_r+0x3c>
 800ab48:	692b      	ldr	r3, [r5, #16]
 800ab4a:	b9eb      	cbnz	r3, 800ab88 <_vfiprintf_r+0x78>
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f000 f960 	bl	800ae14 <__swsetup_r>
 800ab54:	b1c0      	cbz	r0, 800ab88 <_vfiprintf_r+0x78>
 800ab56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab58:	07dc      	lsls	r4, r3, #31
 800ab5a:	d50e      	bpl.n	800ab7a <_vfiprintf_r+0x6a>
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab60:	b01d      	add	sp, #116	; 0x74
 800ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab66:	4b7b      	ldr	r3, [pc, #492]	; (800ad54 <_vfiprintf_r+0x244>)
 800ab68:	429d      	cmp	r5, r3
 800ab6a:	d101      	bne.n	800ab70 <_vfiprintf_r+0x60>
 800ab6c:	68b5      	ldr	r5, [r6, #8]
 800ab6e:	e7df      	b.n	800ab30 <_vfiprintf_r+0x20>
 800ab70:	4b79      	ldr	r3, [pc, #484]	; (800ad58 <_vfiprintf_r+0x248>)
 800ab72:	429d      	cmp	r5, r3
 800ab74:	bf08      	it	eq
 800ab76:	68f5      	ldreq	r5, [r6, #12]
 800ab78:	e7da      	b.n	800ab30 <_vfiprintf_r+0x20>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	0598      	lsls	r0, r3, #22
 800ab7e:	d4ed      	bmi.n	800ab5c <_vfiprintf_r+0x4c>
 800ab80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab82:	f000 fb76 	bl	800b272 <__retarget_lock_release_recursive>
 800ab86:	e7e9      	b.n	800ab5c <_vfiprintf_r+0x4c>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab96:	2330      	movs	r3, #48	; 0x30
 800ab98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad5c <_vfiprintf_r+0x24c>
 800ab9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aba0:	f04f 0901 	mov.w	r9, #1
 800aba4:	4623      	mov	r3, r4
 800aba6:	469a      	mov	sl, r3
 800aba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abac:	b10a      	cbz	r2, 800abb2 <_vfiprintf_r+0xa2>
 800abae:	2a25      	cmp	r2, #37	; 0x25
 800abb0:	d1f9      	bne.n	800aba6 <_vfiprintf_r+0x96>
 800abb2:	ebba 0b04 	subs.w	fp, sl, r4
 800abb6:	d00b      	beq.n	800abd0 <_vfiprintf_r+0xc0>
 800abb8:	465b      	mov	r3, fp
 800abba:	4622      	mov	r2, r4
 800abbc:	4629      	mov	r1, r5
 800abbe:	4630      	mov	r0, r6
 800abc0:	f7ff ff94 	bl	800aaec <__sfputs_r>
 800abc4:	3001      	adds	r0, #1
 800abc6:	f000 80aa 	beq.w	800ad1e <_vfiprintf_r+0x20e>
 800abca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abcc:	445a      	add	r2, fp
 800abce:	9209      	str	r2, [sp, #36]	; 0x24
 800abd0:	f89a 3000 	ldrb.w	r3, [sl]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 80a2 	beq.w	800ad1e <_vfiprintf_r+0x20e>
 800abda:	2300      	movs	r3, #0
 800abdc:	f04f 32ff 	mov.w	r2, #4294967295
 800abe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe4:	f10a 0a01 	add.w	sl, sl, #1
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	9307      	str	r3, [sp, #28]
 800abec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abf0:	931a      	str	r3, [sp, #104]	; 0x68
 800abf2:	4654      	mov	r4, sl
 800abf4:	2205      	movs	r2, #5
 800abf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfa:	4858      	ldr	r0, [pc, #352]	; (800ad5c <_vfiprintf_r+0x24c>)
 800abfc:	f7f5 faf0 	bl	80001e0 <memchr>
 800ac00:	9a04      	ldr	r2, [sp, #16]
 800ac02:	b9d8      	cbnz	r0, 800ac3c <_vfiprintf_r+0x12c>
 800ac04:	06d1      	lsls	r1, r2, #27
 800ac06:	bf44      	itt	mi
 800ac08:	2320      	movmi	r3, #32
 800ac0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac0e:	0713      	lsls	r3, r2, #28
 800ac10:	bf44      	itt	mi
 800ac12:	232b      	movmi	r3, #43	; 0x2b
 800ac14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac18:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac1e:	d015      	beq.n	800ac4c <_vfiprintf_r+0x13c>
 800ac20:	9a07      	ldr	r2, [sp, #28]
 800ac22:	4654      	mov	r4, sl
 800ac24:	2000      	movs	r0, #0
 800ac26:	f04f 0c0a 	mov.w	ip, #10
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac30:	3b30      	subs	r3, #48	; 0x30
 800ac32:	2b09      	cmp	r3, #9
 800ac34:	d94e      	bls.n	800acd4 <_vfiprintf_r+0x1c4>
 800ac36:	b1b0      	cbz	r0, 800ac66 <_vfiprintf_r+0x156>
 800ac38:	9207      	str	r2, [sp, #28]
 800ac3a:	e014      	b.n	800ac66 <_vfiprintf_r+0x156>
 800ac3c:	eba0 0308 	sub.w	r3, r0, r8
 800ac40:	fa09 f303 	lsl.w	r3, r9, r3
 800ac44:	4313      	orrs	r3, r2
 800ac46:	9304      	str	r3, [sp, #16]
 800ac48:	46a2      	mov	sl, r4
 800ac4a:	e7d2      	b.n	800abf2 <_vfiprintf_r+0xe2>
 800ac4c:	9b03      	ldr	r3, [sp, #12]
 800ac4e:	1d19      	adds	r1, r3, #4
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	9103      	str	r1, [sp, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	bfbb      	ittet	lt
 800ac58:	425b      	neglt	r3, r3
 800ac5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac5e:	9307      	strge	r3, [sp, #28]
 800ac60:	9307      	strlt	r3, [sp, #28]
 800ac62:	bfb8      	it	lt
 800ac64:	9204      	strlt	r2, [sp, #16]
 800ac66:	7823      	ldrb	r3, [r4, #0]
 800ac68:	2b2e      	cmp	r3, #46	; 0x2e
 800ac6a:	d10c      	bne.n	800ac86 <_vfiprintf_r+0x176>
 800ac6c:	7863      	ldrb	r3, [r4, #1]
 800ac6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac70:	d135      	bne.n	800acde <_vfiprintf_r+0x1ce>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	1d1a      	adds	r2, r3, #4
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	9203      	str	r2, [sp, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfb8      	it	lt
 800ac7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac82:	3402      	adds	r4, #2
 800ac84:	9305      	str	r3, [sp, #20]
 800ac86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad6c <_vfiprintf_r+0x25c>
 800ac8a:	7821      	ldrb	r1, [r4, #0]
 800ac8c:	2203      	movs	r2, #3
 800ac8e:	4650      	mov	r0, sl
 800ac90:	f7f5 faa6 	bl	80001e0 <memchr>
 800ac94:	b140      	cbz	r0, 800aca8 <_vfiprintf_r+0x198>
 800ac96:	2340      	movs	r3, #64	; 0x40
 800ac98:	eba0 000a 	sub.w	r0, r0, sl
 800ac9c:	fa03 f000 	lsl.w	r0, r3, r0
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	4303      	orrs	r3, r0
 800aca4:	3401      	adds	r4, #1
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acac:	482c      	ldr	r0, [pc, #176]	; (800ad60 <_vfiprintf_r+0x250>)
 800acae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acb2:	2206      	movs	r2, #6
 800acb4:	f7f5 fa94 	bl	80001e0 <memchr>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d03f      	beq.n	800ad3c <_vfiprintf_r+0x22c>
 800acbc:	4b29      	ldr	r3, [pc, #164]	; (800ad64 <_vfiprintf_r+0x254>)
 800acbe:	bb1b      	cbnz	r3, 800ad08 <_vfiprintf_r+0x1f8>
 800acc0:	9b03      	ldr	r3, [sp, #12]
 800acc2:	3307      	adds	r3, #7
 800acc4:	f023 0307 	bic.w	r3, r3, #7
 800acc8:	3308      	adds	r3, #8
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acce:	443b      	add	r3, r7
 800acd0:	9309      	str	r3, [sp, #36]	; 0x24
 800acd2:	e767      	b.n	800aba4 <_vfiprintf_r+0x94>
 800acd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800acd8:	460c      	mov	r4, r1
 800acda:	2001      	movs	r0, #1
 800acdc:	e7a5      	b.n	800ac2a <_vfiprintf_r+0x11a>
 800acde:	2300      	movs	r3, #0
 800ace0:	3401      	adds	r4, #1
 800ace2:	9305      	str	r3, [sp, #20]
 800ace4:	4619      	mov	r1, r3
 800ace6:	f04f 0c0a 	mov.w	ip, #10
 800acea:	4620      	mov	r0, r4
 800acec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf0:	3a30      	subs	r2, #48	; 0x30
 800acf2:	2a09      	cmp	r2, #9
 800acf4:	d903      	bls.n	800acfe <_vfiprintf_r+0x1ee>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d0c5      	beq.n	800ac86 <_vfiprintf_r+0x176>
 800acfa:	9105      	str	r1, [sp, #20]
 800acfc:	e7c3      	b.n	800ac86 <_vfiprintf_r+0x176>
 800acfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad02:	4604      	mov	r4, r0
 800ad04:	2301      	movs	r3, #1
 800ad06:	e7f0      	b.n	800acea <_vfiprintf_r+0x1da>
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4b16      	ldr	r3, [pc, #88]	; (800ad68 <_vfiprintf_r+0x258>)
 800ad10:	a904      	add	r1, sp, #16
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7fc f808 	bl	8006d28 <_printf_float>
 800ad18:	4607      	mov	r7, r0
 800ad1a:	1c78      	adds	r0, r7, #1
 800ad1c:	d1d6      	bne.n	800accc <_vfiprintf_r+0x1bc>
 800ad1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad20:	07d9      	lsls	r1, r3, #31
 800ad22:	d405      	bmi.n	800ad30 <_vfiprintf_r+0x220>
 800ad24:	89ab      	ldrh	r3, [r5, #12]
 800ad26:	059a      	lsls	r2, r3, #22
 800ad28:	d402      	bmi.n	800ad30 <_vfiprintf_r+0x220>
 800ad2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2c:	f000 faa1 	bl	800b272 <__retarget_lock_release_recursive>
 800ad30:	89ab      	ldrh	r3, [r5, #12]
 800ad32:	065b      	lsls	r3, r3, #25
 800ad34:	f53f af12 	bmi.w	800ab5c <_vfiprintf_r+0x4c>
 800ad38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad3a:	e711      	b.n	800ab60 <_vfiprintf_r+0x50>
 800ad3c:	ab03      	add	r3, sp, #12
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	462a      	mov	r2, r5
 800ad42:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <_vfiprintf_r+0x258>)
 800ad44:	a904      	add	r1, sp, #16
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7fc fa92 	bl	8007270 <_printf_i>
 800ad4c:	e7e4      	b.n	800ad18 <_vfiprintf_r+0x208>
 800ad4e:	bf00      	nop
 800ad50:	0800bc5c 	.word	0x0800bc5c
 800ad54:	0800bc7c 	.word	0x0800bc7c
 800ad58:	0800bc3c 	.word	0x0800bc3c
 800ad5c:	0800bbec 	.word	0x0800bbec
 800ad60:	0800bbf6 	.word	0x0800bbf6
 800ad64:	08006d29 	.word	0x08006d29
 800ad68:	0800aaed 	.word	0x0800aaed
 800ad6c:	0800bbf2 	.word	0x0800bbf2

0800ad70 <__swbuf_r>:
 800ad70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad72:	460e      	mov	r6, r1
 800ad74:	4614      	mov	r4, r2
 800ad76:	4605      	mov	r5, r0
 800ad78:	b118      	cbz	r0, 800ad82 <__swbuf_r+0x12>
 800ad7a:	6983      	ldr	r3, [r0, #24]
 800ad7c:	b90b      	cbnz	r3, 800ad82 <__swbuf_r+0x12>
 800ad7e:	f000 f9d9 	bl	800b134 <__sinit>
 800ad82:	4b21      	ldr	r3, [pc, #132]	; (800ae08 <__swbuf_r+0x98>)
 800ad84:	429c      	cmp	r4, r3
 800ad86:	d12b      	bne.n	800ade0 <__swbuf_r+0x70>
 800ad88:	686c      	ldr	r4, [r5, #4]
 800ad8a:	69a3      	ldr	r3, [r4, #24]
 800ad8c:	60a3      	str	r3, [r4, #8]
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	071a      	lsls	r2, r3, #28
 800ad92:	d52f      	bpl.n	800adf4 <__swbuf_r+0x84>
 800ad94:	6923      	ldr	r3, [r4, #16]
 800ad96:	b36b      	cbz	r3, 800adf4 <__swbuf_r+0x84>
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	1ac0      	subs	r0, r0, r3
 800ad9e:	6963      	ldr	r3, [r4, #20]
 800ada0:	b2f6      	uxtb	r6, r6
 800ada2:	4283      	cmp	r3, r0
 800ada4:	4637      	mov	r7, r6
 800ada6:	dc04      	bgt.n	800adb2 <__swbuf_r+0x42>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f92e 	bl	800b00c <_fflush_r>
 800adb0:	bb30      	cbnz	r0, 800ae00 <__swbuf_r+0x90>
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	60a3      	str	r3, [r4, #8]
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	6022      	str	r2, [r4, #0]
 800adbe:	701e      	strb	r6, [r3, #0]
 800adc0:	6963      	ldr	r3, [r4, #20]
 800adc2:	3001      	adds	r0, #1
 800adc4:	4283      	cmp	r3, r0
 800adc6:	d004      	beq.n	800add2 <__swbuf_r+0x62>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	07db      	lsls	r3, r3, #31
 800adcc:	d506      	bpl.n	800addc <__swbuf_r+0x6c>
 800adce:	2e0a      	cmp	r6, #10
 800add0:	d104      	bne.n	800addc <__swbuf_r+0x6c>
 800add2:	4621      	mov	r1, r4
 800add4:	4628      	mov	r0, r5
 800add6:	f000 f919 	bl	800b00c <_fflush_r>
 800adda:	b988      	cbnz	r0, 800ae00 <__swbuf_r+0x90>
 800addc:	4638      	mov	r0, r7
 800adde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade0:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <__swbuf_r+0x9c>)
 800ade2:	429c      	cmp	r4, r3
 800ade4:	d101      	bne.n	800adea <__swbuf_r+0x7a>
 800ade6:	68ac      	ldr	r4, [r5, #8]
 800ade8:	e7cf      	b.n	800ad8a <__swbuf_r+0x1a>
 800adea:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <__swbuf_r+0xa0>)
 800adec:	429c      	cmp	r4, r3
 800adee:	bf08      	it	eq
 800adf0:	68ec      	ldreq	r4, [r5, #12]
 800adf2:	e7ca      	b.n	800ad8a <__swbuf_r+0x1a>
 800adf4:	4621      	mov	r1, r4
 800adf6:	4628      	mov	r0, r5
 800adf8:	f000 f80c 	bl	800ae14 <__swsetup_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d0cb      	beq.n	800ad98 <__swbuf_r+0x28>
 800ae00:	f04f 37ff 	mov.w	r7, #4294967295
 800ae04:	e7ea      	b.n	800addc <__swbuf_r+0x6c>
 800ae06:	bf00      	nop
 800ae08:	0800bc5c 	.word	0x0800bc5c
 800ae0c:	0800bc7c 	.word	0x0800bc7c
 800ae10:	0800bc3c 	.word	0x0800bc3c

0800ae14 <__swsetup_r>:
 800ae14:	4b32      	ldr	r3, [pc, #200]	; (800aee0 <__swsetup_r+0xcc>)
 800ae16:	b570      	push	{r4, r5, r6, lr}
 800ae18:	681d      	ldr	r5, [r3, #0]
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	b125      	cbz	r5, 800ae2a <__swsetup_r+0x16>
 800ae20:	69ab      	ldr	r3, [r5, #24]
 800ae22:	b913      	cbnz	r3, 800ae2a <__swsetup_r+0x16>
 800ae24:	4628      	mov	r0, r5
 800ae26:	f000 f985 	bl	800b134 <__sinit>
 800ae2a:	4b2e      	ldr	r3, [pc, #184]	; (800aee4 <__swsetup_r+0xd0>)
 800ae2c:	429c      	cmp	r4, r3
 800ae2e:	d10f      	bne.n	800ae50 <__swsetup_r+0x3c>
 800ae30:	686c      	ldr	r4, [r5, #4]
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae38:	0719      	lsls	r1, r3, #28
 800ae3a:	d42c      	bmi.n	800ae96 <__swsetup_r+0x82>
 800ae3c:	06dd      	lsls	r5, r3, #27
 800ae3e:	d411      	bmi.n	800ae64 <__swsetup_r+0x50>
 800ae40:	2309      	movs	r3, #9
 800ae42:	6033      	str	r3, [r6, #0]
 800ae44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4e:	e03e      	b.n	800aece <__swsetup_r+0xba>
 800ae50:	4b25      	ldr	r3, [pc, #148]	; (800aee8 <__swsetup_r+0xd4>)
 800ae52:	429c      	cmp	r4, r3
 800ae54:	d101      	bne.n	800ae5a <__swsetup_r+0x46>
 800ae56:	68ac      	ldr	r4, [r5, #8]
 800ae58:	e7eb      	b.n	800ae32 <__swsetup_r+0x1e>
 800ae5a:	4b24      	ldr	r3, [pc, #144]	; (800aeec <__swsetup_r+0xd8>)
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	bf08      	it	eq
 800ae60:	68ec      	ldreq	r4, [r5, #12]
 800ae62:	e7e6      	b.n	800ae32 <__swsetup_r+0x1e>
 800ae64:	0758      	lsls	r0, r3, #29
 800ae66:	d512      	bpl.n	800ae8e <__swsetup_r+0x7a>
 800ae68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae6a:	b141      	cbz	r1, 800ae7e <__swsetup_r+0x6a>
 800ae6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae70:	4299      	cmp	r1, r3
 800ae72:	d002      	beq.n	800ae7a <__swsetup_r+0x66>
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7ff fb25 	bl	800a4c4 <_free_r>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae84:	81a3      	strh	r3, [r4, #12]
 800ae86:	2300      	movs	r3, #0
 800ae88:	6063      	str	r3, [r4, #4]
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	f043 0308 	orr.w	r3, r3, #8
 800ae94:	81a3      	strh	r3, [r4, #12]
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	b94b      	cbnz	r3, 800aeae <__swsetup_r+0x9a>
 800ae9a:	89a3      	ldrh	r3, [r4, #12]
 800ae9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aea4:	d003      	beq.n	800aeae <__swsetup_r+0x9a>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f000 fa09 	bl	800b2c0 <__smakebuf_r>
 800aeae:	89a0      	ldrh	r0, [r4, #12]
 800aeb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeb4:	f010 0301 	ands.w	r3, r0, #1
 800aeb8:	d00a      	beq.n	800aed0 <__swsetup_r+0xbc>
 800aeba:	2300      	movs	r3, #0
 800aebc:	60a3      	str	r3, [r4, #8]
 800aebe:	6963      	ldr	r3, [r4, #20]
 800aec0:	425b      	negs	r3, r3
 800aec2:	61a3      	str	r3, [r4, #24]
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	b943      	cbnz	r3, 800aeda <__swsetup_r+0xc6>
 800aec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aecc:	d1ba      	bne.n	800ae44 <__swsetup_r+0x30>
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	0781      	lsls	r1, r0, #30
 800aed2:	bf58      	it	pl
 800aed4:	6963      	ldrpl	r3, [r4, #20]
 800aed6:	60a3      	str	r3, [r4, #8]
 800aed8:	e7f4      	b.n	800aec4 <__swsetup_r+0xb0>
 800aeda:	2000      	movs	r0, #0
 800aedc:	e7f7      	b.n	800aece <__swsetup_r+0xba>
 800aede:	bf00      	nop
 800aee0:	2000000c 	.word	0x2000000c
 800aee4:	0800bc5c 	.word	0x0800bc5c
 800aee8:	0800bc7c 	.word	0x0800bc7c
 800aeec:	0800bc3c 	.word	0x0800bc3c

0800aef0 <abort>:
 800aef0:	b508      	push	{r3, lr}
 800aef2:	2006      	movs	r0, #6
 800aef4:	f000 fa54 	bl	800b3a0 <raise>
 800aef8:	2001      	movs	r0, #1
 800aefa:	f7f6 fb5f 	bl	80015bc <_exit>
	...

0800af00 <__sflush_r>:
 800af00:	898a      	ldrh	r2, [r1, #12]
 800af02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af06:	4605      	mov	r5, r0
 800af08:	0710      	lsls	r0, r2, #28
 800af0a:	460c      	mov	r4, r1
 800af0c:	d458      	bmi.n	800afc0 <__sflush_r+0xc0>
 800af0e:	684b      	ldr	r3, [r1, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dc05      	bgt.n	800af20 <__sflush_r+0x20>
 800af14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	dc02      	bgt.n	800af20 <__sflush_r+0x20>
 800af1a:	2000      	movs	r0, #0
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af22:	2e00      	cmp	r6, #0
 800af24:	d0f9      	beq.n	800af1a <__sflush_r+0x1a>
 800af26:	2300      	movs	r3, #0
 800af28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af2c:	682f      	ldr	r7, [r5, #0]
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	d032      	beq.n	800af98 <__sflush_r+0x98>
 800af32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	075a      	lsls	r2, r3, #29
 800af38:	d505      	bpl.n	800af46 <__sflush_r+0x46>
 800af3a:	6863      	ldr	r3, [r4, #4]
 800af3c:	1ac0      	subs	r0, r0, r3
 800af3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af40:	b10b      	cbz	r3, 800af46 <__sflush_r+0x46>
 800af42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af44:	1ac0      	subs	r0, r0, r3
 800af46:	2300      	movs	r3, #0
 800af48:	4602      	mov	r2, r0
 800af4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4c:	6a21      	ldr	r1, [r4, #32]
 800af4e:	4628      	mov	r0, r5
 800af50:	47b0      	blx	r6
 800af52:	1c43      	adds	r3, r0, #1
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	d106      	bne.n	800af66 <__sflush_r+0x66>
 800af58:	6829      	ldr	r1, [r5, #0]
 800af5a:	291d      	cmp	r1, #29
 800af5c:	d82c      	bhi.n	800afb8 <__sflush_r+0xb8>
 800af5e:	4a2a      	ldr	r2, [pc, #168]	; (800b008 <__sflush_r+0x108>)
 800af60:	40ca      	lsrs	r2, r1
 800af62:	07d6      	lsls	r6, r2, #31
 800af64:	d528      	bpl.n	800afb8 <__sflush_r+0xb8>
 800af66:	2200      	movs	r2, #0
 800af68:	6062      	str	r2, [r4, #4]
 800af6a:	04d9      	lsls	r1, r3, #19
 800af6c:	6922      	ldr	r2, [r4, #16]
 800af6e:	6022      	str	r2, [r4, #0]
 800af70:	d504      	bpl.n	800af7c <__sflush_r+0x7c>
 800af72:	1c42      	adds	r2, r0, #1
 800af74:	d101      	bne.n	800af7a <__sflush_r+0x7a>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	b903      	cbnz	r3, 800af7c <__sflush_r+0x7c>
 800af7a:	6560      	str	r0, [r4, #84]	; 0x54
 800af7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af7e:	602f      	str	r7, [r5, #0]
 800af80:	2900      	cmp	r1, #0
 800af82:	d0ca      	beq.n	800af1a <__sflush_r+0x1a>
 800af84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af88:	4299      	cmp	r1, r3
 800af8a:	d002      	beq.n	800af92 <__sflush_r+0x92>
 800af8c:	4628      	mov	r0, r5
 800af8e:	f7ff fa99 	bl	800a4c4 <_free_r>
 800af92:	2000      	movs	r0, #0
 800af94:	6360      	str	r0, [r4, #52]	; 0x34
 800af96:	e7c1      	b.n	800af1c <__sflush_r+0x1c>
 800af98:	6a21      	ldr	r1, [r4, #32]
 800af9a:	2301      	movs	r3, #1
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b0      	blx	r6
 800afa0:	1c41      	adds	r1, r0, #1
 800afa2:	d1c7      	bne.n	800af34 <__sflush_r+0x34>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0c4      	beq.n	800af34 <__sflush_r+0x34>
 800afaa:	2b1d      	cmp	r3, #29
 800afac:	d001      	beq.n	800afb2 <__sflush_r+0xb2>
 800afae:	2b16      	cmp	r3, #22
 800afb0:	d101      	bne.n	800afb6 <__sflush_r+0xb6>
 800afb2:	602f      	str	r7, [r5, #0]
 800afb4:	e7b1      	b.n	800af1a <__sflush_r+0x1a>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afbc:	81a3      	strh	r3, [r4, #12]
 800afbe:	e7ad      	b.n	800af1c <__sflush_r+0x1c>
 800afc0:	690f      	ldr	r7, [r1, #16]
 800afc2:	2f00      	cmp	r7, #0
 800afc4:	d0a9      	beq.n	800af1a <__sflush_r+0x1a>
 800afc6:	0793      	lsls	r3, r2, #30
 800afc8:	680e      	ldr	r6, [r1, #0]
 800afca:	bf08      	it	eq
 800afcc:	694b      	ldreq	r3, [r1, #20]
 800afce:	600f      	str	r7, [r1, #0]
 800afd0:	bf18      	it	ne
 800afd2:	2300      	movne	r3, #0
 800afd4:	eba6 0807 	sub.w	r8, r6, r7
 800afd8:	608b      	str	r3, [r1, #8]
 800afda:	f1b8 0f00 	cmp.w	r8, #0
 800afde:	dd9c      	ble.n	800af1a <__sflush_r+0x1a>
 800afe0:	6a21      	ldr	r1, [r4, #32]
 800afe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afe4:	4643      	mov	r3, r8
 800afe6:	463a      	mov	r2, r7
 800afe8:	4628      	mov	r0, r5
 800afea:	47b0      	blx	r6
 800afec:	2800      	cmp	r0, #0
 800afee:	dc06      	bgt.n	800affe <__sflush_r+0xfe>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff6:	81a3      	strh	r3, [r4, #12]
 800aff8:	f04f 30ff 	mov.w	r0, #4294967295
 800affc:	e78e      	b.n	800af1c <__sflush_r+0x1c>
 800affe:	4407      	add	r7, r0
 800b000:	eba8 0800 	sub.w	r8, r8, r0
 800b004:	e7e9      	b.n	800afda <__sflush_r+0xda>
 800b006:	bf00      	nop
 800b008:	20400001 	.word	0x20400001

0800b00c <_fflush_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	690b      	ldr	r3, [r1, #16]
 800b010:	4605      	mov	r5, r0
 800b012:	460c      	mov	r4, r1
 800b014:	b913      	cbnz	r3, 800b01c <_fflush_r+0x10>
 800b016:	2500      	movs	r5, #0
 800b018:	4628      	mov	r0, r5
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	b118      	cbz	r0, 800b026 <_fflush_r+0x1a>
 800b01e:	6983      	ldr	r3, [r0, #24]
 800b020:	b90b      	cbnz	r3, 800b026 <_fflush_r+0x1a>
 800b022:	f000 f887 	bl	800b134 <__sinit>
 800b026:	4b14      	ldr	r3, [pc, #80]	; (800b078 <_fflush_r+0x6c>)
 800b028:	429c      	cmp	r4, r3
 800b02a:	d11b      	bne.n	800b064 <_fflush_r+0x58>
 800b02c:	686c      	ldr	r4, [r5, #4]
 800b02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0ef      	beq.n	800b016 <_fflush_r+0xa>
 800b036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b038:	07d0      	lsls	r0, r2, #31
 800b03a:	d404      	bmi.n	800b046 <_fflush_r+0x3a>
 800b03c:	0599      	lsls	r1, r3, #22
 800b03e:	d402      	bmi.n	800b046 <_fflush_r+0x3a>
 800b040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b042:	f000 f915 	bl	800b270 <__retarget_lock_acquire_recursive>
 800b046:	4628      	mov	r0, r5
 800b048:	4621      	mov	r1, r4
 800b04a:	f7ff ff59 	bl	800af00 <__sflush_r>
 800b04e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b050:	07da      	lsls	r2, r3, #31
 800b052:	4605      	mov	r5, r0
 800b054:	d4e0      	bmi.n	800b018 <_fflush_r+0xc>
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	059b      	lsls	r3, r3, #22
 800b05a:	d4dd      	bmi.n	800b018 <_fflush_r+0xc>
 800b05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b05e:	f000 f908 	bl	800b272 <__retarget_lock_release_recursive>
 800b062:	e7d9      	b.n	800b018 <_fflush_r+0xc>
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <_fflush_r+0x70>)
 800b066:	429c      	cmp	r4, r3
 800b068:	d101      	bne.n	800b06e <_fflush_r+0x62>
 800b06a:	68ac      	ldr	r4, [r5, #8]
 800b06c:	e7df      	b.n	800b02e <_fflush_r+0x22>
 800b06e:	4b04      	ldr	r3, [pc, #16]	; (800b080 <_fflush_r+0x74>)
 800b070:	429c      	cmp	r4, r3
 800b072:	bf08      	it	eq
 800b074:	68ec      	ldreq	r4, [r5, #12]
 800b076:	e7da      	b.n	800b02e <_fflush_r+0x22>
 800b078:	0800bc5c 	.word	0x0800bc5c
 800b07c:	0800bc7c 	.word	0x0800bc7c
 800b080:	0800bc3c 	.word	0x0800bc3c

0800b084 <std>:
 800b084:	2300      	movs	r3, #0
 800b086:	b510      	push	{r4, lr}
 800b088:	4604      	mov	r4, r0
 800b08a:	e9c0 3300 	strd	r3, r3, [r0]
 800b08e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b092:	6083      	str	r3, [r0, #8]
 800b094:	8181      	strh	r1, [r0, #12]
 800b096:	6643      	str	r3, [r0, #100]	; 0x64
 800b098:	81c2      	strh	r2, [r0, #14]
 800b09a:	6183      	str	r3, [r0, #24]
 800b09c:	4619      	mov	r1, r3
 800b09e:	2208      	movs	r2, #8
 800b0a0:	305c      	adds	r0, #92	; 0x5c
 800b0a2:	f7fb fd99 	bl	8006bd8 <memset>
 800b0a6:	4b05      	ldr	r3, [pc, #20]	; (800b0bc <std+0x38>)
 800b0a8:	6263      	str	r3, [r4, #36]	; 0x24
 800b0aa:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <std+0x3c>)
 800b0ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <std+0x40>)
 800b0b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0b2:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <std+0x44>)
 800b0b4:	6224      	str	r4, [r4, #32]
 800b0b6:	6323      	str	r3, [r4, #48]	; 0x30
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0800b3d9 	.word	0x0800b3d9
 800b0c0:	0800b3fb 	.word	0x0800b3fb
 800b0c4:	0800b433 	.word	0x0800b433
 800b0c8:	0800b457 	.word	0x0800b457

0800b0cc <_cleanup_r>:
 800b0cc:	4901      	ldr	r1, [pc, #4]	; (800b0d4 <_cleanup_r+0x8>)
 800b0ce:	f000 b8af 	b.w	800b230 <_fwalk_reent>
 800b0d2:	bf00      	nop
 800b0d4:	0800b00d 	.word	0x0800b00d

0800b0d8 <__sfmoreglue>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	2268      	movs	r2, #104	; 0x68
 800b0dc:	1e4d      	subs	r5, r1, #1
 800b0de:	4355      	muls	r5, r2
 800b0e0:	460e      	mov	r6, r1
 800b0e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0e6:	f7ff fa59 	bl	800a59c <_malloc_r>
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	b140      	cbz	r0, 800b100 <__sfmoreglue+0x28>
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	e9c0 1600 	strd	r1, r6, [r0]
 800b0f4:	300c      	adds	r0, #12
 800b0f6:	60a0      	str	r0, [r4, #8]
 800b0f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0fc:	f7fb fd6c 	bl	8006bd8 <memset>
 800b100:	4620      	mov	r0, r4
 800b102:	bd70      	pop	{r4, r5, r6, pc}

0800b104 <__sfp_lock_acquire>:
 800b104:	4801      	ldr	r0, [pc, #4]	; (800b10c <__sfp_lock_acquire+0x8>)
 800b106:	f000 b8b3 	b.w	800b270 <__retarget_lock_acquire_recursive>
 800b10a:	bf00      	nop
 800b10c:	200003c5 	.word	0x200003c5

0800b110 <__sfp_lock_release>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__sfp_lock_release+0x8>)
 800b112:	f000 b8ae 	b.w	800b272 <__retarget_lock_release_recursive>
 800b116:	bf00      	nop
 800b118:	200003c5 	.word	0x200003c5

0800b11c <__sinit_lock_acquire>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__sinit_lock_acquire+0x8>)
 800b11e:	f000 b8a7 	b.w	800b270 <__retarget_lock_acquire_recursive>
 800b122:	bf00      	nop
 800b124:	200003c6 	.word	0x200003c6

0800b128 <__sinit_lock_release>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__sinit_lock_release+0x8>)
 800b12a:	f000 b8a2 	b.w	800b272 <__retarget_lock_release_recursive>
 800b12e:	bf00      	nop
 800b130:	200003c6 	.word	0x200003c6

0800b134 <__sinit>:
 800b134:	b510      	push	{r4, lr}
 800b136:	4604      	mov	r4, r0
 800b138:	f7ff fff0 	bl	800b11c <__sinit_lock_acquire>
 800b13c:	69a3      	ldr	r3, [r4, #24]
 800b13e:	b11b      	cbz	r3, 800b148 <__sinit+0x14>
 800b140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b144:	f7ff bff0 	b.w	800b128 <__sinit_lock_release>
 800b148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b14c:	6523      	str	r3, [r4, #80]	; 0x50
 800b14e:	4b13      	ldr	r3, [pc, #76]	; (800b19c <__sinit+0x68>)
 800b150:	4a13      	ldr	r2, [pc, #76]	; (800b1a0 <__sinit+0x6c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	62a2      	str	r2, [r4, #40]	; 0x28
 800b156:	42a3      	cmp	r3, r4
 800b158:	bf04      	itt	eq
 800b15a:	2301      	moveq	r3, #1
 800b15c:	61a3      	streq	r3, [r4, #24]
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 f820 	bl	800b1a4 <__sfp>
 800b164:	6060      	str	r0, [r4, #4]
 800b166:	4620      	mov	r0, r4
 800b168:	f000 f81c 	bl	800b1a4 <__sfp>
 800b16c:	60a0      	str	r0, [r4, #8]
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 f818 	bl	800b1a4 <__sfp>
 800b174:	2200      	movs	r2, #0
 800b176:	60e0      	str	r0, [r4, #12]
 800b178:	2104      	movs	r1, #4
 800b17a:	6860      	ldr	r0, [r4, #4]
 800b17c:	f7ff ff82 	bl	800b084 <std>
 800b180:	68a0      	ldr	r0, [r4, #8]
 800b182:	2201      	movs	r2, #1
 800b184:	2109      	movs	r1, #9
 800b186:	f7ff ff7d 	bl	800b084 <std>
 800b18a:	68e0      	ldr	r0, [r4, #12]
 800b18c:	2202      	movs	r2, #2
 800b18e:	2112      	movs	r1, #18
 800b190:	f7ff ff78 	bl	800b084 <std>
 800b194:	2301      	movs	r3, #1
 800b196:	61a3      	str	r3, [r4, #24]
 800b198:	e7d2      	b.n	800b140 <__sinit+0xc>
 800b19a:	bf00      	nop
 800b19c:	0800b7f8 	.word	0x0800b7f8
 800b1a0:	0800b0cd 	.word	0x0800b0cd

0800b1a4 <__sfp>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	f7ff ffac 	bl	800b104 <__sfp_lock_acquire>
 800b1ac:	4b1e      	ldr	r3, [pc, #120]	; (800b228 <__sfp+0x84>)
 800b1ae:	681e      	ldr	r6, [r3, #0]
 800b1b0:	69b3      	ldr	r3, [r6, #24]
 800b1b2:	b913      	cbnz	r3, 800b1ba <__sfp+0x16>
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff ffbd 	bl	800b134 <__sinit>
 800b1ba:	3648      	adds	r6, #72	; 0x48
 800b1bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	d503      	bpl.n	800b1cc <__sfp+0x28>
 800b1c4:	6833      	ldr	r3, [r6, #0]
 800b1c6:	b30b      	cbz	r3, 800b20c <__sfp+0x68>
 800b1c8:	6836      	ldr	r6, [r6, #0]
 800b1ca:	e7f7      	b.n	800b1bc <__sfp+0x18>
 800b1cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1d0:	b9d5      	cbnz	r5, 800b208 <__sfp+0x64>
 800b1d2:	4b16      	ldr	r3, [pc, #88]	; (800b22c <__sfp+0x88>)
 800b1d4:	60e3      	str	r3, [r4, #12]
 800b1d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1da:	6665      	str	r5, [r4, #100]	; 0x64
 800b1dc:	f000 f847 	bl	800b26e <__retarget_lock_init_recursive>
 800b1e0:	f7ff ff96 	bl	800b110 <__sfp_lock_release>
 800b1e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1ec:	6025      	str	r5, [r4, #0]
 800b1ee:	61a5      	str	r5, [r4, #24]
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1f8:	f7fb fcee 	bl	8006bd8 <memset>
 800b1fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b204:	4620      	mov	r0, r4
 800b206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b208:	3468      	adds	r4, #104	; 0x68
 800b20a:	e7d9      	b.n	800b1c0 <__sfp+0x1c>
 800b20c:	2104      	movs	r1, #4
 800b20e:	4638      	mov	r0, r7
 800b210:	f7ff ff62 	bl	800b0d8 <__sfmoreglue>
 800b214:	4604      	mov	r4, r0
 800b216:	6030      	str	r0, [r6, #0]
 800b218:	2800      	cmp	r0, #0
 800b21a:	d1d5      	bne.n	800b1c8 <__sfp+0x24>
 800b21c:	f7ff ff78 	bl	800b110 <__sfp_lock_release>
 800b220:	230c      	movs	r3, #12
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	e7ee      	b.n	800b204 <__sfp+0x60>
 800b226:	bf00      	nop
 800b228:	0800b7f8 	.word	0x0800b7f8
 800b22c:	ffff0001 	.word	0xffff0001

0800b230 <_fwalk_reent>:
 800b230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b234:	4606      	mov	r6, r0
 800b236:	4688      	mov	r8, r1
 800b238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b23c:	2700      	movs	r7, #0
 800b23e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b242:	f1b9 0901 	subs.w	r9, r9, #1
 800b246:	d505      	bpl.n	800b254 <_fwalk_reent+0x24>
 800b248:	6824      	ldr	r4, [r4, #0]
 800b24a:	2c00      	cmp	r4, #0
 800b24c:	d1f7      	bne.n	800b23e <_fwalk_reent+0xe>
 800b24e:	4638      	mov	r0, r7
 800b250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b254:	89ab      	ldrh	r3, [r5, #12]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d907      	bls.n	800b26a <_fwalk_reent+0x3a>
 800b25a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b25e:	3301      	adds	r3, #1
 800b260:	d003      	beq.n	800b26a <_fwalk_reent+0x3a>
 800b262:	4629      	mov	r1, r5
 800b264:	4630      	mov	r0, r6
 800b266:	47c0      	blx	r8
 800b268:	4307      	orrs	r7, r0
 800b26a:	3568      	adds	r5, #104	; 0x68
 800b26c:	e7e9      	b.n	800b242 <_fwalk_reent+0x12>

0800b26e <__retarget_lock_init_recursive>:
 800b26e:	4770      	bx	lr

0800b270 <__retarget_lock_acquire_recursive>:
 800b270:	4770      	bx	lr

0800b272 <__retarget_lock_release_recursive>:
 800b272:	4770      	bx	lr

0800b274 <__swhatbuf_r>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	460e      	mov	r6, r1
 800b278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27c:	2900      	cmp	r1, #0
 800b27e:	b096      	sub	sp, #88	; 0x58
 800b280:	4614      	mov	r4, r2
 800b282:	461d      	mov	r5, r3
 800b284:	da08      	bge.n	800b298 <__swhatbuf_r+0x24>
 800b286:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	602a      	str	r2, [r5, #0]
 800b28e:	061a      	lsls	r2, r3, #24
 800b290:	d410      	bmi.n	800b2b4 <__swhatbuf_r+0x40>
 800b292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b296:	e00e      	b.n	800b2b6 <__swhatbuf_r+0x42>
 800b298:	466a      	mov	r2, sp
 800b29a:	f000 f903 	bl	800b4a4 <_fstat_r>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	dbf1      	blt.n	800b286 <__swhatbuf_r+0x12>
 800b2a2:	9a01      	ldr	r2, [sp, #4]
 800b2a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2ac:	425a      	negs	r2, r3
 800b2ae:	415a      	adcs	r2, r3
 800b2b0:	602a      	str	r2, [r5, #0]
 800b2b2:	e7ee      	b.n	800b292 <__swhatbuf_r+0x1e>
 800b2b4:	2340      	movs	r3, #64	; 0x40
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	b016      	add	sp, #88	; 0x58
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2c0 <__smakebuf_r>:
 800b2c0:	898b      	ldrh	r3, [r1, #12]
 800b2c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2c4:	079d      	lsls	r5, r3, #30
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	d507      	bpl.n	800b2dc <__smakebuf_r+0x1c>
 800b2cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	6123      	str	r3, [r4, #16]
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	6163      	str	r3, [r4, #20]
 800b2d8:	b002      	add	sp, #8
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	ab01      	add	r3, sp, #4
 800b2de:	466a      	mov	r2, sp
 800b2e0:	f7ff ffc8 	bl	800b274 <__swhatbuf_r>
 800b2e4:	9900      	ldr	r1, [sp, #0]
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff f957 	bl	800a59c <_malloc_r>
 800b2ee:	b948      	cbnz	r0, 800b304 <__smakebuf_r+0x44>
 800b2f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f4:	059a      	lsls	r2, r3, #22
 800b2f6:	d4ef      	bmi.n	800b2d8 <__smakebuf_r+0x18>
 800b2f8:	f023 0303 	bic.w	r3, r3, #3
 800b2fc:	f043 0302 	orr.w	r3, r3, #2
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	e7e3      	b.n	800b2cc <__smakebuf_r+0xc>
 800b304:	4b0d      	ldr	r3, [pc, #52]	; (800b33c <__smakebuf_r+0x7c>)
 800b306:	62b3      	str	r3, [r6, #40]	; 0x28
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	6020      	str	r0, [r4, #0]
 800b30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	9b00      	ldr	r3, [sp, #0]
 800b314:	6163      	str	r3, [r4, #20]
 800b316:	9b01      	ldr	r3, [sp, #4]
 800b318:	6120      	str	r0, [r4, #16]
 800b31a:	b15b      	cbz	r3, 800b334 <__smakebuf_r+0x74>
 800b31c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b320:	4630      	mov	r0, r6
 800b322:	f000 f8d1 	bl	800b4c8 <_isatty_r>
 800b326:	b128      	cbz	r0, 800b334 <__smakebuf_r+0x74>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f023 0303 	bic.w	r3, r3, #3
 800b32e:	f043 0301 	orr.w	r3, r3, #1
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	89a0      	ldrh	r0, [r4, #12]
 800b336:	4305      	orrs	r5, r0
 800b338:	81a5      	strh	r5, [r4, #12]
 800b33a:	e7cd      	b.n	800b2d8 <__smakebuf_r+0x18>
 800b33c:	0800b0cd 	.word	0x0800b0cd

0800b340 <_malloc_usable_size_r>:
 800b340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b344:	1f18      	subs	r0, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfbc      	itt	lt
 800b34a:	580b      	ldrlt	r3, [r1, r0]
 800b34c:	18c0      	addlt	r0, r0, r3
 800b34e:	4770      	bx	lr

0800b350 <_raise_r>:
 800b350:	291f      	cmp	r1, #31
 800b352:	b538      	push	{r3, r4, r5, lr}
 800b354:	4604      	mov	r4, r0
 800b356:	460d      	mov	r5, r1
 800b358:	d904      	bls.n	800b364 <_raise_r+0x14>
 800b35a:	2316      	movs	r3, #22
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	f04f 30ff 	mov.w	r0, #4294967295
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b366:	b112      	cbz	r2, 800b36e <_raise_r+0x1e>
 800b368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b36c:	b94b      	cbnz	r3, 800b382 <_raise_r+0x32>
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 f830 	bl	800b3d4 <_getpid_r>
 800b374:	462a      	mov	r2, r5
 800b376:	4601      	mov	r1, r0
 800b378:	4620      	mov	r0, r4
 800b37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b37e:	f000 b817 	b.w	800b3b0 <_kill_r>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d00a      	beq.n	800b39c <_raise_r+0x4c>
 800b386:	1c59      	adds	r1, r3, #1
 800b388:	d103      	bne.n	800b392 <_raise_r+0x42>
 800b38a:	2316      	movs	r3, #22
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	2001      	movs	r0, #1
 800b390:	e7e7      	b.n	800b362 <_raise_r+0x12>
 800b392:	2400      	movs	r4, #0
 800b394:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b398:	4628      	mov	r0, r5
 800b39a:	4798      	blx	r3
 800b39c:	2000      	movs	r0, #0
 800b39e:	e7e0      	b.n	800b362 <_raise_r+0x12>

0800b3a0 <raise>:
 800b3a0:	4b02      	ldr	r3, [pc, #8]	; (800b3ac <raise+0xc>)
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	6818      	ldr	r0, [r3, #0]
 800b3a6:	f7ff bfd3 	b.w	800b350 <_raise_r>
 800b3aa:	bf00      	nop
 800b3ac:	2000000c 	.word	0x2000000c

0800b3b0 <_kill_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d07      	ldr	r5, [pc, #28]	; (800b3d0 <_kill_r+0x20>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	f7f6 f8ed 	bl	800159c <_kill>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d102      	bne.n	800b3cc <_kill_r+0x1c>
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	b103      	cbz	r3, 800b3cc <_kill_r+0x1c>
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200003c0 	.word	0x200003c0

0800b3d4 <_getpid_r>:
 800b3d4:	f7f6 b8da 	b.w	800158c <_getpid>

0800b3d8 <__sread>:
 800b3d8:	b510      	push	{r4, lr}
 800b3da:	460c      	mov	r4, r1
 800b3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e0:	f000 f894 	bl	800b50c <_read_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	bfab      	itete	ge
 800b3e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b3ec:	181b      	addge	r3, r3, r0
 800b3ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3f2:	bfac      	ite	ge
 800b3f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3f6:	81a3      	strhlt	r3, [r4, #12]
 800b3f8:	bd10      	pop	{r4, pc}

0800b3fa <__swrite>:
 800b3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fe:	461f      	mov	r7, r3
 800b400:	898b      	ldrh	r3, [r1, #12]
 800b402:	05db      	lsls	r3, r3, #23
 800b404:	4605      	mov	r5, r0
 800b406:	460c      	mov	r4, r1
 800b408:	4616      	mov	r6, r2
 800b40a:	d505      	bpl.n	800b418 <__swrite+0x1e>
 800b40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b410:	2302      	movs	r3, #2
 800b412:	2200      	movs	r2, #0
 800b414:	f000 f868 	bl	800b4e8 <_lseek_r>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b41e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b422:	81a3      	strh	r3, [r4, #12]
 800b424:	4632      	mov	r2, r6
 800b426:	463b      	mov	r3, r7
 800b428:	4628      	mov	r0, r5
 800b42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b42e:	f000 b817 	b.w	800b460 <_write_r>

0800b432 <__sseek>:
 800b432:	b510      	push	{r4, lr}
 800b434:	460c      	mov	r4, r1
 800b436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43a:	f000 f855 	bl	800b4e8 <_lseek_r>
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	bf15      	itete	ne
 800b444:	6560      	strne	r0, [r4, #84]	; 0x54
 800b446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b44a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b44e:	81a3      	strheq	r3, [r4, #12]
 800b450:	bf18      	it	ne
 800b452:	81a3      	strhne	r3, [r4, #12]
 800b454:	bd10      	pop	{r4, pc}

0800b456 <__sclose>:
 800b456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b45a:	f000 b813 	b.w	800b484 <_close_r>
	...

0800b460 <_write_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4d07      	ldr	r5, [pc, #28]	; (800b480 <_write_r+0x20>)
 800b464:	4604      	mov	r4, r0
 800b466:	4608      	mov	r0, r1
 800b468:	4611      	mov	r1, r2
 800b46a:	2200      	movs	r2, #0
 800b46c:	602a      	str	r2, [r5, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	f7f6 f8cb 	bl	800160a <_write>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	d102      	bne.n	800b47e <_write_r+0x1e>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	b103      	cbz	r3, 800b47e <_write_r+0x1e>
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	200003c0 	.word	0x200003c0

0800b484 <_close_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4d06      	ldr	r5, [pc, #24]	; (800b4a0 <_close_r+0x1c>)
 800b488:	2300      	movs	r3, #0
 800b48a:	4604      	mov	r4, r0
 800b48c:	4608      	mov	r0, r1
 800b48e:	602b      	str	r3, [r5, #0]
 800b490:	f7f6 f8d7 	bl	8001642 <_close>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_close_r+0x1a>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_close_r+0x1a>
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	200003c0 	.word	0x200003c0

0800b4a4 <_fstat_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d07      	ldr	r5, [pc, #28]	; (800b4c4 <_fstat_r+0x20>)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	602b      	str	r3, [r5, #0]
 800b4b2:	f7f6 f8d2 	bl	800165a <_fstat>
 800b4b6:	1c43      	adds	r3, r0, #1
 800b4b8:	d102      	bne.n	800b4c0 <_fstat_r+0x1c>
 800b4ba:	682b      	ldr	r3, [r5, #0]
 800b4bc:	b103      	cbz	r3, 800b4c0 <_fstat_r+0x1c>
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	bd38      	pop	{r3, r4, r5, pc}
 800b4c2:	bf00      	nop
 800b4c4:	200003c0 	.word	0x200003c0

0800b4c8 <_isatty_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d06      	ldr	r5, [pc, #24]	; (800b4e4 <_isatty_r+0x1c>)
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	602b      	str	r3, [r5, #0]
 800b4d4:	f7f6 f8d1 	bl	800167a <_isatty>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	d102      	bne.n	800b4e2 <_isatty_r+0x1a>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	b103      	cbz	r3, 800b4e2 <_isatty_r+0x1a>
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	200003c0 	.word	0x200003c0

0800b4e8 <_lseek_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4d07      	ldr	r5, [pc, #28]	; (800b508 <_lseek_r+0x20>)
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	4608      	mov	r0, r1
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	602a      	str	r2, [r5, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f7f6 f8ca 	bl	8001690 <_lseek>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_lseek_r+0x1e>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_lseek_r+0x1e>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	200003c0 	.word	0x200003c0

0800b50c <_read_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d07      	ldr	r5, [pc, #28]	; (800b52c <_read_r+0x20>)
 800b510:	4604      	mov	r4, r0
 800b512:	4608      	mov	r0, r1
 800b514:	4611      	mov	r1, r2
 800b516:	2200      	movs	r2, #0
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f7f6 f858 	bl	80015d0 <_read>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_read_r+0x1e>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_read_r+0x1e>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200003c0 	.word	0x200003c0

0800b530 <_init>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr

0800b53c <_fini>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr
